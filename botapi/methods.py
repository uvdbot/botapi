# This is an autogenerated file. Do not edit this file directly.
# If you want to change the contents of this file, you should edit the
# corresponding file in the `botapi` package.

from __future__ import annotations

from pydantic import TypeAdapter, ValidationError
from typing import Union, Optional, List

from botapi.types import (
    Update,
    WebhookInfo,
    User,
    Chat,
    ChatFullInfo,
    Message,
    MessageId,
    MessageEntity,
    TextQuote,
    ExternalReplyInfo,
    ReplyParameters,
    MessageOriginUser,
    MessageOriginHiddenUser,
    MessageOriginChat,
    MessageOriginChannel,
    PhotoSize,
    Animation,
    Audio,
    Document,
    Story,
    Video,
    VideoNote,
    Voice,
    PaidMediaInfo,
    PaidMediaPreview,
    PaidMediaPhoto,
    PaidMediaVideo,
    Contact,
    Dice,
    PollOption,
    InputPollOption,
    PollAnswer,
    Poll,
    Location,
    Venue,
    WebAppData,
    ProximityAlertTriggered,
    MessageAutoDeleteTimerChanged,
    ChatBoostAdded,
    BackgroundFillSolid,
    BackgroundFillGradient,
    BackgroundFillFreeformGradient,
    BackgroundTypeFill,
    BackgroundTypeWallpaper,
    BackgroundTypePattern,
    BackgroundTypeChatTheme,
    ChatBackground,
    ForumTopicCreated,
    ForumTopicClosed,
    ForumTopicEdited,
    ForumTopicReopened,
    GeneralForumTopicHidden,
    GeneralForumTopicUnhidden,
    SharedUser,
    UsersShared,
    ChatShared,
    WriteAccessAllowed,
    VideoChatScheduled,
    VideoChatStarted,
    VideoChatEnded,
    VideoChatParticipantsInvited,
    GiveawayCreated,
    Giveaway,
    GiveawayWinners,
    GiveawayCompleted,
    LinkPreviewOptions,
    UserProfilePhotos,
    File,
    WebAppInfo,
    ReplyKeyboardMarkup,
    KeyboardButton,
    KeyboardButtonRequestUsers,
    KeyboardButtonRequestChat,
    KeyboardButtonPollType,
    ReplyKeyboardRemove,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    LoginUrl,
    SwitchInlineQueryChosenChat,
    CopyTextButton,
    CallbackQuery,
    ForceReply,
    ChatPhoto,
    ChatInviteLink,
    ChatAdministratorRights,
    ChatMemberUpdated,
    ChatMemberOwner,
    ChatMemberAdministrator,
    ChatMemberMember,
    ChatMemberRestricted,
    ChatMemberLeft,
    ChatMemberBanned,
    ChatJoinRequest,
    ChatPermissions,
    Birthdate,
    BusinessIntro,
    BusinessLocation,
    BusinessOpeningHoursInterval,
    BusinessOpeningHours,
    ChatLocation,
    ReactionTypeEmoji,
    ReactionTypeCustomEmoji,
    ReactionTypePaid,
    ReactionCount,
    MessageReactionUpdated,
    MessageReactionCountUpdated,
    ForumTopic,
    BotCommand,
    BotCommandScopeDefault,
    BotCommandScopeAllPrivateChats,
    BotCommandScopeAllGroupChats,
    BotCommandScopeAllChatAdministrators,
    BotCommandScopeChat,
    BotCommandScopeChatAdministrators,
    BotCommandScopeChatMember,
    BotName,
    BotDescription,
    BotShortDescription,
    MenuButtonCommands,
    MenuButtonWebApp,
    MenuButtonDefault,
    ChatBoostSourcePremium,
    ChatBoostSourceGiftCode,
    ChatBoostSourceGiveaway,
    ChatBoost,
    ChatBoostUpdated,
    ChatBoostRemoved,
    UserChatBoosts,
    BusinessConnection,
    BusinessMessagesDeleted,
    ResponseParameters,
    InputMediaPhoto,
    InputMediaVideo,
    InputMediaAnimation,
    InputMediaAudio,
    InputMediaDocument,
    InputFile,
    InputPaidMediaPhoto,
    InputPaidMediaVideo,
    Sticker,
    StickerSet,
    MaskPosition,
    InputSticker,
    Gift,
    Gifts,
    InlineQuery,
    InlineQueryResultsButton,
    InlineQueryResultArticle,
    InlineQueryResultPhoto,
    InlineQueryResultGif,
    InlineQueryResultMpeg4Gif,
    InlineQueryResultVideo,
    InlineQueryResultAudio,
    InlineQueryResultVoice,
    InlineQueryResultDocument,
    InlineQueryResultLocation,
    InlineQueryResultVenue,
    InlineQueryResultContact,
    InlineQueryResultGame,
    InlineQueryResultCachedPhoto,
    InlineQueryResultCachedGif,
    InlineQueryResultCachedMpeg4Gif,
    InlineQueryResultCachedSticker,
    InlineQueryResultCachedDocument,
    InlineQueryResultCachedVideo,
    InlineQueryResultCachedVoice,
    InlineQueryResultCachedAudio,
    InputTextMessageContent,
    InputLocationMessageContent,
    InputVenueMessageContent,
    InputContactMessageContent,
    InputInvoiceMessageContent,
    ChosenInlineResult,
    SentWebAppMessage,
    PreparedInlineMessage,
    LabeledPrice,
    Invoice,
    ShippingAddress,
    OrderInfo,
    ShippingOption,
    SuccessfulPayment,
    RefundedPayment,
    ShippingQuery,
    PreCheckoutQuery,
    PaidMediaPurchased,
    RevenueWithdrawalStatePending,
    RevenueWithdrawalStateSucceeded,
    RevenueWithdrawalStateFailed,
    AffiliateInfo,
    TransactionPartnerUser,
    TransactionPartnerAffiliateProgram,
    TransactionPartnerFragment,
    TransactionPartnerTelegramAds,
    TransactionPartnerTelegramApi,
    TransactionPartnerOther,
    StarTransaction,
    StarTransactions,
    PassportData,
    PassportFile,
    EncryptedPassportElement,
    EncryptedCredentials,
    PassportElementErrorDataField,
    PassportElementErrorFrontSide,
    PassportElementErrorReverseSide,
    PassportElementErrorSelfie,
    PassportElementErrorFile,
    PassportElementErrorFiles,
    PassportElementErrorTranslationFile,
    PassportElementErrorTranslationFiles,
    PassportElementErrorUnspecified,
    Game,
    CallbackGame,
    GameHighScore,
    MessageOrigin,
    _MessageOriginAdapter,
    PaidMedia,
    _PaidMediaAdapter,
    BackgroundFill,
    _BackgroundFillAdapter,
    BackgroundType,
    _BackgroundTypeAdapter,
    ChatMember,
    _ChatMemberAdapter,
    ReactionType,
    _ReactionTypeAdapter,
    BotCommandScope,
    _BotCommandScopeAdapter,
    MenuButton,
    _MenuButtonAdapter,
    ChatBoostSource,
    _ChatBoostSourceAdapter,
    InputMedia,
    _InputMediaAdapter,
    InputPaidMedia,
    _InputPaidMediaAdapter,
    InlineQueryResult,
    _InlineQueryResultAdapter,
    InputMessageContent,
    _InputMessageContentAdapter,
    RevenueWithdrawalState,
    _RevenueWithdrawalStateAdapter,
    TransactionPartner,
    _TransactionPartnerAdapter,
    PassportElementError,
    _PassportElementErrorAdapter,
)

import botapi

class Methods:
    async def get_updates(
        self: botapi.BotAPI,
        offset: Optional[int] = None,
        limit: Optional[int] = None,
        timeout: Optional[int] = None,
        allowed_updates: Optional[List[str]] = None,
    ) -> Optional[List[Update]]:
        """
        Use this method to receive incoming updates using
        long polling (wiki). Returns an Array of Update
        objects.

        Reference: https://core.telegram.org/bots/api#getupdates
        """

        response = await self._send_request("getUpdates", {
            "offset": offset,
            "limit": limit,
            "timeout": timeout,
            "allowed_updates": allowed_updates,
        })
        return [Update.model_validate(x) for x in response]

    async def set_webhook(
        self: botapi.BotAPI,
        url: str,
        certificate: Optional[InputFile] = None,
        ip_address: Optional[str] = None,
        max_connections: Optional[int] = None,
        allowed_updates: Optional[List[str]] = None,
        drop_pending_updates: Optional[bool] = None,
        secret_token: Optional[str] = None,
    ) -> Optional[bool]:
        """
        Use this method to specify a URL and
        receive incoming updates via an outgoing webhook. Whenever
        there is an update for the bot, we
        will send an HTTPS POST request to the
        specified URL, containing a JSON-serialized Update. In case
        of an unsuccessful request, we will give up
        after a reasonable amount of attempts. Returns True
        on success.

        Reference: https://core.telegram.org/bots/api#setwebhook
        """

        response = await self._send_request("setWebhook", {
            "url": url,
            "certificate": certificate,
            "ip_address": ip_address,
            "max_connections": max_connections,
            "allowed_updates": allowed_updates,
            "drop_pending_updates": drop_pending_updates,
            "secret_token": secret_token,
        })
        return response

    async def delete_webhook(
        self: botapi.BotAPI,
        drop_pending_updates: Optional[bool] = None,
    ) -> Optional[bool]:
        """
        Use this method to remove webhook integration if
        you decide to switch back to getUpdates. Returns
        True on success.

        Reference: https://core.telegram.org/bots/api#deletewebhook
        """

        response = await self._send_request("deleteWebhook", {
            "drop_pending_updates": drop_pending_updates,
        })
        return response

    async def get_webhook_info(
        self: botapi.BotAPI,
    ) -> Optional[WebhookInfo]:
        """
        Use this method to get current webhook status.
        Requires no parameters. On success, returns a WebhookInfo
        object. If the bot is using getUpdates, will
        return an object with the url field empty.

        Reference: https://core.telegram.org/bots/api#getwebhookinfo
        """

        response = await self._send_request("getWebhookInfo", {})
        return WebhookInfo.model_validate(response)

    async def get_me(
        self: botapi.BotAPI,
    ) -> Optional[User]:
        """
        A simple method for testing your bot's authentication
        token. Requires no parameters. Returns basic information about
        the bot in form of a User object.

        Reference: https://core.telegram.org/bots/api#getme
        """

        response = await self._send_request("getMe", {})
        return User.model_validate(response)

    async def log_out(
        self: botapi.BotAPI,
    ) -> Optional[bool]:
        """
        Use this method to log out from the
        cloud Bot API server before launching the bot
        locally. You must log out the bot before
        running it locally, otherwise there is no guarantee
        that the bot will receive updates. After a
        successful call, you can immediately log in on
        a local server, but will not be able
        to log in back to the cloud Bot
        API server for 10 minutes. Returns True on
        success. Requires no parameters.

        Reference: https://core.telegram.org/bots/api#logout
        """

        response = await self._send_request("logOut", {})
        return response

    async def close(
        self: botapi.BotAPI,
    ) -> Optional[bool]:
        """
        Use this method to close the bot instance
        before moving it from one local server to
        another. You need to delete the webhook before
        calling this method to ensure that the bot
        isn't launched again after server restart. The method
        will return error 429 in the first 10
        minutes after the bot is launched. Returns True
        on success. Requires no parameters.

        Reference: https://core.telegram.org/bots/api#close
        """

        response = await self._send_request("close", {})
        return response

    async def send_message(
        self: botapi.BotAPI,
        chat_id: Union[int, str],
        text: str,
        business_connection_id: Optional[str] = None,
        message_thread_id: Optional[int] = None,
        parse_mode: Optional[str] = "HTML",
        entities: Optional[List[MessageEntity]] = None,
        link_preview_options: Optional[LinkPreviewOptions] = None,
        disable_notification: Optional[bool] = None,
        protect_content: Optional[bool] = None,
        allow_paid_broadcast: Optional[bool] = None,
        message_effect_id: Optional[str] = None,
        reply_parameters: Optional[ReplyParameters] = None,
        reply_markup: Optional[Union[InlineKeyboardMarkup, ReplyKeyboardMarkup, ReplyKeyboardRemove, ForceReply]] = None,
    ) -> Optional[Message]:
        """
        Use this method to send text messages. On
        success, the sent Message is returned.

        Reference: https://core.telegram.org/bots/api#sendmessage
        """

        response = await self._send_request("sendMessage", {
            "business_connection_id": business_connection_id,
            "chat_id": chat_id,
            "message_thread_id": message_thread_id,
            "text": text,
            "parse_mode": parse_mode,
            "entities": entities,
            "link_preview_options": link_preview_options,
            "disable_notification": disable_notification,
            "protect_content": protect_content,
            "allow_paid_broadcast": allow_paid_broadcast,
            "message_effect_id": message_effect_id,
            "reply_parameters": reply_parameters,
            "reply_markup": reply_markup,
        })
        return Message.model_validate(response)

    async def forward_message(
        self: botapi.BotAPI,
        chat_id: Union[int, str],
        from_chat_id: Union[int, str],
        message_id: int,
        message_thread_id: Optional[int] = None,
        disable_notification: Optional[bool] = None,
        protect_content: Optional[bool] = None,
    ) -> Optional[Message]:
        """
        Use this method to forward messages of any
        kind. Service messages and messages with protected content
        can't be forwarded. On success, the sent Message
        is returned.

        Reference: https://core.telegram.org/bots/api#forwardmessage
        """

        response = await self._send_request("forwardMessage", {
            "chat_id": chat_id,
            "message_thread_id": message_thread_id,
            "from_chat_id": from_chat_id,
            "disable_notification": disable_notification,
            "protect_content": protect_content,
            "message_id": message_id,
        })
        return Message.model_validate(response)

    async def forward_messages(
        self: botapi.BotAPI,
        chat_id: Union[int, str],
        from_chat_id: Union[int, str],
        message_ids: List[int],
        message_thread_id: Optional[int] = None,
        disable_notification: Optional[bool] = None,
        protect_content: Optional[bool] = None,
    ) -> Optional[List[MessageId]]:
        """
        Use this method to forward multiple messages of
        any kind. If some of the specified messages
        can't be found or forwarded, they are skipped.
        Service messages and messages with protected content can't
        be forwarded. Album grouping is kept for forwarded
        messages. On success, an array of MessageId of
        the sent messages is returned.

        Reference: https://core.telegram.org/bots/api#forwardmessages
        """

        response = await self._send_request("forwardMessages", {
            "chat_id": chat_id,
            "message_thread_id": message_thread_id,
            "from_chat_id": from_chat_id,
            "message_ids": message_ids,
            "disable_notification": disable_notification,
            "protect_content": protect_content,
        })
        return [MessageId.model_validate(x) for x in response]

    async def copy_message(
        self: botapi.BotAPI,
        chat_id: Union[int, str],
        from_chat_id: Union[int, str],
        message_id: int,
        message_thread_id: Optional[int] = None,
        caption: Optional[str] = None,
        parse_mode: Optional[str] = "HTML",
        caption_entities: Optional[List[MessageEntity]] = None,
        show_caption_above_media: Optional[bool] = None,
        disable_notification: Optional[bool] = None,
        protect_content: Optional[bool] = None,
        allow_paid_broadcast: Optional[bool] = None,
        reply_parameters: Optional[ReplyParameters] = None,
        reply_markup: Optional[Union[InlineKeyboardMarkup, ReplyKeyboardMarkup, ReplyKeyboardRemove, ForceReply]] = None,
    ) -> Optional[MessageId]:
        """
        Use this method to copy messages of any
        kind. Service messages, paid media messages, giveaway messages,
        giveaway winners messages, and invoice messages can't be
        copied. A quiz poll can be copied only
        if the value of the field correct_option_id is
        known to the bot. The method is analogous
        to the method forwardMessage, but the copied message
        doesn't have a link to the original message.
        Returns the MessageId of the sent message on
        success.

        Reference: https://core.telegram.org/bots/api#copymessage
        """

        response = await self._send_request("copyMessage", {
            "chat_id": chat_id,
            "message_thread_id": message_thread_id,
            "from_chat_id": from_chat_id,
            "message_id": message_id,
            "caption": caption,
            "parse_mode": parse_mode,
            "caption_entities": caption_entities,
            "show_caption_above_media": show_caption_above_media,
            "disable_notification": disable_notification,
            "protect_content": protect_content,
            "allow_paid_broadcast": allow_paid_broadcast,
            "reply_parameters": reply_parameters,
            "reply_markup": reply_markup,
        })
        return MessageId.model_validate(response)

    async def copy_messages(
        self: botapi.BotAPI,
        chat_id: Union[int, str],
        from_chat_id: Union[int, str],
        message_ids: List[int],
        message_thread_id: Optional[int] = None,
        disable_notification: Optional[bool] = None,
        protect_content: Optional[bool] = None,
        remove_caption: Optional[bool] = None,
    ) -> Optional[List[MessageId]]:
        """
        Use this method to copy messages of any
        kind. If some of the specified messages can't
        be found or copied, they are skipped. Service
        messages, paid media messages, giveaway messages, giveaway winners
        messages, and invoice messages can't be copied. A
        quiz poll can be copied only if the
        value of the field correct_option_id is known to
        the bot. The method is analogous to the
        method forwardMessages, but the copied messages don't have
        a link to the original message. Album grouping
        is kept for copied messages. On success, an
        array of MessageId of the sent messages is
        returned.

        Reference: https://core.telegram.org/bots/api#copymessages
        """

        response = await self._send_request("copyMessages", {
            "chat_id": chat_id,
            "message_thread_id": message_thread_id,
            "from_chat_id": from_chat_id,
            "message_ids": message_ids,
            "disable_notification": disable_notification,
            "protect_content": protect_content,
            "remove_caption": remove_caption,
        })
        return [MessageId.model_validate(x) for x in response]

    async def send_photo(
        self: botapi.BotAPI,
        chat_id: Union[int, str],
        photo: Union[InputFile, str],
        business_connection_id: Optional[str] = None,
        message_thread_id: Optional[int] = None,
        caption: Optional[str] = None,
        parse_mode: Optional[str] = "HTML",
        caption_entities: Optional[List[MessageEntity]] = None,
        show_caption_above_media: Optional[bool] = None,
        has_spoiler: Optional[bool] = None,
        disable_notification: Optional[bool] = None,
        protect_content: Optional[bool] = None,
        allow_paid_broadcast: Optional[bool] = None,
        message_effect_id: Optional[str] = None,
        reply_parameters: Optional[ReplyParameters] = None,
        reply_markup: Optional[Union[InlineKeyboardMarkup, ReplyKeyboardMarkup, ReplyKeyboardRemove, ForceReply]] = None,
    ) -> Optional[Message]:
        """
        Use this method to send photos. On success,
        the sent Message is returned.

        Reference: https://core.telegram.org/bots/api#sendphoto
        """

        response = await self._send_request("sendPhoto", {
            "business_connection_id": business_connection_id,
            "chat_id": chat_id,
            "message_thread_id": message_thread_id,
            "photo": photo,
            "caption": caption,
            "parse_mode": parse_mode,
            "caption_entities": caption_entities,
            "show_caption_above_media": show_caption_above_media,
            "has_spoiler": has_spoiler,
            "disable_notification": disable_notification,
            "protect_content": protect_content,
            "allow_paid_broadcast": allow_paid_broadcast,
            "message_effect_id": message_effect_id,
            "reply_parameters": reply_parameters,
            "reply_markup": reply_markup,
        })
        return Message.model_validate(response)

    async def send_audio(
        self: botapi.BotAPI,
        chat_id: Union[int, str],
        audio: Union[InputFile, str],
        business_connection_id: Optional[str] = None,
        message_thread_id: Optional[int] = None,
        caption: Optional[str] = None,
        parse_mode: Optional[str] = "HTML",
        caption_entities: Optional[List[MessageEntity]] = None,
        duration: Optional[int] = None,
        performer: Optional[str] = None,
        title: Optional[str] = None,
        thumbnail: Optional[Union[InputFile, str]] = None,
        disable_notification: Optional[bool] = None,
        protect_content: Optional[bool] = None,
        allow_paid_broadcast: Optional[bool] = None,
        message_effect_id: Optional[str] = None,
        reply_parameters: Optional[ReplyParameters] = None,
        reply_markup: Optional[Union[InlineKeyboardMarkup, ReplyKeyboardMarkup, ReplyKeyboardRemove, ForceReply]] = None,
    ) -> Optional[Message]:
        """
        Use this method to send audio files, if
        you want Telegram clients to display them in
        the music player. Your audio must be in
        the .MP3 or .M4A format. On success, the
        sent Message is returned. Bots can currently send
        audio files of up to 50 MB in
        size, this limit may be changed in the
        future.

        Reference: https://core.telegram.org/bots/api#sendaudio
        """

        response = await self._send_request("sendAudio", {
            "business_connection_id": business_connection_id,
            "chat_id": chat_id,
            "message_thread_id": message_thread_id,
            "audio": audio,
            "caption": caption,
            "parse_mode": parse_mode,
            "caption_entities": caption_entities,
            "duration": duration,
            "performer": performer,
            "title": title,
            "thumbnail": thumbnail,
            "disable_notification": disable_notification,
            "protect_content": protect_content,
            "allow_paid_broadcast": allow_paid_broadcast,
            "message_effect_id": message_effect_id,
            "reply_parameters": reply_parameters,
            "reply_markup": reply_markup,
        })
        return Message.model_validate(response)

    async def send_document(
        self: botapi.BotAPI,
        chat_id: Union[int, str],
        document: Union[InputFile, str],
        business_connection_id: Optional[str] = None,
        message_thread_id: Optional[int] = None,
        thumbnail: Optional[Union[InputFile, str]] = None,
        caption: Optional[str] = None,
        parse_mode: Optional[str] = "HTML",
        caption_entities: Optional[List[MessageEntity]] = None,
        disable_content_type_detection: Optional[bool] = None,
        disable_notification: Optional[bool] = None,
        protect_content: Optional[bool] = None,
        allow_paid_broadcast: Optional[bool] = None,
        message_effect_id: Optional[str] = None,
        reply_parameters: Optional[ReplyParameters] = None,
        reply_markup: Optional[Union[InlineKeyboardMarkup, ReplyKeyboardMarkup, ReplyKeyboardRemove, ForceReply]] = None,
    ) -> Optional[Message]:
        """
        Use this method to send general files. On
        success, the sent Message is returned. Bots can
        currently send files of any type of up
        to 50 MB in size, this limit may
        be changed in the future.

        Reference: https://core.telegram.org/bots/api#senddocument
        """

        response = await self._send_request("sendDocument", {
            "business_connection_id": business_connection_id,
            "chat_id": chat_id,
            "message_thread_id": message_thread_id,
            "document": document,
            "thumbnail": thumbnail,
            "caption": caption,
            "parse_mode": parse_mode,
            "caption_entities": caption_entities,
            "disable_content_type_detection": disable_content_type_detection,
            "disable_notification": disable_notification,
            "protect_content": protect_content,
            "allow_paid_broadcast": allow_paid_broadcast,
            "message_effect_id": message_effect_id,
            "reply_parameters": reply_parameters,
            "reply_markup": reply_markup,
        })
        return Message.model_validate(response)

    async def send_video(
        self: botapi.BotAPI,
        chat_id: Union[int, str],
        video: Union[InputFile, str],
        business_connection_id: Optional[str] = None,
        message_thread_id: Optional[int] = None,
        duration: Optional[int] = None,
        width: Optional[int] = None,
        height: Optional[int] = None,
        thumbnail: Optional[Union[InputFile, str]] = None,
        caption: Optional[str] = None,
        parse_mode: Optional[str] = "HTML",
        caption_entities: Optional[List[MessageEntity]] = None,
        show_caption_above_media: Optional[bool] = None,
        has_spoiler: Optional[bool] = None,
        supports_streaming: Optional[bool] = None,
        disable_notification: Optional[bool] = None,
        protect_content: Optional[bool] = None,
        allow_paid_broadcast: Optional[bool] = None,
        message_effect_id: Optional[str] = None,
        reply_parameters: Optional[ReplyParameters] = None,
        reply_markup: Optional[Union[InlineKeyboardMarkup, ReplyKeyboardMarkup, ReplyKeyboardRemove, ForceReply]] = None,
    ) -> Optional[Message]:
        """
        Use this method to send video files, Telegram
        clients support MPEG4 videos (other formats may be
        sent as Document). On success, the sent Message
        is returned. Bots can currently send video files
        of up to 50 MB in size, this
        limit may be changed in the future.

        Reference: https://core.telegram.org/bots/api#sendvideo
        """

        response = await self._send_request("sendVideo", {
            "business_connection_id": business_connection_id,
            "chat_id": chat_id,
            "message_thread_id": message_thread_id,
            "video": video,
            "duration": duration,
            "width": width,
            "height": height,
            "thumbnail": thumbnail,
            "caption": caption,
            "parse_mode": parse_mode,
            "caption_entities": caption_entities,
            "show_caption_above_media": show_caption_above_media,
            "has_spoiler": has_spoiler,
            "supports_streaming": supports_streaming,
            "disable_notification": disable_notification,
            "protect_content": protect_content,
            "allow_paid_broadcast": allow_paid_broadcast,
            "message_effect_id": message_effect_id,
            "reply_parameters": reply_parameters,
            "reply_markup": reply_markup,
        })
        return Message.model_validate(response)

    async def send_animation(
        self: botapi.BotAPI,
        chat_id: Union[int, str],
        animation: Union[InputFile, str],
        business_connection_id: Optional[str] = None,
        message_thread_id: Optional[int] = None,
        duration: Optional[int] = None,
        width: Optional[int] = None,
        height: Optional[int] = None,
        thumbnail: Optional[Union[InputFile, str]] = None,
        caption: Optional[str] = None,
        parse_mode: Optional[str] = "HTML",
        caption_entities: Optional[List[MessageEntity]] = None,
        show_caption_above_media: Optional[bool] = None,
        has_spoiler: Optional[bool] = None,
        disable_notification: Optional[bool] = None,
        protect_content: Optional[bool] = None,
        allow_paid_broadcast: Optional[bool] = None,
        message_effect_id: Optional[str] = None,
        reply_parameters: Optional[ReplyParameters] = None,
        reply_markup: Optional[Union[InlineKeyboardMarkup, ReplyKeyboardMarkup, ReplyKeyboardRemove, ForceReply]] = None,
    ) -> Optional[Message]:
        """
        Use this method to send animation files (GIF
        or H.264/MPEG-4 AVC video without sound). On success,
        the sent Message is returned. Bots can currently
        send animation files of up to 50 MB
        in size, this limit may be changed in
        the future.

        Reference: https://core.telegram.org/bots/api#sendanimation
        """

        response = await self._send_request("sendAnimation", {
            "business_connection_id": business_connection_id,
            "chat_id": chat_id,
            "message_thread_id": message_thread_id,
            "animation": animation,
            "duration": duration,
            "width": width,
            "height": height,
            "thumbnail": thumbnail,
            "caption": caption,
            "parse_mode": parse_mode,
            "caption_entities": caption_entities,
            "show_caption_above_media": show_caption_above_media,
            "has_spoiler": has_spoiler,
            "disable_notification": disable_notification,
            "protect_content": protect_content,
            "allow_paid_broadcast": allow_paid_broadcast,
            "message_effect_id": message_effect_id,
            "reply_parameters": reply_parameters,
            "reply_markup": reply_markup,
        })
        return Message.model_validate(response)

    async def send_voice(
        self: botapi.BotAPI,
        chat_id: Union[int, str],
        voice: Union[InputFile, str],
        business_connection_id: Optional[str] = None,
        message_thread_id: Optional[int] = None,
        caption: Optional[str] = None,
        parse_mode: Optional[str] = "HTML",
        caption_entities: Optional[List[MessageEntity]] = None,
        duration: Optional[int] = None,
        disable_notification: Optional[bool] = None,
        protect_content: Optional[bool] = None,
        allow_paid_broadcast: Optional[bool] = None,
        message_effect_id: Optional[str] = None,
        reply_parameters: Optional[ReplyParameters] = None,
        reply_markup: Optional[Union[InlineKeyboardMarkup, ReplyKeyboardMarkup, ReplyKeyboardRemove, ForceReply]] = None,
    ) -> Optional[Message]:
        """
        Use this method to send audio files, if
        you want Telegram clients to display the file
        as a playable voice message. For this to
        work, your audio must be in an .OGG
        file encoded with OPUS, or in .MP3 format,
        or in .M4A format (other formats may be
        sent as Audio or Document). On success, the
        sent Message is returned. Bots can currently send
        voice messages of up to 50 MB in
        size, this limit may be changed in the
        future.

        Reference: https://core.telegram.org/bots/api#sendvoice
        """

        response = await self._send_request("sendVoice", {
            "business_connection_id": business_connection_id,
            "chat_id": chat_id,
            "message_thread_id": message_thread_id,
            "voice": voice,
            "caption": caption,
            "parse_mode": parse_mode,
            "caption_entities": caption_entities,
            "duration": duration,
            "disable_notification": disable_notification,
            "protect_content": protect_content,
            "allow_paid_broadcast": allow_paid_broadcast,
            "message_effect_id": message_effect_id,
            "reply_parameters": reply_parameters,
            "reply_markup": reply_markup,
        })
        return Message.model_validate(response)

    async def send_video_note(
        self: botapi.BotAPI,
        chat_id: Union[int, str],
        video_note: Union[InputFile, str],
        business_connection_id: Optional[str] = None,
        message_thread_id: Optional[int] = None,
        duration: Optional[int] = None,
        length: Optional[int] = None,
        thumbnail: Optional[Union[InputFile, str]] = None,
        disable_notification: Optional[bool] = None,
        protect_content: Optional[bool] = None,
        allow_paid_broadcast: Optional[bool] = None,
        message_effect_id: Optional[str] = None,
        reply_parameters: Optional[ReplyParameters] = None,
        reply_markup: Optional[Union[InlineKeyboardMarkup, ReplyKeyboardMarkup, ReplyKeyboardRemove, ForceReply]] = None,
    ) -> Optional[Message]:
        """
        As of v.4.0, Telegram clients support rounded square
        MPEG4 videos of up to 1 minute long.
        Use this method to send video messages. On
        success, the sent Message is returned.

        Reference: https://core.telegram.org/bots/api#sendvideonote
        """

        response = await self._send_request("sendVideoNote", {
            "business_connection_id": business_connection_id,
            "chat_id": chat_id,
            "message_thread_id": message_thread_id,
            "video_note": video_note,
            "duration": duration,
            "length": length,
            "thumbnail": thumbnail,
            "disable_notification": disable_notification,
            "protect_content": protect_content,
            "allow_paid_broadcast": allow_paid_broadcast,
            "message_effect_id": message_effect_id,
            "reply_parameters": reply_parameters,
            "reply_markup": reply_markup,
        })
        return Message.model_validate(response)

    async def send_paid_media(
        self: botapi.BotAPI,
        chat_id: Union[int, str],
        star_count: int,
        media: List[InputPaidMedia],
        business_connection_id: Optional[str] = None,
        payload: Optional[str] = None,
        caption: Optional[str] = None,
        parse_mode: Optional[str] = "HTML",
        caption_entities: Optional[List[MessageEntity]] = None,
        show_caption_above_media: Optional[bool] = None,
        disable_notification: Optional[bool] = None,
        protect_content: Optional[bool] = None,
        allow_paid_broadcast: Optional[bool] = None,
        reply_parameters: Optional[ReplyParameters] = None,
        reply_markup: Optional[Union[InlineKeyboardMarkup, ReplyKeyboardMarkup, ReplyKeyboardRemove, ForceReply]] = None,
    ) -> Optional[Message]:
        """
        Use this method to send paid media. On
        success, the sent Message is returned.

        Reference: https://core.telegram.org/bots/api#sendpaidmedia
        """

        response = await self._send_request("sendPaidMedia", {
            "business_connection_id": business_connection_id,
            "chat_id": chat_id,
            "star_count": star_count,
            "media": media,
            "payload": payload,
            "caption": caption,
            "parse_mode": parse_mode,
            "caption_entities": caption_entities,
            "show_caption_above_media": show_caption_above_media,
            "disable_notification": disable_notification,
            "protect_content": protect_content,
            "allow_paid_broadcast": allow_paid_broadcast,
            "reply_parameters": reply_parameters,
            "reply_markup": reply_markup,
        })
        return Message.model_validate(response)

    async def send_media_group(
        self: botapi.BotAPI,
        chat_id: Union[int, str],
        media: List[Union[InputMediaAudio, InputMediaDocument, InputMediaPhoto, InputMediaVideo]],
        business_connection_id: Optional[str] = None,
        message_thread_id: Optional[int] = None,
        disable_notification: Optional[bool] = None,
        protect_content: Optional[bool] = None,
        allow_paid_broadcast: Optional[bool] = None,
        message_effect_id: Optional[str] = None,
        reply_parameters: Optional[ReplyParameters] = None,
    ) -> Optional[List[Message]]:
        """
        Use this method to send a group of
        photos, videos, documents or audios as an album.
        Documents and audio files can be only grouped
        in an album with messages of the same
        type. On success, an array of Messages that
        were sent is returned.

        Reference: https://core.telegram.org/bots/api#sendmediagroup
        """

        response = await self._send_request("sendMediaGroup", {
            "business_connection_id": business_connection_id,
            "chat_id": chat_id,
            "message_thread_id": message_thread_id,
            "media": media,
            "disable_notification": disable_notification,
            "protect_content": protect_content,
            "allow_paid_broadcast": allow_paid_broadcast,
            "message_effect_id": message_effect_id,
            "reply_parameters": reply_parameters,
        })
        return [Message.model_validate(x) for x in response]

    async def send_location(
        self: botapi.BotAPI,
        chat_id: Union[int, str],
        latitude: float,
        longitude: float,
        business_connection_id: Optional[str] = None,
        message_thread_id: Optional[int] = None,
        horizontal_accuracy: Optional[float] = None,
        live_period: Optional[int] = None,
        heading: Optional[int] = None,
        proximity_alert_radius: Optional[int] = None,
        disable_notification: Optional[bool] = None,
        protect_content: Optional[bool] = None,
        allow_paid_broadcast: Optional[bool] = None,
        message_effect_id: Optional[str] = None,
        reply_parameters: Optional[ReplyParameters] = None,
        reply_markup: Optional[Union[InlineKeyboardMarkup, ReplyKeyboardMarkup, ReplyKeyboardRemove, ForceReply]] = None,
    ) -> Optional[Message]:
        """
        Use this method to send point on the
        map. On success, the sent Message is returned.

        Reference: https://core.telegram.org/bots/api#sendlocation
        """

        response = await self._send_request("sendLocation", {
            "business_connection_id": business_connection_id,
            "chat_id": chat_id,
            "message_thread_id": message_thread_id,
            "latitude": latitude,
            "longitude": longitude,
            "horizontal_accuracy": horizontal_accuracy,
            "live_period": live_period,
            "heading": heading,
            "proximity_alert_radius": proximity_alert_radius,
            "disable_notification": disable_notification,
            "protect_content": protect_content,
            "allow_paid_broadcast": allow_paid_broadcast,
            "message_effect_id": message_effect_id,
            "reply_parameters": reply_parameters,
            "reply_markup": reply_markup,
        })
        return Message.model_validate(response)

    async def send_venue(
        self: botapi.BotAPI,
        chat_id: Union[int, str],
        latitude: float,
        longitude: float,
        title: str,
        address: str,
        business_connection_id: Optional[str] = None,
        message_thread_id: Optional[int] = None,
        foursquare_id: Optional[str] = None,
        foursquare_type: Optional[str] = None,
        google_place_id: Optional[str] = None,
        google_place_type: Optional[str] = None,
        disable_notification: Optional[bool] = None,
        protect_content: Optional[bool] = None,
        allow_paid_broadcast: Optional[bool] = None,
        message_effect_id: Optional[str] = None,
        reply_parameters: Optional[ReplyParameters] = None,
        reply_markup: Optional[Union[InlineKeyboardMarkup, ReplyKeyboardMarkup, ReplyKeyboardRemove, ForceReply]] = None,
    ) -> Optional[Message]:
        """
        Use this method to send information about a
        venue. On success, the sent Message is returned.

        Reference: https://core.telegram.org/bots/api#sendvenue
        """

        response = await self._send_request("sendVenue", {
            "business_connection_id": business_connection_id,
            "chat_id": chat_id,
            "message_thread_id": message_thread_id,
            "latitude": latitude,
            "longitude": longitude,
            "title": title,
            "address": address,
            "foursquare_id": foursquare_id,
            "foursquare_type": foursquare_type,
            "google_place_id": google_place_id,
            "google_place_type": google_place_type,
            "disable_notification": disable_notification,
            "protect_content": protect_content,
            "allow_paid_broadcast": allow_paid_broadcast,
            "message_effect_id": message_effect_id,
            "reply_parameters": reply_parameters,
            "reply_markup": reply_markup,
        })
        return Message.model_validate(response)

    async def send_contact(
        self: botapi.BotAPI,
        chat_id: Union[int, str],
        phone_number: str,
        first_name: str,
        business_connection_id: Optional[str] = None,
        message_thread_id: Optional[int] = None,
        last_name: Optional[str] = None,
        vcard: Optional[str] = None,
        disable_notification: Optional[bool] = None,
        protect_content: Optional[bool] = None,
        allow_paid_broadcast: Optional[bool] = None,
        message_effect_id: Optional[str] = None,
        reply_parameters: Optional[ReplyParameters] = None,
        reply_markup: Optional[Union[InlineKeyboardMarkup, ReplyKeyboardMarkup, ReplyKeyboardRemove, ForceReply]] = None,
    ) -> Optional[Message]:
        """
        Use this method to send phone contacts. On
        success, the sent Message is returned.

        Reference: https://core.telegram.org/bots/api#sendcontact
        """

        response = await self._send_request("sendContact", {
            "business_connection_id": business_connection_id,
            "chat_id": chat_id,
            "message_thread_id": message_thread_id,
            "phone_number": phone_number,
            "first_name": first_name,
            "last_name": last_name,
            "vcard": vcard,
            "disable_notification": disable_notification,
            "protect_content": protect_content,
            "allow_paid_broadcast": allow_paid_broadcast,
            "message_effect_id": message_effect_id,
            "reply_parameters": reply_parameters,
            "reply_markup": reply_markup,
        })
        return Message.model_validate(response)

    async def send_poll(
        self: botapi.BotAPI,
        chat_id: Union[int, str],
        question: str,
        options: List[InputPollOption],
        business_connection_id: Optional[str] = None,
        message_thread_id: Optional[int] = None,
        question_parse_mode: Optional[str] = None,
        question_entities: Optional[List[MessageEntity]] = None,
        is_anonymous: Optional[bool] = None,
        type: Optional[str] = None,
        allows_multiple_answers: Optional[bool] = None,
        correct_option_id: Optional[int] = None,
        explanation: Optional[str] = None,
        explanation_parse_mode: Optional[str] = None,
        explanation_entities: Optional[List[MessageEntity]] = None,
        open_period: Optional[int] = None,
        close_date: Optional[int] = None,
        is_closed: Optional[bool] = None,
        disable_notification: Optional[bool] = None,
        protect_content: Optional[bool] = None,
        allow_paid_broadcast: Optional[bool] = None,
        message_effect_id: Optional[str] = None,
        reply_parameters: Optional[ReplyParameters] = None,
        reply_markup: Optional[Union[InlineKeyboardMarkup, ReplyKeyboardMarkup, ReplyKeyboardRemove, ForceReply]] = None,
    ) -> Optional[Message]:
        """
        Use this method to send a native poll.
        On success, the sent Message is returned.

        Reference: https://core.telegram.org/bots/api#sendpoll
        """

        response = await self._send_request("sendPoll", {
            "business_connection_id": business_connection_id,
            "chat_id": chat_id,
            "message_thread_id": message_thread_id,
            "question": question,
            "question_parse_mode": question_parse_mode,
            "question_entities": question_entities,
            "options": options,
            "is_anonymous": is_anonymous,
            "type": type,
            "allows_multiple_answers": allows_multiple_answers,
            "correct_option_id": correct_option_id,
            "explanation": explanation,
            "explanation_parse_mode": explanation_parse_mode,
            "explanation_entities": explanation_entities,
            "open_period": open_period,
            "close_date": close_date,
            "is_closed": is_closed,
            "disable_notification": disable_notification,
            "protect_content": protect_content,
            "allow_paid_broadcast": allow_paid_broadcast,
            "message_effect_id": message_effect_id,
            "reply_parameters": reply_parameters,
            "reply_markup": reply_markup,
        })
        return Message.model_validate(response)

    async def send_dice(
        self: botapi.BotAPI,
        chat_id: Union[int, str],
        business_connection_id: Optional[str] = None,
        message_thread_id: Optional[int] = None,
        emoji: Optional[str] = None,
        disable_notification: Optional[bool] = None,
        protect_content: Optional[bool] = None,
        allow_paid_broadcast: Optional[bool] = None,
        message_effect_id: Optional[str] = None,
        reply_parameters: Optional[ReplyParameters] = None,
        reply_markup: Optional[Union[InlineKeyboardMarkup, ReplyKeyboardMarkup, ReplyKeyboardRemove, ForceReply]] = None,
    ) -> Optional[Message]:
        """
        Use this method to send an animated emoji
        that will display a random value. On success,
        the sent Message is returned.

        Reference: https://core.telegram.org/bots/api#senddice
        """

        response = await self._send_request("sendDice", {
            "business_connection_id": business_connection_id,
            "chat_id": chat_id,
            "message_thread_id": message_thread_id,
            "emoji": emoji,
            "disable_notification": disable_notification,
            "protect_content": protect_content,
            "allow_paid_broadcast": allow_paid_broadcast,
            "message_effect_id": message_effect_id,
            "reply_parameters": reply_parameters,
            "reply_markup": reply_markup,
        })
        return Message.model_validate(response)

    async def send_chat_action(
        self: botapi.BotAPI,
        chat_id: Union[int, str],
        action: str,
        business_connection_id: Optional[str] = None,
        message_thread_id: Optional[int] = None,
    ) -> Optional[bool]:
        """
        Use this method when you need to tell
        the user that something is happening on the
        bot's side. The status is set for 5
        seconds or less (when a message arrives from
        your bot, Telegram clients clear its typing status).
        Returns True on success.

        Reference: https://core.telegram.org/bots/api#sendchataction
        """

        response = await self._send_request("sendChatAction", {
            "business_connection_id": business_connection_id,
            "chat_id": chat_id,
            "message_thread_id": message_thread_id,
            "action": action,
        })
        return response

    async def set_message_reaction(
        self: botapi.BotAPI,
        chat_id: Union[int, str],
        message_id: int,
        reaction: Optional[List[ReactionType]] = None,
        is_big: Optional[bool] = None,
    ) -> Optional[bool]:
        """
        Use this method to change the chosen reactions
        on a message. Service messages can't be reacted
        to. Automatically forwarded messages from a channel to
        its discussion group have the same available reactions
        as messages in the channel. Bots can't use
        paid reactions. Returns True on success.

        Reference: https://core.telegram.org/bots/api#setmessagereaction
        """

        response = await self._send_request("setMessageReaction", {
            "chat_id": chat_id,
            "message_id": message_id,
            "reaction": reaction,
            "is_big": is_big,
        })
        return response

    async def get_user_profile_photos(
        self: botapi.BotAPI,
        user_id: int,
        offset: Optional[int] = None,
        limit: Optional[int] = None,
    ) -> Optional[UserProfilePhotos]:
        """
        Use this method to get a list of
        profile pictures for a user. Returns a UserProfilePhotos
        object.

        Reference: https://core.telegram.org/bots/api#getuserprofilephotos
        """

        response = await self._send_request("getUserProfilePhotos", {
            "user_id": user_id,
            "offset": offset,
            "limit": limit,
        })
        return UserProfilePhotos.model_validate(response)

    async def set_user_emoji_status(
        self: botapi.BotAPI,
        user_id: int,
        emoji_status_custom_emoji_id: Optional[str] = None,
        emoji_status_expiration_date: Optional[int] = None,
    ) -> Optional[bool]:
        """
        Changes the emoji status for a given user
        that previously allowed the bot to manage their
        emoji status via the Mini App method requestEmojiStatusAccess.
        Returns True on success.

        Reference: https://core.telegram.org/bots/api#setuseremojistatus
        """

        response = await self._send_request("setUserEmojiStatus", {
            "user_id": user_id,
            "emoji_status_custom_emoji_id": emoji_status_custom_emoji_id,
            "emoji_status_expiration_date": emoji_status_expiration_date,
        })
        return response

    async def get_file(
        self: botapi.BotAPI,
        file_id: str,
    ) -> Optional[File]:
        """
        Use this method to get basic information about
        a file and prepare it for downloading. For
        the moment, bots can download files of up
        to 20MB in size. On success, a File
        object is returned. The file can then be
        downloaded via the link https://api.telegram.org/file/bot<token>/<file_path>, where <file_path> is
        taken from the response. It is guaranteed that
        the link will be valid for at least
        1 hour. When the link expires, a new
        one can be requested by calling getFile again.

        Reference: https://core.telegram.org/bots/api#getfile
        """

        response = await self._send_request("getFile", {
            "file_id": file_id,
        })
        return File.model_validate(response)

    async def ban_chat_member(
        self: botapi.BotAPI,
        chat_id: Union[int, str],
        user_id: int,
        until_date: Optional[int] = None,
        revoke_messages: Optional[bool] = None,
    ) -> Optional[bool]:
        """
        Use this method to ban a user in
        a group, a supergroup or a channel. In
        the case of supergroups and channels, the user
        will not be able to return to the
        chat on their own using invite links, etc.,
        unless unbanned first. The bot must be an
        administrator in the chat for this to work
        and must have the appropriate administrator rights. Returns
        True on success.

        Reference: https://core.telegram.org/bots/api#banchatmember
        """

        response = await self._send_request("banChatMember", {
            "chat_id": chat_id,
            "user_id": user_id,
            "until_date": until_date,
            "revoke_messages": revoke_messages,
        })
        return response

    async def unban_chat_member(
        self: botapi.BotAPI,
        chat_id: Union[int, str],
        user_id: int,
        only_if_banned: Optional[bool] = None,
    ) -> Optional[bool]:
        """
        Use this method to unban a previously banned
        user in a supergroup or channel. The user
        will not return to the group or channel
        automatically, but will be able to join via
        link, etc. The bot must be an administrator
        for this to work. By default, this method
        guarantees that after the call the user is
        not a member of the chat, but will
        be able to join it. So if the
        user is a member of the chat they
        will also be removed from the chat. If
        you don't want this, use the parameter only_if_banned.
        Returns True on success.

        Reference: https://core.telegram.org/bots/api#unbanchatmember
        """

        response = await self._send_request("unbanChatMember", {
            "chat_id": chat_id,
            "user_id": user_id,
            "only_if_banned": only_if_banned,
        })
        return response

    async def restrict_chat_member(
        self: botapi.BotAPI,
        chat_id: Union[int, str],
        user_id: int,
        permissions: ChatPermissions,
        use_independent_chat_permissions: Optional[bool] = None,
        until_date: Optional[int] = None,
    ) -> Optional[bool]:
        """
        Use this method to restrict a user in
        a supergroup. The bot must be an administrator
        in the supergroup for this to work and
        must have the appropriate administrator rights. Pass True
        for all permissions to lift restrictions from a
        user. Returns True on success.

        Reference: https://core.telegram.org/bots/api#restrictchatmember
        """

        response = await self._send_request("restrictChatMember", {
            "chat_id": chat_id,
            "user_id": user_id,
            "permissions": permissions,
            "use_independent_chat_permissions": use_independent_chat_permissions,
            "until_date": until_date,
        })
        return response

    async def promote_chat_member(
        self: botapi.BotAPI,
        chat_id: Union[int, str],
        user_id: int,
        is_anonymous: Optional[bool] = None,
        can_manage_chat: Optional[bool] = None,
        can_delete_messages: Optional[bool] = None,
        can_manage_video_chats: Optional[bool] = None,
        can_restrict_members: Optional[bool] = None,
        can_promote_members: Optional[bool] = None,
        can_change_info: Optional[bool] = None,
        can_invite_users: Optional[bool] = None,
        can_post_stories: Optional[bool] = None,
        can_edit_stories: Optional[bool] = None,
        can_delete_stories: Optional[bool] = None,
        can_post_messages: Optional[bool] = None,
        can_edit_messages: Optional[bool] = None,
        can_pin_messages: Optional[bool] = None,
        can_manage_topics: Optional[bool] = None,
    ) -> Optional[bool]:
        """
        Use this method to promote or demote a
        user in a supergroup or a channel. The
        bot must be an administrator in the chat
        for this to work and must have the
        appropriate administrator rights. Pass False for all boolean
        parameters to demote a user. Returns True on
        success.

        Reference: https://core.telegram.org/bots/api#promotechatmember
        """

        response = await self._send_request("promoteChatMember", {
            "chat_id": chat_id,
            "user_id": user_id,
            "is_anonymous": is_anonymous,
            "can_manage_chat": can_manage_chat,
            "can_delete_messages": can_delete_messages,
            "can_manage_video_chats": can_manage_video_chats,
            "can_restrict_members": can_restrict_members,
            "can_promote_members": can_promote_members,
            "can_change_info": can_change_info,
            "can_invite_users": can_invite_users,
            "can_post_stories": can_post_stories,
            "can_edit_stories": can_edit_stories,
            "can_delete_stories": can_delete_stories,
            "can_post_messages": can_post_messages,
            "can_edit_messages": can_edit_messages,
            "can_pin_messages": can_pin_messages,
            "can_manage_topics": can_manage_topics,
        })
        return response

    async def set_chat_administrator_custom_title(
        self: botapi.BotAPI,
        chat_id: Union[int, str],
        user_id: int,
        custom_title: str,
    ) -> Optional[bool]:
        """
        Use this method to set a custom title
        for an administrator in a supergroup promoted by
        the bot. Returns True on success.

        Reference: https://core.telegram.org/bots/api#setchatadministratorcustomtitle
        """

        response = await self._send_request("setChatAdministratorCustomTitle", {
            "chat_id": chat_id,
            "user_id": user_id,
            "custom_title": custom_title,
        })
        return response

    async def ban_chat_sender_chat(
        self: botapi.BotAPI,
        chat_id: Union[int, str],
        sender_chat_id: int,
    ) -> Optional[bool]:
        """
        Use this method to ban a channel chat
        in a supergroup or a channel. Until the
        chat is unbanned, the owner of the banned
        chat won't be able to send messages on
        behalf of any of their channels. The bot
        must be an administrator in the supergroup or
        channel for this to work and must have
        the appropriate administrator rights. Returns True on success.

        Reference: https://core.telegram.org/bots/api#banchatsenderchat
        """

        response = await self._send_request("banChatSenderChat", {
            "chat_id": chat_id,
            "sender_chat_id": sender_chat_id,
        })
        return response

    async def unban_chat_sender_chat(
        self: botapi.BotAPI,
        chat_id: Union[int, str],
        sender_chat_id: int,
    ) -> Optional[bool]:
        """
        Use this method to unban a previously banned
        channel chat in a supergroup or channel. The
        bot must be an administrator for this to
        work and must have the appropriate administrator rights.
        Returns True on success.

        Reference: https://core.telegram.org/bots/api#unbanchatsenderchat
        """

        response = await self._send_request("unbanChatSenderChat", {
            "chat_id": chat_id,
            "sender_chat_id": sender_chat_id,
        })
        return response

    async def set_chat_permissions(
        self: botapi.BotAPI,
        chat_id: Union[int, str],
        permissions: ChatPermissions,
        use_independent_chat_permissions: Optional[bool] = None,
    ) -> Optional[bool]:
        """
        Use this method to set default chat permissions
        for all members. The bot must be an
        administrator in the group or a supergroup for
        this to work and must have the can_restrict_members
        administrator rights. Returns True on success.

        Reference: https://core.telegram.org/bots/api#setchatpermissions
        """

        response = await self._send_request("setChatPermissions", {
            "chat_id": chat_id,
            "permissions": permissions,
            "use_independent_chat_permissions": use_independent_chat_permissions,
        })
        return response

    async def export_chat_invite_link(
        self: botapi.BotAPI,
        chat_id: Union[int, str],
    ) -> Optional[str]:
        """
        Use this method to generate a new primary
        invite link for a chat; any previously generated
        primary link is revoked. The bot must be
        an administrator in the chat for this to
        work and must have the appropriate administrator rights.
        Returns the new invite link as String on
        success.

        Reference: https://core.telegram.org/bots/api#exportchatinvitelink
        """

        response = await self._send_request("exportChatInviteLink", {
            "chat_id": chat_id,
        })
        return response

    async def create_chat_invite_link(
        self: botapi.BotAPI,
        chat_id: Union[int, str],
        name: Optional[str] = None,
        expire_date: Optional[int] = None,
        member_limit: Optional[int] = None,
        creates_join_request: Optional[bool] = None,
    ) -> Optional[ChatInviteLink]:
        """
        Use this method to create an additional invite
        link for a chat. The bot must be
        an administrator in the chat for this to
        work and must have the appropriate administrator rights.
        The link can be revoked using the method
        revokeChatInviteLink. Returns the new invite link as ChatInviteLink
        object.

        Reference: https://core.telegram.org/bots/api#createchatinvitelink
        """

        response = await self._send_request("createChatInviteLink", {
            "chat_id": chat_id,
            "name": name,
            "expire_date": expire_date,
            "member_limit": member_limit,
            "creates_join_request": creates_join_request,
        })
        return ChatInviteLink.model_validate(response)

    async def edit_chat_invite_link(
        self: botapi.BotAPI,
        chat_id: Union[int, str],
        invite_link: str,
        name: Optional[str] = None,
        expire_date: Optional[int] = None,
        member_limit: Optional[int] = None,
        creates_join_request: Optional[bool] = None,
    ) -> Optional[ChatInviteLink]:
        """
        Use this method to edit a non-primary invite
        link created by the bot. The bot must
        be an administrator in the chat for this
        to work and must have the appropriate administrator
        rights. Returns the edited invite link as a
        ChatInviteLink object.

        Reference: https://core.telegram.org/bots/api#editchatinvitelink
        """

        response = await self._send_request("editChatInviteLink", {
            "chat_id": chat_id,
            "invite_link": invite_link,
            "name": name,
            "expire_date": expire_date,
            "member_limit": member_limit,
            "creates_join_request": creates_join_request,
        })
        return ChatInviteLink.model_validate(response)

    async def create_chat_subscription_invite_link(
        self: botapi.BotAPI,
        chat_id: Union[int, str],
        subscription_period: int,
        subscription_price: int,
        name: Optional[str] = None,
    ) -> Optional[ChatInviteLink]:
        """
        Use this method to create a subscription invite
        link for a channel chat. The bot must
        have the can_invite_users administrator rights. The link can
        be edited using the method editChatSubscriptionInviteLink or revoked
        using the method revokeChatInviteLink. Returns the new invite
        link as a ChatInviteLink object.

        Reference: https://core.telegram.org/bots/api#createchatsubscriptioninvitelink
        """

        response = await self._send_request("createChatSubscriptionInviteLink", {
            "chat_id": chat_id,
            "name": name,
            "subscription_period": subscription_period,
            "subscription_price": subscription_price,
        })
        return ChatInviteLink.model_validate(response)

    async def edit_chat_subscription_invite_link(
        self: botapi.BotAPI,
        chat_id: Union[int, str],
        invite_link: str,
        name: Optional[str] = None,
    ) -> Optional[ChatInviteLink]:
        """
        Use this method to edit a subscription invite
        link created by the bot. The bot must
        have the can_invite_users administrator rights. Returns the edited
        invite link as a ChatInviteLink object.

        Reference: https://core.telegram.org/bots/api#editchatsubscriptioninvitelink
        """

        response = await self._send_request("editChatSubscriptionInviteLink", {
            "chat_id": chat_id,
            "invite_link": invite_link,
            "name": name,
        })
        return ChatInviteLink.model_validate(response)

    async def revoke_chat_invite_link(
        self: botapi.BotAPI,
        chat_id: Union[int, str],
        invite_link: str,
    ) -> Optional[ChatInviteLink]:
        """
        Use this method to revoke an invite link
        created by the bot. If the primary link
        is revoked, a new link is automatically generated.
        The bot must be an administrator in the
        chat for this to work and must have
        the appropriate administrator rights. Returns the revoked invite
        link as ChatInviteLink object.

        Reference: https://core.telegram.org/bots/api#revokechatinvitelink
        """

        response = await self._send_request("revokeChatInviteLink", {
            "chat_id": chat_id,
            "invite_link": invite_link,
        })
        return ChatInviteLink.model_validate(response)

    async def approve_chat_join_request(
        self: botapi.BotAPI,
        chat_id: Union[int, str],
        user_id: int,
    ) -> Optional[bool]:
        """
        Use this method to approve a chat join
        request. The bot must be an administrator in
        the chat for this to work and must
        have the can_invite_users administrator right. Returns True on
        success.

        Reference: https://core.telegram.org/bots/api#approvechatjoinrequest
        """

        response = await self._send_request("approveChatJoinRequest", {
            "chat_id": chat_id,
            "user_id": user_id,
        })
        return response

    async def decline_chat_join_request(
        self: botapi.BotAPI,
        chat_id: Union[int, str],
        user_id: int,
    ) -> Optional[bool]:
        """
        Use this method to decline a chat join
        request. The bot must be an administrator in
        the chat for this to work and must
        have the can_invite_users administrator right. Returns True on
        success.

        Reference: https://core.telegram.org/bots/api#declinechatjoinrequest
        """

        response = await self._send_request("declineChatJoinRequest", {
            "chat_id": chat_id,
            "user_id": user_id,
        })
        return response

    async def set_chat_photo(
        self: botapi.BotAPI,
        chat_id: Union[int, str],
        photo: InputFile,
    ) -> Optional[bool]:
        """
        Use this method to set a new profile
        photo for the chat. Photos can't be changed
        for private chats. The bot must be an
        administrator in the chat for this to work
        and must have the appropriate administrator rights. Returns
        True on success.

        Reference: https://core.telegram.org/bots/api#setchatphoto
        """

        response = await self._send_request("setChatPhoto", {
            "chat_id": chat_id,
            "photo": photo,
        })
        return response

    async def delete_chat_photo(
        self: botapi.BotAPI,
        chat_id: Union[int, str],
    ) -> Optional[bool]:
        """
        Use this method to delete a chat photo.
        Photos can't be changed for private chats. The
        bot must be an administrator in the chat
        for this to work and must have the
        appropriate administrator rights. Returns True on success.

        Reference: https://core.telegram.org/bots/api#deletechatphoto
        """

        response = await self._send_request("deleteChatPhoto", {
            "chat_id": chat_id,
        })
        return response

    async def set_chat_title(
        self: botapi.BotAPI,
        chat_id: Union[int, str],
        title: str,
    ) -> Optional[bool]:
        """
        Use this method to change the title of
        a chat. Titles can't be changed for private
        chats. The bot must be an administrator in
        the chat for this to work and must
        have the appropriate administrator rights. Returns True on
        success.

        Reference: https://core.telegram.org/bots/api#setchattitle
        """

        response = await self._send_request("setChatTitle", {
            "chat_id": chat_id,
            "title": title,
        })
        return response

    async def set_chat_description(
        self: botapi.BotAPI,
        chat_id: Union[int, str],
        description: Optional[str] = None,
    ) -> Optional[bool]:
        """
        Use this method to change the description of
        a group, a supergroup or a channel. The
        bot must be an administrator in the chat
        for this to work and must have the
        appropriate administrator rights. Returns True on success.

        Reference: https://core.telegram.org/bots/api#setchatdescription
        """

        response = await self._send_request("setChatDescription", {
            "chat_id": chat_id,
            "description": description,
        })
        return response

    async def pin_chat_message(
        self: botapi.BotAPI,
        chat_id: Union[int, str],
        message_id: int,
        business_connection_id: Optional[str] = None,
        disable_notification: Optional[bool] = None,
    ) -> Optional[bool]:
        """
        Use this method to add a message to
        the list of pinned messages in a chat.
        If the chat is not a private chat,
        the bot must be an administrator in the
        chat for this to work and must have
        the 'can_pin_messages' administrator right in a supergroup or
        'can_edit_messages' administrator right in a channel. Returns True
        on success.

        Reference: https://core.telegram.org/bots/api#pinchatmessage
        """

        response = await self._send_request("pinChatMessage", {
            "business_connection_id": business_connection_id,
            "chat_id": chat_id,
            "message_id": message_id,
            "disable_notification": disable_notification,
        })
        return response

    async def unpin_chat_message(
        self: botapi.BotAPI,
        chat_id: Union[int, str],
        business_connection_id: Optional[str] = None,
        message_id: Optional[int] = None,
    ) -> Optional[bool]:
        """
        Use this method to remove a message from
        the list of pinned messages in a chat.
        If the chat is not a private chat,
        the bot must be an administrator in the
        chat for this to work and must have
        the 'can_pin_messages' administrator right in a supergroup or
        'can_edit_messages' administrator right in a channel. Returns True
        on success.

        Reference: https://core.telegram.org/bots/api#unpinchatmessage
        """

        response = await self._send_request("unpinChatMessage", {
            "business_connection_id": business_connection_id,
            "chat_id": chat_id,
            "message_id": message_id,
        })
        return response

    async def unpin_all_chat_messages(
        self: botapi.BotAPI,
        chat_id: Union[int, str],
    ) -> Optional[bool]:
        """
        Use this method to clear the list of
        pinned messages in a chat. If the chat
        is not a private chat, the bot must
        be an administrator in the chat for this
        to work and must have the 'can_pin_messages' administrator
        right in a supergroup or 'can_edit_messages' administrator right
        in a channel. Returns True on success.

        Reference: https://core.telegram.org/bots/api#unpinallchatmessages
        """

        response = await self._send_request("unpinAllChatMessages", {
            "chat_id": chat_id,
        })
        return response

    async def leave_chat(
        self: botapi.BotAPI,
        chat_id: Union[int, str],
    ) -> Optional[bool]:
        """
        Use this method for your bot to leave
        a group, supergroup or channel. Returns True on
        success.

        Reference: https://core.telegram.org/bots/api#leavechat
        """

        response = await self._send_request("leaveChat", {
            "chat_id": chat_id,
        })
        return response

    async def get_chat(
        self: botapi.BotAPI,
        chat_id: Union[int, str],
    ) -> Optional[ChatFullInfo]:
        """
        Use this method to get up-to-date information about
        the chat. Returns a ChatFullInfo object on success.

        Reference: https://core.telegram.org/bots/api#getchat
        """

        response = await self._send_request("getChat", {
            "chat_id": chat_id,
        })
        return ChatFullInfo.model_validate(response)

    async def get_chat_administrators(
        self: botapi.BotAPI,
        chat_id: Union[int, str],
    ) -> Optional[List[ChatMember]]:
        """
        Use this method to get a list of
        administrators in a chat, which aren't bots. Returns
        an Array of ChatMember objects.

        Reference: https://core.telegram.org/bots/api#getchatadministrators
        """

        response = await self._send_request("getChatAdministrators", {
            "chat_id": chat_id,
        })
        return [_ChatMemberAdapter.validate_python(x) for x in response]

    async def get_chat_member_count(
        self: botapi.BotAPI,
        chat_id: Union[int, str],
    ) -> Optional[int]:
        """
        Use this method to get the number of
        members in a chat. Returns Int on success.

        Reference: https://core.telegram.org/bots/api#getchatmembercount
        """

        response = await self._send_request("getChatMemberCount", {
            "chat_id": chat_id,
        })
        return response

    async def get_chat_member(
        self: botapi.BotAPI,
        chat_id: Union[int, str],
        user_id: int,
    ) -> Optional[ChatMember]:
        """
        Use this method to get information about a
        member of a chat. The method is only
        guaranteed to work for other users if the
        bot is an administrator in the chat. Returns
        a ChatMember object on success.

        Reference: https://core.telegram.org/bots/api#getchatmember
        """

        response = await self._send_request("getChatMember", {
            "chat_id": chat_id,
            "user_id": user_id,
        })
        return TypeAdapter(ChatMember).validate_python(response)

    async def set_chat_sticker_set(
        self: botapi.BotAPI,
        chat_id: Union[int, str],
        sticker_set_name: str,
    ) -> Optional[bool]:
        """
        Use this method to set a new group
        sticker set for a supergroup. The bot must
        be an administrator in the chat for this
        to work and must have the appropriate administrator
        rights. Use the field can_set_sticker_set optionally returned in
        getChat requests to check if the bot can
        use this method. Returns True on success.

        Reference: https://core.telegram.org/bots/api#setchatstickerset
        """

        response = await self._send_request("setChatStickerSet", {
            "chat_id": chat_id,
            "sticker_set_name": sticker_set_name,
        })
        return response

    async def delete_chat_sticker_set(
        self: botapi.BotAPI,
        chat_id: Union[int, str],
    ) -> Optional[bool]:
        """
        Use this method to delete a group sticker
        set from a supergroup. The bot must be
        an administrator in the chat for this to
        work and must have the appropriate administrator rights.
        Use the field can_set_sticker_set optionally returned in getChat
        requests to check if the bot can use
        this method. Returns True on success.

        Reference: https://core.telegram.org/bots/api#deletechatstickerset
        """

        response = await self._send_request("deleteChatStickerSet", {
            "chat_id": chat_id,
        })
        return response

    async def get_forum_topic_icon_stickers(
        self: botapi.BotAPI,
    ) -> Optional[List[Sticker]]:
        """
        Use this method to get custom emoji stickers,
        which can be used as a forum topic
        icon by any user. Requires no parameters. Returns
        an Array of Sticker objects.

        Reference: https://core.telegram.org/bots/api#getforumtopiciconstickers
        """

        response = await self._send_request("getForumTopicIconStickers", {})
        return [Sticker.model_validate(x) for x in response]

    async def create_forum_topic(
        self: botapi.BotAPI,
        chat_id: Union[int, str],
        name: str,
        icon_color: Optional[int] = None,
        icon_custom_emoji_id: Optional[str] = None,
    ) -> Optional[ForumTopic]:
        """
        Use this method to create a topic in
        a forum supergroup chat. The bot must be
        an administrator in the chat for this to
        work and must have the can_manage_topics administrator rights.
        Returns information about the created topic as a
        ForumTopic object.

        Reference: https://core.telegram.org/bots/api#createforumtopic
        """

        response = await self._send_request("createForumTopic", {
            "chat_id": chat_id,
            "name": name,
            "icon_color": icon_color,
            "icon_custom_emoji_id": icon_custom_emoji_id,
        })
        return ForumTopic.model_validate(response)

    async def edit_forum_topic(
        self: botapi.BotAPI,
        chat_id: Union[int, str],
        message_thread_id: int,
        name: Optional[str] = None,
        icon_custom_emoji_id: Optional[str] = None,
    ) -> Optional[bool]:
        """
        Use this method to edit name and icon
        of a topic in a forum supergroup chat.
        The bot must be an administrator in the
        chat for this to work and must have
        the can_manage_topics administrator rights, unless it is the
        creator of the topic. Returns True on success.

        Reference: https://core.telegram.org/bots/api#editforumtopic
        """

        response = await self._send_request("editForumTopic", {
            "chat_id": chat_id,
            "message_thread_id": message_thread_id,
            "name": name,
            "icon_custom_emoji_id": icon_custom_emoji_id,
        })
        return response

    async def close_forum_topic(
        self: botapi.BotAPI,
        chat_id: Union[int, str],
        message_thread_id: int,
    ) -> Optional[bool]:
        """
        Use this method to close an open topic
        in a forum supergroup chat. The bot must
        be an administrator in the chat for this
        to work and must have the can_manage_topics administrator
        rights, unless it is the creator of the
        topic. Returns True on success.

        Reference: https://core.telegram.org/bots/api#closeforumtopic
        """

        response = await self._send_request("closeForumTopic", {
            "chat_id": chat_id,
            "message_thread_id": message_thread_id,
        })
        return response

    async def reopen_forum_topic(
        self: botapi.BotAPI,
        chat_id: Union[int, str],
        message_thread_id: int,
    ) -> Optional[bool]:
        """
        Use this method to reopen a closed topic
        in a forum supergroup chat. The bot must
        be an administrator in the chat for this
        to work and must have the can_manage_topics administrator
        rights, unless it is the creator of the
        topic. Returns True on success.

        Reference: https://core.telegram.org/bots/api#reopenforumtopic
        """

        response = await self._send_request("reopenForumTopic", {
            "chat_id": chat_id,
            "message_thread_id": message_thread_id,
        })
        return response

    async def delete_forum_topic(
        self: botapi.BotAPI,
        chat_id: Union[int, str],
        message_thread_id: int,
    ) -> Optional[bool]:
        """
        Use this method to delete a forum topic
        along with all its messages in a forum
        supergroup chat. The bot must be an administrator
        in the chat for this to work and
        must have the can_delete_messages administrator rights. Returns True
        on success.

        Reference: https://core.telegram.org/bots/api#deleteforumtopic
        """

        response = await self._send_request("deleteForumTopic", {
            "chat_id": chat_id,
            "message_thread_id": message_thread_id,
        })
        return response

    async def unpin_all_forum_topic_messages(
        self: botapi.BotAPI,
        chat_id: Union[int, str],
        message_thread_id: int,
    ) -> Optional[bool]:
        """
        Use this method to clear the list of
        pinned messages in a forum topic. The bot
        must be an administrator in the chat for
        this to work and must have the can_pin_messages
        administrator right in the supergroup. Returns True on
        success.

        Reference: https://core.telegram.org/bots/api#unpinallforumtopicmessages
        """

        response = await self._send_request("unpinAllForumTopicMessages", {
            "chat_id": chat_id,
            "message_thread_id": message_thread_id,
        })
        return response

    async def edit_general_forum_topic(
        self: botapi.BotAPI,
        chat_id: Union[int, str],
        name: str,
    ) -> Optional[bool]:
        """
        Use this method to edit the name of
        the 'General' topic in a forum supergroup chat.
        The bot must be an administrator in the
        chat for this to work and must have
        the can_manage_topics administrator rights. Returns True on success.

        Reference: https://core.telegram.org/bots/api#editgeneralforumtopic
        """

        response = await self._send_request("editGeneralForumTopic", {
            "chat_id": chat_id,
            "name": name,
        })
        return response

    async def close_general_forum_topic(
        self: botapi.BotAPI,
        chat_id: Union[int, str],
    ) -> Optional[bool]:
        """
        Use this method to close an open 'General'
        topic in a forum supergroup chat. The bot
        must be an administrator in the chat for
        this to work and must have the can_manage_topics
        administrator rights. Returns True on success.

        Reference: https://core.telegram.org/bots/api#closegeneralforumtopic
        """

        response = await self._send_request("closeGeneralForumTopic", {
            "chat_id": chat_id,
        })
        return response

    async def reopen_general_forum_topic(
        self: botapi.BotAPI,
        chat_id: Union[int, str],
    ) -> Optional[bool]:
        """
        Use this method to reopen a closed 'General'
        topic in a forum supergroup chat. The bot
        must be an administrator in the chat for
        this to work and must have the can_manage_topics
        administrator rights. The topic will be automatically unhidden
        if it was hidden. Returns True on success.

        Reference: https://core.telegram.org/bots/api#reopengeneralforumtopic
        """

        response = await self._send_request("reopenGeneralForumTopic", {
            "chat_id": chat_id,
        })
        return response

    async def hide_general_forum_topic(
        self: botapi.BotAPI,
        chat_id: Union[int, str],
    ) -> Optional[bool]:
        """
        Use this method to hide the 'General' topic
        in a forum supergroup chat. The bot must
        be an administrator in the chat for this
        to work and must have the can_manage_topics administrator
        rights. The topic will be automatically closed if
        it was open. Returns True on success.

        Reference: https://core.telegram.org/bots/api#hidegeneralforumtopic
        """

        response = await self._send_request("hideGeneralForumTopic", {
            "chat_id": chat_id,
        })
        return response

    async def unhide_general_forum_topic(
        self: botapi.BotAPI,
        chat_id: Union[int, str],
    ) -> Optional[bool]:
        """
        Use this method to unhide the 'General' topic
        in a forum supergroup chat. The bot must
        be an administrator in the chat for this
        to work and must have the can_manage_topics administrator
        rights. Returns True on success.

        Reference: https://core.telegram.org/bots/api#unhidegeneralforumtopic
        """

        response = await self._send_request("unhideGeneralForumTopic", {
            "chat_id": chat_id,
        })
        return response

    async def unpin_all_general_forum_topic_messages(
        self: botapi.BotAPI,
        chat_id: Union[int, str],
    ) -> Optional[bool]:
        """
        Use this method to clear the list of
        pinned messages in a General forum topic. The
        bot must be an administrator in the chat
        for this to work and must have the
        can_pin_messages administrator right in the supergroup. Returns True
        on success.

        Reference: https://core.telegram.org/bots/api#unpinallgeneralforumtopicmessages
        """

        response = await self._send_request("unpinAllGeneralForumTopicMessages", {
            "chat_id": chat_id,
        })
        return response

    async def answer_callback_query(
        self: botapi.BotAPI,
        callback_query_id: str,
        text: Optional[str] = None,
        show_alert: Optional[bool] = None,
        url: Optional[str] = None,
        cache_time: Optional[int] = None,
    ) -> Optional[bool]:
        """
        Use this method to send answers to callback
        queries sent from inline keyboards. The answer will
        be displayed to the user as a notification
        at the top of the chat screen or
        as an alert. On success, True is returned.

        Reference: https://core.telegram.org/bots/api#answercallbackquery
        """

        response = await self._send_request("answerCallbackQuery", {
            "callback_query_id": callback_query_id,
            "text": text,
            "show_alert": show_alert,
            "url": url,
            "cache_time": cache_time,
        })
        return response

    async def get_user_chat_boosts(
        self: botapi.BotAPI,
        chat_id: Union[int, str],
        user_id: int,
    ) -> Optional[UserChatBoosts]:
        """
        Use this method to get the list of
        boosts added to a chat by a user.
        Requires administrator rights in the chat. Returns a
        UserChatBoosts object.

        Reference: https://core.telegram.org/bots/api#getuserchatboosts
        """

        response = await self._send_request("getUserChatBoosts", {
            "chat_id": chat_id,
            "user_id": user_id,
        })
        return UserChatBoosts.model_validate(response)

    async def get_business_connection(
        self: botapi.BotAPI,
        business_connection_id: str,
    ) -> Optional[BusinessConnection]:
        """
        Use this method to get information about the
        connection of the bot with a business account.
        Returns a BusinessConnection object on success.

        Reference: https://core.telegram.org/bots/api#getbusinessconnection
        """

        response = await self._send_request("getBusinessConnection", {
            "business_connection_id": business_connection_id,
        })
        return BusinessConnection.model_validate(response)

    async def set_my_commands(
        self: botapi.BotAPI,
        commands: List[BotCommand],
        scope: Optional[BotCommandScope] = None,
        language_code: Optional[str] = None,
    ) -> Optional[bool]:
        """
        Use this method to change the list of
        the bot's commands. See this manual for more
        details about bot commands. Returns True on success.

        Reference: https://core.telegram.org/bots/api#setmycommands
        """

        response = await self._send_request("setMyCommands", {
            "commands": commands,
            "scope": scope,
            "language_code": language_code,
        })
        return response

    async def delete_my_commands(
        self: botapi.BotAPI,
        scope: Optional[BotCommandScope] = None,
        language_code: Optional[str] = None,
    ) -> Optional[bool]:
        """
        Use this method to delete the list of
        the bot's commands for the given scope and
        user language. After deletion, higher level commands will
        be shown to affected users. Returns True on
        success.

        Reference: https://core.telegram.org/bots/api#deletemycommands
        """

        response = await self._send_request("deleteMyCommands", {
            "scope": scope,
            "language_code": language_code,
        })
        return response

    async def get_my_commands(
        self: botapi.BotAPI,
        scope: Optional[BotCommandScope] = None,
        language_code: Optional[str] = None,
    ) -> Optional[List[BotCommand]]:
        """
        Use this method to get the current list
        of the bot's commands for the given scope
        and user language. Returns an Array of BotCommand
        objects. If commands aren't set, an empty list
        is returned.

        Reference: https://core.telegram.org/bots/api#getmycommands
        """

        response = await self._send_request("getMyCommands", {
            "scope": scope,
            "language_code": language_code,
        })
        return [BotCommand.model_validate(x) for x in response]

    async def set_my_name(
        self: botapi.BotAPI,
        name: Optional[str] = None,
        language_code: Optional[str] = None,
    ) -> Optional[bool]:
        """
        Use this method to change the bot's name.
        Returns True on success.

        Reference: https://core.telegram.org/bots/api#setmyname
        """

        response = await self._send_request("setMyName", {
            "name": name,
            "language_code": language_code,
        })
        return response

    async def get_my_name(
        self: botapi.BotAPI,
        language_code: Optional[str] = None,
    ) -> Optional[BotName]:
        """
        Use this method to get the current bot
        name for the given user language. Returns BotName
        on success.

        Reference: https://core.telegram.org/bots/api#getmyname
        """

        response = await self._send_request("getMyName", {
            "language_code": language_code,
        })
        return BotName.model_validate(response)

    async def set_my_description(
        self: botapi.BotAPI,
        description: Optional[str] = None,
        language_code: Optional[str] = None,
    ) -> Optional[bool]:
        """
        Use this method to change the bot's description,
        which is shown in the chat with the
        bot if the chat is empty. Returns True
        on success.

        Reference: https://core.telegram.org/bots/api#setmydescription
        """

        response = await self._send_request("setMyDescription", {
            "description": description,
            "language_code": language_code,
        })
        return response

    async def get_my_description(
        self: botapi.BotAPI,
        language_code: Optional[str] = None,
    ) -> Optional[BotDescription]:
        """
        Use this method to get the current bot
        description for the given user language. Returns BotDescription
        on success.

        Reference: https://core.telegram.org/bots/api#getmydescription
        """

        response = await self._send_request("getMyDescription", {
            "language_code": language_code,
        })
        return BotDescription.model_validate(response)

    async def set_my_short_description(
        self: botapi.BotAPI,
        short_description: Optional[str] = None,
        language_code: Optional[str] = None,
    ) -> Optional[bool]:
        """
        Use this method to change the bot's short
        description, which is shown on the bot's profile
        page and is sent together with the link
        when users share the bot. Returns True on
        success.

        Reference: https://core.telegram.org/bots/api#setmyshortdescription
        """

        response = await self._send_request("setMyShortDescription", {
            "short_description": short_description,
            "language_code": language_code,
        })
        return response

    async def get_my_short_description(
        self: botapi.BotAPI,
        language_code: Optional[str] = None,
    ) -> Optional[BotShortDescription]:
        """
        Use this method to get the current bot
        short description for the given user language. Returns
        BotShortDescription on success.

        Reference: https://core.telegram.org/bots/api#getmyshortdescription
        """

        response = await self._send_request("getMyShortDescription", {
            "language_code": language_code,
        })
        return BotShortDescription.model_validate(response)

    async def set_chat_menu_button(
        self: botapi.BotAPI,
        chat_id: Optional[int] = None,
        menu_button: Optional[MenuButton] = None,
    ) -> Optional[bool]:
        """
        Use this method to change the bot's menu
        button in a private chat, or the default
        menu button. Returns True on success.

        Reference: https://core.telegram.org/bots/api#setchatmenubutton
        """

        response = await self._send_request("setChatMenuButton", {
            "chat_id": chat_id,
            "menu_button": menu_button,
        })
        return response

    async def get_chat_menu_button(
        self: botapi.BotAPI,
        chat_id: Optional[int] = None,
    ) -> Optional[MenuButton]:
        """
        Use this method to get the current value
        of the bot's menu button in a private
        chat, or the default menu button. Returns MenuButton
        on success.

        Reference: https://core.telegram.org/bots/api#getchatmenubutton
        """

        response = await self._send_request("getChatMenuButton", {
            "chat_id": chat_id,
        })
        return TypeAdapter(MenuButton).validate_python(response)

    async def set_my_default_administrator_rights(
        self: botapi.BotAPI,
        rights: Optional[ChatAdministratorRights] = None,
        for_channels: Optional[bool] = None,
    ) -> Optional[bool]:
        """
        Use this method to change the default administrator
        rights requested by the bot when it's added
        as an administrator to groups or channels. These
        rights will be suggested to users, but they
        are free to modify the list before adding
        the bot. Returns True on success.

        Reference: https://core.telegram.org/bots/api#setmydefaultadministratorrights
        """

        response = await self._send_request("setMyDefaultAdministratorRights", {
            "rights": rights,
            "for_channels": for_channels,
        })
        return response

    async def get_my_default_administrator_rights(
        self: botapi.BotAPI,
        for_channels: Optional[bool] = None,
    ) -> Optional[ChatAdministratorRights]:
        """
        Use this method to get the current default
        administrator rights of the bot. Returns ChatAdministratorRights on
        success.

        Reference: https://core.telegram.org/bots/api#getmydefaultadministratorrights
        """

        response = await self._send_request("getMyDefaultAdministratorRights", {
            "for_channels": for_channels,
        })
        return ChatAdministratorRights.model_validate(response)

    async def edit_message_text(
        self: botapi.BotAPI,
        text: str,
        business_connection_id: Optional[str] = None,
        chat_id: Optional[Union[int, str]] = None,
        message_id: Optional[int] = None,
        inline_message_id: Optional[str] = None,
        parse_mode: Optional[str] = "HTML",
        entities: Optional[List[MessageEntity]] = None,
        link_preview_options: Optional[LinkPreviewOptions] = None,
        reply_markup: Optional[InlineKeyboardMarkup] = None,
    ) -> Optional[Union[Message, bool]]:
        """
        Use this method to edit text and game
        messages. On success, if the edited message is
        not an inline message, the edited Message is
        returned, otherwise True is returned. Note that business
        messages that were not sent by the bot
        and do not contain an inline keyboard can
        only be edited within 48 hours from the
        time they were sent.

        Reference: https://core.telegram.org/bots/api#editmessagetext
        """

        response = await self._send_request("editMessageText", {
            "business_connection_id": business_connection_id,
            "chat_id": chat_id,
            "message_id": message_id,
            "inline_message_id": inline_message_id,
            "text": text,
            "parse_mode": parse_mode,
            "entities": entities,
            "link_preview_options": link_preview_options,
            "reply_markup": reply_markup,
        })
        try:
            return Message.model_validate(response)
        except ValidationError:
            pass
        return response

    async def edit_message_caption(
        self: botapi.BotAPI,
        business_connection_id: Optional[str] = None,
        chat_id: Optional[Union[int, str]] = None,
        message_id: Optional[int] = None,
        inline_message_id: Optional[str] = None,
        caption: Optional[str] = None,
        parse_mode: Optional[str] = "HTML",
        caption_entities: Optional[List[MessageEntity]] = None,
        show_caption_above_media: Optional[bool] = None,
        reply_markup: Optional[InlineKeyboardMarkup] = None,
    ) -> Optional[Union[Message, bool]]:
        """
        Use this method to edit captions of messages.
        On success, if the edited message is not
        an inline message, the edited Message is returned,
        otherwise True is returned. Note that business messages
        that were not sent by the bot and
        do not contain an inline keyboard can only
        be edited within 48 hours from the time
        they were sent.

        Reference: https://core.telegram.org/bots/api#editmessagecaption
        """

        response = await self._send_request("editMessageCaption", {
            "business_connection_id": business_connection_id,
            "chat_id": chat_id,
            "message_id": message_id,
            "inline_message_id": inline_message_id,
            "caption": caption,
            "parse_mode": parse_mode,
            "caption_entities": caption_entities,
            "show_caption_above_media": show_caption_above_media,
            "reply_markup": reply_markup,
        })
        try:
            return Message.model_validate(response)
        except ValidationError:
            pass
        return response

    async def edit_message_media(
        self: botapi.BotAPI,
        media: InputMedia,
        business_connection_id: Optional[str] = None,
        chat_id: Optional[Union[int, str]] = None,
        message_id: Optional[int] = None,
        inline_message_id: Optional[str] = None,
        reply_markup: Optional[InlineKeyboardMarkup] = None,
    ) -> Optional[Union[Message, bool]]:
        """
        Use this method to edit animation, audio, document,
        photo, or video messages, or to add media
        to text messages. If a message is part
        of a message album, then it can be
        edited only to an audio for audio albums,
        only to a document for document albums and
        to a photo or a video otherwise. When
        an inline message is edited, a new file
        can't be uploaded; use a previously uploaded file
        via its file_id or specify a URL. On
        success, if the edited message is not an
        inline message, the edited Message is returned, otherwise
        True is returned. Note that business messages that
        were not sent by the bot and do
        not contain an inline keyboard can only be
        edited within 48 hours from the time they
        were sent.

        Reference: https://core.telegram.org/bots/api#editmessagemedia
        """

        response = await self._send_request("editMessageMedia", {
            "business_connection_id": business_connection_id,
            "chat_id": chat_id,
            "message_id": message_id,
            "inline_message_id": inline_message_id,
            "media": media,
            "reply_markup": reply_markup,
        })
        try:
            return Message.model_validate(response)
        except ValidationError:
            pass
        return response

    async def edit_message_live_location(
        self: botapi.BotAPI,
        latitude: float,
        longitude: float,
        business_connection_id: Optional[str] = None,
        chat_id: Optional[Union[int, str]] = None,
        message_id: Optional[int] = None,
        inline_message_id: Optional[str] = None,
        live_period: Optional[int] = None,
        horizontal_accuracy: Optional[float] = None,
        heading: Optional[int] = None,
        proximity_alert_radius: Optional[int] = None,
        reply_markup: Optional[InlineKeyboardMarkup] = None,
    ) -> Optional[Union[Message, bool]]:
        """
        Use this method to edit live location messages.
        A location can be edited until its live_period
        expires or editing is explicitly disabled by a
        call to stopMessageLiveLocation. On success, if the edited
        message is not an inline message, the edited
        Message is returned, otherwise True is returned.

        Reference: https://core.telegram.org/bots/api#editmessagelivelocation
        """

        response = await self._send_request("editMessageLiveLocation", {
            "business_connection_id": business_connection_id,
            "chat_id": chat_id,
            "message_id": message_id,
            "inline_message_id": inline_message_id,
            "latitude": latitude,
            "longitude": longitude,
            "live_period": live_period,
            "horizontal_accuracy": horizontal_accuracy,
            "heading": heading,
            "proximity_alert_radius": proximity_alert_radius,
            "reply_markup": reply_markup,
        })
        try:
            return Message.model_validate(response)
        except ValidationError:
            pass
        return response

    async def stop_message_live_location(
        self: botapi.BotAPI,
        business_connection_id: Optional[str] = None,
        chat_id: Optional[Union[int, str]] = None,
        message_id: Optional[int] = None,
        inline_message_id: Optional[str] = None,
        reply_markup: Optional[InlineKeyboardMarkup] = None,
    ) -> Optional[Union[Message, bool]]:
        """
        Use this method to stop updating a live
        location message before live_period expires. On success, if
        the message is not an inline message, the
        edited Message is returned, otherwise True is returned.

        Reference: https://core.telegram.org/bots/api#stopmessagelivelocation
        """

        response = await self._send_request("stopMessageLiveLocation", {
            "business_connection_id": business_connection_id,
            "chat_id": chat_id,
            "message_id": message_id,
            "inline_message_id": inline_message_id,
            "reply_markup": reply_markup,
        })
        try:
            return Message.model_validate(response)
        except ValidationError:
            pass
        return response

    async def edit_message_reply_markup(
        self: botapi.BotAPI,
        business_connection_id: Optional[str] = None,
        chat_id: Optional[Union[int, str]] = None,
        message_id: Optional[int] = None,
        inline_message_id: Optional[str] = None,
        reply_markup: Optional[InlineKeyboardMarkup] = None,
    ) -> Optional[Union[Message, bool]]:
        """
        Use this method to edit only the reply
        markup of messages. On success, if the edited
        message is not an inline message, the edited
        Message is returned, otherwise True is returned. Note
        that business messages that were not sent by
        the bot and do not contain an inline
        keyboard can only be edited within 48 hours
        from the time they were sent.

        Reference: https://core.telegram.org/bots/api#editmessagereplymarkup
        """

        response = await self._send_request("editMessageReplyMarkup", {
            "business_connection_id": business_connection_id,
            "chat_id": chat_id,
            "message_id": message_id,
            "inline_message_id": inline_message_id,
            "reply_markup": reply_markup,
        })
        try:
            return Message.model_validate(response)
        except ValidationError:
            pass
        return response

    async def stop_poll(
        self: botapi.BotAPI,
        chat_id: Union[int, str],
        message_id: int,
        business_connection_id: Optional[str] = None,
        reply_markup: Optional[InlineKeyboardMarkup] = None,
    ) -> Optional[Poll]:
        """
        Use this method to stop a poll which
        was sent by the bot. On success, the
        stopped Poll is returned.

        Reference: https://core.telegram.org/bots/api#stoppoll
        """

        response = await self._send_request("stopPoll", {
            "business_connection_id": business_connection_id,
            "chat_id": chat_id,
            "message_id": message_id,
            "reply_markup": reply_markup,
        })
        return Poll.model_validate(response)

    async def delete_message(
        self: botapi.BotAPI,
        chat_id: Union[int, str],
        message_id: int,
    ) -> Optional[bool]:
        """
        Use this method to delete a message, including
        service messages, with the following limitations:- A message
        can only be deleted if it was sent
        less than 48 hours ago.- Service messages about
        a supergroup, channel, or forum topic creation can't
        be deleted.- A dice message in a private
        chat can only be deleted if it was
        sent more than 24 hours ago.- Bots can
        delete outgoing messages in private chats, groups, and
        supergroups.- Bots can delete incoming messages in private
        chats.- Bots granted can_post_messages permissions can delete outgoing
        messages in channels.- If the bot is an
        administrator of a group, it can delete any
        message there.- If the bot has can_delete_messages permission
        in a supergroup or a channel, it can
        delete any message there.Returns True on success.

        Reference: https://core.telegram.org/bots/api#deletemessage
        """

        response = await self._send_request("deleteMessage", {
            "chat_id": chat_id,
            "message_id": message_id,
        })
        return response

    async def delete_messages(
        self: botapi.BotAPI,
        chat_id: Union[int, str],
        message_ids: List[int],
    ) -> Optional[bool]:
        """
        Use this method to delete multiple messages simultaneously.
        If some of the specified messages can't be
        found, they are skipped. Returns True on success.

        Reference: https://core.telegram.org/bots/api#deletemessages
        """

        response = await self._send_request("deleteMessages", {
            "chat_id": chat_id,
            "message_ids": message_ids,
        })
        return response

    async def send_sticker(
        self: botapi.BotAPI,
        chat_id: Union[int, str],
        sticker: Union[InputFile, str],
        business_connection_id: Optional[str] = None,
        message_thread_id: Optional[int] = None,
        emoji: Optional[str] = None,
        disable_notification: Optional[bool] = None,
        protect_content: Optional[bool] = None,
        allow_paid_broadcast: Optional[bool] = None,
        message_effect_id: Optional[str] = None,
        reply_parameters: Optional[ReplyParameters] = None,
        reply_markup: Optional[Union[InlineKeyboardMarkup, ReplyKeyboardMarkup, ReplyKeyboardRemove, ForceReply]] = None,
    ) -> Optional[Message]:
        """
        Use this method to send static .WEBP, animated
        .TGS, or video .WEBM stickers. On success, the
        sent Message is returned.

        Reference: https://core.telegram.org/bots/api#sendsticker
        """

        response = await self._send_request("sendSticker", {
            "business_connection_id": business_connection_id,
            "chat_id": chat_id,
            "message_thread_id": message_thread_id,
            "sticker": sticker,
            "emoji": emoji,
            "disable_notification": disable_notification,
            "protect_content": protect_content,
            "allow_paid_broadcast": allow_paid_broadcast,
            "message_effect_id": message_effect_id,
            "reply_parameters": reply_parameters,
            "reply_markup": reply_markup,
        })
        return Message.model_validate(response)

    async def get_sticker_set(
        self: botapi.BotAPI,
        name: str,
    ) -> Optional[StickerSet]:
        """
        Use this method to get a sticker set.
        On success, a StickerSet object is returned.

        Reference: https://core.telegram.org/bots/api#getstickerset
        """

        response = await self._send_request("getStickerSet", {
            "name": name,
        })
        return StickerSet.model_validate(response)

    async def get_custom_emoji_stickers(
        self: botapi.BotAPI,
        custom_emoji_ids: List[str],
    ) -> Optional[List[Sticker]]:
        """
        Use this method to get information about custom
        emoji stickers by their identifiers. Returns an Array
        of Sticker objects.

        Reference: https://core.telegram.org/bots/api#getcustomemojistickers
        """

        response = await self._send_request("getCustomEmojiStickers", {
            "custom_emoji_ids": custom_emoji_ids,
        })
        return [Sticker.model_validate(x) for x in response]

    async def upload_sticker_file(
        self: botapi.BotAPI,
        user_id: int,
        sticker: InputFile,
        sticker_format: str,
    ) -> Optional[File]:
        """
        Use this method to upload a file with
        a sticker for later use in the createNewStickerSet,
        addStickerToSet, or replaceStickerInSet methods (the file can be
        used multiple times). Returns the uploaded File on
        success.

        Reference: https://core.telegram.org/bots/api#uploadstickerfile
        """

        response = await self._send_request("uploadStickerFile", {
            "user_id": user_id,
            "sticker": sticker,
            "sticker_format": sticker_format,
        })
        return File.model_validate(response)

    async def create_new_sticker_set(
        self: botapi.BotAPI,
        user_id: int,
        name: str,
        title: str,
        stickers: List[InputSticker],
        sticker_type: Optional[str] = None,
        needs_repainting: Optional[bool] = None,
    ) -> Optional[bool]:
        """
        Use this method to create a new sticker
        set owned by a user. The bot will
        be able to edit the sticker set thus
        created. Returns True on success.

        Reference: https://core.telegram.org/bots/api#createnewstickerset
        """

        response = await self._send_request("createNewStickerSet", {
            "user_id": user_id,
            "name": name,
            "title": title,
            "stickers": stickers,
            "sticker_type": sticker_type,
            "needs_repainting": needs_repainting,
        })
        return response

    async def add_sticker_to_set(
        self: botapi.BotAPI,
        user_id: int,
        name: str,
        sticker: InputSticker,
    ) -> Optional[bool]:
        """
        Use this method to add a new sticker
        to a set created by the bot. Emoji
        sticker sets can have up to 200 stickers.
        Other sticker sets can have up to 120
        stickers. Returns True on success.

        Reference: https://core.telegram.org/bots/api#addstickertoset
        """

        response = await self._send_request("addStickerToSet", {
            "user_id": user_id,
            "name": name,
            "sticker": sticker,
        })
        return response

    async def set_sticker_position_in_set(
        self: botapi.BotAPI,
        sticker: str,
        position: int,
    ) -> Optional[bool]:
        """
        Use this method to move a sticker in
        a set created by the bot to a
        specific position. Returns True on success.

        Reference: https://core.telegram.org/bots/api#setstickerpositioninset
        """

        response = await self._send_request("setStickerPositionInSet", {
            "sticker": sticker,
            "position": position,
        })
        return response

    async def delete_sticker_from_set(
        self: botapi.BotAPI,
        sticker: str,
    ) -> Optional[bool]:
        """
        Use this method to delete a sticker from
        a set created by the bot. Returns True
        on success.

        Reference: https://core.telegram.org/bots/api#deletestickerfromset
        """

        response = await self._send_request("deleteStickerFromSet", {
            "sticker": sticker,
        })
        return response

    async def replace_sticker_in_set(
        self: botapi.BotAPI,
        user_id: int,
        name: str,
        old_sticker: str,
        sticker: InputSticker,
    ) -> Optional[bool]:
        """
        Use this method to replace an existing sticker
        in a sticker set with a new one.
        The method is equivalent to calling deleteStickerFromSet, then
        addStickerToSet, then setStickerPositionInSet. Returns True on success.

        Reference: https://core.telegram.org/bots/api#replacestickerinset
        """

        response = await self._send_request("replaceStickerInSet", {
            "user_id": user_id,
            "name": name,
            "old_sticker": old_sticker,
            "sticker": sticker,
        })
        return response

    async def set_sticker_emoji_list(
        self: botapi.BotAPI,
        sticker: str,
        emoji_list: List[str],
    ) -> Optional[bool]:
        """
        Use this method to change the list of
        emoji assigned to a regular or custom emoji
        sticker. The sticker must belong to a sticker
        set created by the bot. Returns True on
        success.

        Reference: https://core.telegram.org/bots/api#setstickeremojilist
        """

        response = await self._send_request("setStickerEmojiList", {
            "sticker": sticker,
            "emoji_list": emoji_list,
        })
        return response

    async def set_sticker_keywords(
        self: botapi.BotAPI,
        sticker: str,
        keywords: Optional[List[str]] = None,
    ) -> Optional[bool]:
        """
        Use this method to change search keywords assigned
        to a regular or custom emoji sticker. The
        sticker must belong to a sticker set created
        by the bot. Returns True on success.

        Reference: https://core.telegram.org/bots/api#setstickerkeywords
        """

        response = await self._send_request("setStickerKeywords", {
            "sticker": sticker,
            "keywords": keywords,
        })
        return response

    async def set_sticker_mask_position(
        self: botapi.BotAPI,
        sticker: str,
        mask_position: Optional[MaskPosition] = None,
    ) -> Optional[bool]:
        """
        Use this method to change the mask position
        of a mask sticker. The sticker must belong
        to a sticker set that was created by
        the bot. Returns True on success.

        Reference: https://core.telegram.org/bots/api#setstickermaskposition
        """

        response = await self._send_request("setStickerMaskPosition", {
            "sticker": sticker,
            "mask_position": mask_position,
        })
        return response

    async def set_sticker_set_title(
        self: botapi.BotAPI,
        name: str,
        title: str,
    ) -> Optional[bool]:
        """
        Use this method to set the title of
        a created sticker set. Returns True on success.

        Reference: https://core.telegram.org/bots/api#setstickersettitle
        """

        response = await self._send_request("setStickerSetTitle", {
            "name": name,
            "title": title,
        })
        return response

    async def set_sticker_set_thumbnail(
        self: botapi.BotAPI,
        name: str,
        user_id: int,
        format: str,
        thumbnail: Optional[Union[InputFile, str]] = None,
    ) -> Optional[bool]:
        """
        Use this method to set the thumbnail of
        a regular or mask sticker set. The format
        of the thumbnail file must match the format
        of the stickers in the set. Returns True
        on success.

        Reference: https://core.telegram.org/bots/api#setstickersetthumbnail
        """

        response = await self._send_request("setStickerSetThumbnail", {
            "name": name,
            "user_id": user_id,
            "thumbnail": thumbnail,
            "format": format,
        })
        return response

    async def set_custom_emoji_sticker_set_thumbnail(
        self: botapi.BotAPI,
        name: str,
        custom_emoji_id: Optional[str] = None,
    ) -> Optional[bool]:
        """
        Use this method to set the thumbnail of
        a custom emoji sticker set. Returns True on
        success.

        Reference: https://core.telegram.org/bots/api#setcustomemojistickersetthumbnail
        """

        response = await self._send_request("setCustomEmojiStickerSetThumbnail", {
            "name": name,
            "custom_emoji_id": custom_emoji_id,
        })
        return response

    async def delete_sticker_set(
        self: botapi.BotAPI,
        name: str,
    ) -> Optional[bool]:
        """
        Use this method to delete a sticker set
        that was created by the bot. Returns True
        on success.

        Reference: https://core.telegram.org/bots/api#deletestickerset
        """

        response = await self._send_request("deleteStickerSet", {
            "name": name,
        })
        return response

    async def get_available_gifts(
        self: botapi.BotAPI,
    ) -> Optional[Gifts]:
        """
        Returns the list of gifts that can be
        sent by the bot to users. Requires no
        parameters. Returns a Gifts object.

        Reference: https://core.telegram.org/bots/api#getavailablegifts
        """

        response = await self._send_request("getAvailableGifts", {})
        return Gifts.model_validate(response)

    async def send_gift(
        self: botapi.BotAPI,
        user_id: int,
        gift_id: str,
        text: Optional[str] = None,
        text_parse_mode: Optional[str] = None,
        text_entities: Optional[List[MessageEntity]] = None,
    ) -> Optional[bool]:
        """
        Sends a gift to the given user. The
        gift can't be converted to Telegram Stars by
        the user. Returns True on success.

        Reference: https://core.telegram.org/bots/api#sendgift
        """

        response = await self._send_request("sendGift", {
            "user_id": user_id,
            "gift_id": gift_id,
            "text": text,
            "text_parse_mode": text_parse_mode,
            "text_entities": text_entities,
        })
        return response

    async def answer_inline_query(
        self: botapi.BotAPI,
        inline_query_id: str,
        results: List[InlineQueryResult],
        cache_time: Optional[int] = None,
        is_personal: Optional[bool] = None,
        next_offset: Optional[str] = None,
        button: Optional[InlineQueryResultsButton] = None,
    ) -> Optional[bool]:
        """
        Use this method to send answers to an
        inline query. On success, True is returned.No more
        than 50 results per query are allowed.

        Reference: https://core.telegram.org/bots/api#answerinlinequery
        """

        response = await self._send_request("answerInlineQuery", {
            "inline_query_id": inline_query_id,
            "results": results,
            "cache_time": cache_time,
            "is_personal": is_personal,
            "next_offset": next_offset,
            "button": button,
        })
        return response

    async def answer_web_app_query(
        self: botapi.BotAPI,
        web_app_query_id: str,
        result: InlineQueryResult,
    ) -> Optional[SentWebAppMessage]:
        """
        Use this method to set the result of
        an interaction with a Web App and send
        a corresponding message on behalf of the user
        to the chat from which the query originated.
        On success, a SentWebAppMessage object is returned.

        Reference: https://core.telegram.org/bots/api#answerwebappquery
        """

        response = await self._send_request("answerWebAppQuery", {
            "web_app_query_id": web_app_query_id,
            "result": result,
        })
        return SentWebAppMessage.model_validate(response)

    async def save_prepared_inline_message(
        self: botapi.BotAPI,
        user_id: int,
        result: InlineQueryResult,
        allow_user_chats: Optional[bool] = None,
        allow_bot_chats: Optional[bool] = None,
        allow_group_chats: Optional[bool] = None,
        allow_channel_chats: Optional[bool] = None,
    ) -> Optional[PreparedInlineMessage]:
        """
        Stores a message that can be sent by
        a user of a Mini App. Returns a
        PreparedInlineMessage object.

        Reference: https://core.telegram.org/bots/api#savepreparedinlinemessage
        """

        response = await self._send_request("savePreparedInlineMessage", {
            "user_id": user_id,
            "result": result,
            "allow_user_chats": allow_user_chats,
            "allow_bot_chats": allow_bot_chats,
            "allow_group_chats": allow_group_chats,
            "allow_channel_chats": allow_channel_chats,
        })
        return PreparedInlineMessage.model_validate(response)

    async def send_invoice(
        self: botapi.BotAPI,
        chat_id: Union[int, str],
        title: str,
        description: str,
        payload: str,
        currency: str,
        prices: List[LabeledPrice],
        message_thread_id: Optional[int] = None,
        provider_token: Optional[str] = None,
        max_tip_amount: Optional[int] = None,
        suggested_tip_amounts: Optional[List[int]] = None,
        start_parameter: Optional[str] = None,
        provider_data: Optional[str] = None,
        photo_url: Optional[str] = None,
        photo_size: Optional[int] = None,
        photo_width: Optional[int] = None,
        photo_height: Optional[int] = None,
        need_name: Optional[bool] = None,
        need_phone_number: Optional[bool] = None,
        need_email: Optional[bool] = None,
        need_shipping_address: Optional[bool] = None,
        send_phone_number_to_provider: Optional[bool] = None,
        send_email_to_provider: Optional[bool] = None,
        is_flexible: Optional[bool] = None,
        disable_notification: Optional[bool] = None,
        protect_content: Optional[bool] = None,
        allow_paid_broadcast: Optional[bool] = None,
        message_effect_id: Optional[str] = None,
        reply_parameters: Optional[ReplyParameters] = None,
        reply_markup: Optional[InlineKeyboardMarkup] = None,
    ) -> Optional[Message]:
        """
        Use this method to send invoices. On success,
        the sent Message is returned.

        Reference: https://core.telegram.org/bots/api#sendinvoice
        """

        response = await self._send_request("sendInvoice", {
            "chat_id": chat_id,
            "message_thread_id": message_thread_id,
            "title": title,
            "description": description,
            "payload": payload,
            "provider_token": provider_token,
            "currency": currency,
            "prices": prices,
            "max_tip_amount": max_tip_amount,
            "suggested_tip_amounts": suggested_tip_amounts,
            "start_parameter": start_parameter,
            "provider_data": provider_data,
            "photo_url": photo_url,
            "photo_size": photo_size,
            "photo_width": photo_width,
            "photo_height": photo_height,
            "need_name": need_name,
            "need_phone_number": need_phone_number,
            "need_email": need_email,
            "need_shipping_address": need_shipping_address,
            "send_phone_number_to_provider": send_phone_number_to_provider,
            "send_email_to_provider": send_email_to_provider,
            "is_flexible": is_flexible,
            "disable_notification": disable_notification,
            "protect_content": protect_content,
            "allow_paid_broadcast": allow_paid_broadcast,
            "message_effect_id": message_effect_id,
            "reply_parameters": reply_parameters,
            "reply_markup": reply_markup,
        })
        return Message.model_validate(response)

    async def create_invoice_link(
        self: botapi.BotAPI,
        title: str,
        description: str,
        payload: str,
        currency: str,
        prices: List[LabeledPrice],
        business_connection_id: Optional[str] = None,
        provider_token: Optional[str] = None,
        subscription_period: Optional[int] = None,
        max_tip_amount: Optional[int] = None,
        suggested_tip_amounts: Optional[List[int]] = None,
        provider_data: Optional[str] = None,
        photo_url: Optional[str] = None,
        photo_size: Optional[int] = None,
        photo_width: Optional[int] = None,
        photo_height: Optional[int] = None,
        need_name: Optional[bool] = None,
        need_phone_number: Optional[bool] = None,
        need_email: Optional[bool] = None,
        need_shipping_address: Optional[bool] = None,
        send_phone_number_to_provider: Optional[bool] = None,
        send_email_to_provider: Optional[bool] = None,
        is_flexible: Optional[bool] = None,
    ) -> Optional[str]:
        """
        Use this method to create a link for
        an invoice. Returns the created invoice link as
        String on success.

        Reference: https://core.telegram.org/bots/api#createinvoicelink
        """

        response = await self._send_request("createInvoiceLink", {
            "business_connection_id": business_connection_id,
            "title": title,
            "description": description,
            "payload": payload,
            "provider_token": provider_token,
            "currency": currency,
            "prices": prices,
            "subscription_period": subscription_period,
            "max_tip_amount": max_tip_amount,
            "suggested_tip_amounts": suggested_tip_amounts,
            "provider_data": provider_data,
            "photo_url": photo_url,
            "photo_size": photo_size,
            "photo_width": photo_width,
            "photo_height": photo_height,
            "need_name": need_name,
            "need_phone_number": need_phone_number,
            "need_email": need_email,
            "need_shipping_address": need_shipping_address,
            "send_phone_number_to_provider": send_phone_number_to_provider,
            "send_email_to_provider": send_email_to_provider,
            "is_flexible": is_flexible,
        })
        return response

    async def answer_shipping_query(
        self: botapi.BotAPI,
        shipping_query_id: str,
        ok: bool,
        shipping_options: Optional[List[ShippingOption]] = None,
        error_message: Optional[str] = None,
    ) -> Optional[bool]:
        """
        If you sent an invoice requesting a shipping
        address and the parameter is_flexible was specified, the
        Bot API will send an Update with a
        shipping_query field to the bot. Use this method
        to reply to shipping queries. On success, True
        is returned.

        Reference: https://core.telegram.org/bots/api#answershippingquery
        """

        response = await self._send_request("answerShippingQuery", {
            "shipping_query_id": shipping_query_id,
            "ok": ok,
            "shipping_options": shipping_options,
            "error_message": error_message,
        })
        return response

    async def answer_pre_checkout_query(
        self: botapi.BotAPI,
        pre_checkout_query_id: str,
        ok: bool,
        error_message: Optional[str] = None,
    ) -> Optional[bool]:
        """
        Once the user has confirmed their payment and
        shipping details, the Bot API sends the final
        confirmation in the form of an Update with
        the field pre_checkout_query. Use this method to respond
        to such pre-checkout queries. On success, True is
        returned. Note: The Bot API must receive an
        answer within 10 seconds after the pre-checkout query
        was sent.

        Reference: https://core.telegram.org/bots/api#answerprecheckoutquery
        """

        response = await self._send_request("answerPreCheckoutQuery", {
            "pre_checkout_query_id": pre_checkout_query_id,
            "ok": ok,
            "error_message": error_message,
        })
        return response

    async def get_star_transactions(
        self: botapi.BotAPI,
        offset: Optional[int] = None,
        limit: Optional[int] = None,
    ) -> Optional[StarTransactions]:
        """
        Returns the bot's Telegram Star transactions in chronological
        order. On success, returns a StarTransactions object.

        Reference: https://core.telegram.org/bots/api#getstartransactions
        """

        response = await self._send_request("getStarTransactions", {
            "offset": offset,
            "limit": limit,
        })
        return StarTransactions.model_validate(response)

    async def refund_star_payment(
        self: botapi.BotAPI,
        user_id: int,
        telegram_payment_charge_id: str,
    ) -> Optional[bool]:
        """
        Refunds a successful payment in Telegram Stars. Returns
        True on success.

        Reference: https://core.telegram.org/bots/api#refundstarpayment
        """

        response = await self._send_request("refundStarPayment", {
            "user_id": user_id,
            "telegram_payment_charge_id": telegram_payment_charge_id,
        })
        return response

    async def edit_user_star_subscription(
        self: botapi.BotAPI,
        user_id: int,
        telegram_payment_charge_id: str,
        is_canceled: bool,
    ) -> Optional[bool]:
        """
        Allows the bot to cancel or re-enable extension
        of a subscription paid in Telegram Stars. Returns
        True on success.

        Reference: https://core.telegram.org/bots/api#edituserstarsubscription
        """

        response = await self._send_request("editUserStarSubscription", {
            "user_id": user_id,
            "telegram_payment_charge_id": telegram_payment_charge_id,
            "is_canceled": is_canceled,
        })
        return response

    async def set_passport_data_errors(
        self: botapi.BotAPI,
        user_id: int,
        errors: List[PassportElementError],
    ) -> Optional[bool]:
        """
        Informs a user that some of the Telegram
        Passport elements they provided contains errors. The user
        will not be able to re-submit their Passport
        to you until the errors are fixed (the
        contents of the field for which you returned
        the error must change). Returns True on success.

        Reference: https://core.telegram.org/bots/api#setpassportdataerrors
        """

        response = await self._send_request("setPassportDataErrors", {
            "user_id": user_id,
            "errors": errors,
        })
        return response

    async def send_game(
        self: botapi.BotAPI,
        chat_id: int,
        game_short_name: str,
        business_connection_id: Optional[str] = None,
        message_thread_id: Optional[int] = None,
        disable_notification: Optional[bool] = None,
        protect_content: Optional[bool] = None,
        allow_paid_broadcast: Optional[bool] = None,
        message_effect_id: Optional[str] = None,
        reply_parameters: Optional[ReplyParameters] = None,
        reply_markup: Optional[InlineKeyboardMarkup] = None,
    ) -> Optional[Message]:
        """
        Use this method to send a game. On
        success, the sent Message is returned.

        Reference: https://core.telegram.org/bots/api#sendgame
        """

        response = await self._send_request("sendGame", {
            "business_connection_id": business_connection_id,
            "chat_id": chat_id,
            "message_thread_id": message_thread_id,
            "game_short_name": game_short_name,
            "disable_notification": disable_notification,
            "protect_content": protect_content,
            "allow_paid_broadcast": allow_paid_broadcast,
            "message_effect_id": message_effect_id,
            "reply_parameters": reply_parameters,
            "reply_markup": reply_markup,
        })
        return Message.model_validate(response)

    async def set_game_score(
        self: botapi.BotAPI,
        user_id: int,
        score: int,
        force: Optional[bool] = None,
        disable_edit_message: Optional[bool] = None,
        chat_id: Optional[int] = None,
        message_id: Optional[int] = None,
        inline_message_id: Optional[str] = None,
    ) -> Optional[Message]:
        """
        Use this method to set the score of
        the specified user in a game message. On
        success, if the message is not an inline
        message, the Message is returned, otherwise True is
        returned. Returns an error, if the new score
        is not greater than the user's current score
        in the chat and force is False.

        Reference: https://core.telegram.org/bots/api#setgamescore
        """

        response = await self._send_request("setGameScore", {
            "user_id": user_id,
            "score": score,
            "force": force,
            "disable_edit_message": disable_edit_message,
            "chat_id": chat_id,
            "message_id": message_id,
            "inline_message_id": inline_message_id,
        })
        return Message.model_validate(response)

    async def get_game_high_scores(
        self: botapi.BotAPI,
        user_id: int,
        chat_id: Optional[int] = None,
        message_id: Optional[int] = None,
        inline_message_id: Optional[str] = None,
    ) -> Optional[List[GameHighScore]]:
        """
        Use this method to get data for high
        score tables. Will return the score of the
        specified user and several of their neighbors in
        a game. Returns an Array of GameHighScore objects.

        Reference: https://core.telegram.org/bots/api#getgamehighscores
        """

        response = await self._send_request("getGameHighScores", {
            "user_id": user_id,
            "chat_id": chat_id,
            "message_id": message_id,
            "inline_message_id": inline_message_id,
        })
        return [GameHighScore.model_validate(x) for x in response]

