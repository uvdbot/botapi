# This is an autogenerated file. Do not edit this file directly.
# If you want to change the contents of this file, you should edit the
# corresponding file in the `botapi` package.

from __future__ import annotations

from pydantic import BaseModel, Field, TypeAdapter
from typing import Union, Optional, Literal, List

class Update(BaseModel):
    """
    This object represents an incoming update.At most one
    of the optional parameters can be present in
    any given update.

    Reference: https://core.telegram.org/bots/api#update
    """

    update_id: int
    message: Optional[Message] = Field(default=None)
    edited_message: Optional[Message] = Field(default=None)
    channel_post: Optional[Message] = Field(default=None)
    edited_channel_post: Optional[Message] = Field(default=None)
    business_connection: Optional[BusinessConnection] = Field(default=None)
    business_message: Optional[Message] = Field(default=None)
    edited_business_message: Optional[Message] = Field(default=None)
    deleted_business_messages: Optional[BusinessMessagesDeleted] = Field(default=None)
    message_reaction: Optional[MessageReactionUpdated] = Field(default=None)
    message_reaction_count: Optional[MessageReactionCountUpdated] = Field(default=None)
    inline_query: Optional[InlineQuery] = Field(default=None)
    chosen_inline_result: Optional[ChosenInlineResult] = Field(default=None)
    callback_query: Optional[CallbackQuery] = Field(default=None)
    shipping_query: Optional[ShippingQuery] = Field(default=None)
    pre_checkout_query: Optional[PreCheckoutQuery] = Field(default=None)
    purchased_paid_media: Optional[PaidMediaPurchased] = Field(default=None)
    poll: Optional[Poll] = Field(default=None)
    poll_answer: Optional[PollAnswer] = Field(default=None)
    my_chat_member: Optional[ChatMemberUpdated] = Field(default=None)
    chat_member: Optional[ChatMemberUpdated] = Field(default=None)
    chat_join_request: Optional[ChatJoinRequest] = Field(default=None)
    chat_boost: Optional[ChatBoostUpdated] = Field(default=None)
    removed_chat_boost: Optional[ChatBoostRemoved] = Field(default=None) 

class WebhookInfo(BaseModel):
    """
    Describes the current status of a webhook.

    Reference: https://core.telegram.org/bots/api#webhookinfo
    """

    url: str
    has_custom_certificate: bool
    pending_update_count: int
    ip_address: Optional[str] = Field(default=None)
    last_error_date: Optional[int] = Field(default=None)
    last_error_message: Optional[str] = Field(default=None)
    last_synchronization_error_date: Optional[int] = Field(default=None)
    max_connections: Optional[int] = Field(default=None)
    allowed_updates: Optional[List[str]] = Field(default=None) 

class User(BaseModel):
    """
    This object represents a Telegram user or bot.

    Reference: https://core.telegram.org/bots/api#user
    """

    id: int
    is_bot: bool
    first_name: str
    last_name: Optional[str] = Field(default=None)
    username: Optional[str] = Field(default=None)
    language_code: Optional[str] = Field(default=None)
    is_premium: Optional[bool] = Field(default=None)
    added_to_attachment_menu: Optional[bool] = Field(default=None)
    can_join_groups: Optional[bool] = Field(default=None)
    can_read_all_group_messages: Optional[bool] = Field(default=None)
    supports_inline_queries: Optional[bool] = Field(default=None)
    can_connect_to_business: Optional[bool] = Field(default=None)
    has_main_web_app: Optional[bool] = Field(default=None) 

class Chat(BaseModel):
    """
    This object represents a chat.

    Reference: https://core.telegram.org/bots/api#chat
    """

    id: int
    type: str
    title: Optional[str] = Field(default=None)
    username: Optional[str] = Field(default=None)
    first_name: Optional[str] = Field(default=None)
    last_name: Optional[str] = Field(default=None)
    is_forum: Optional[bool] = Field(default=None)
    is_direct_messages: Optional[bool] = Field(default=None) 

class ChatFullInfo(BaseModel):
    """
    This object contains full information about a chat.

    Reference: https://core.telegram.org/bots/api#chatfullinfo
    """

    id: int
    type: str
    accent_color_id: int
    max_reaction_count: int
    accepted_gift_types: AcceptedGiftTypes
    title: Optional[str] = Field(default=None)
    username: Optional[str] = Field(default=None)
    first_name: Optional[str] = Field(default=None)
    last_name: Optional[str] = Field(default=None)
    is_forum: Optional[bool] = Field(default=None)
    is_direct_messages: Optional[bool] = Field(default=None)
    photo: Optional[ChatPhoto] = Field(default=None)
    active_usernames: Optional[List[str]] = Field(default=None)
    birthdate: Optional[Birthdate] = Field(default=None)
    business_intro: Optional[BusinessIntro] = Field(default=None)
    business_location: Optional[BusinessLocation] = Field(default=None)
    business_opening_hours: Optional[BusinessOpeningHours] = Field(default=None)
    personal_chat: Optional[Chat] = Field(default=None)
    parent_chat: Optional[Chat] = Field(default=None)
    available_reactions: Optional[List[ReactionType]] = Field(default=None)
    background_custom_emoji_id: Optional[str] = Field(default=None)
    profile_accent_color_id: Optional[int] = Field(default=None)
    profile_background_custom_emoji_id: Optional[str] = Field(default=None)
    emoji_status_custom_emoji_id: Optional[str] = Field(default=None)
    emoji_status_expiration_date: Optional[int] = Field(default=None)
    bio: Optional[str] = Field(default=None)
    has_private_forwards: Optional[bool] = Field(default=None)
    has_restricted_voice_and_video_messages: Optional[bool] = Field(default=None)
    join_to_send_messages: Optional[bool] = Field(default=None)
    join_by_request: Optional[bool] = Field(default=None)
    description: Optional[str] = Field(default=None)
    invite_link: Optional[str] = Field(default=None)
    pinned_message: Optional[Message] = Field(default=None)
    permissions: Optional[ChatPermissions] = Field(default=None)
    can_send_paid_media: Optional[bool] = Field(default=None)
    slow_mode_delay: Optional[int] = Field(default=None)
    unrestrict_boost_count: Optional[int] = Field(default=None)
    message_auto_delete_time: Optional[int] = Field(default=None)
    has_aggressive_anti_spam_enabled: Optional[bool] = Field(default=None)
    has_hidden_members: Optional[bool] = Field(default=None)
    has_protected_content: Optional[bool] = Field(default=None)
    has_visible_history: Optional[bool] = Field(default=None)
    sticker_set_name: Optional[str] = Field(default=None)
    can_set_sticker_set: Optional[bool] = Field(default=None)
    custom_emoji_sticker_set_name: Optional[str] = Field(default=None)
    linked_chat_id: Optional[int] = Field(default=None)
    location: Optional[ChatLocation] = Field(default=None) 

class Message(BaseModel):
    """
    This object represents a message.

    Reference: https://core.telegram.org/bots/api#message
    """

    message_id: int
    date: int
    chat: Chat
    message_thread_id: Optional[int] = Field(default=None)
    direct_messages_topic: Optional[DirectMessagesTopic] = Field(default=None)
    from_user: Optional[User] = Field(default=None, alias="from")
    sender_chat: Optional[Chat] = Field(default=None)
    sender_boost_count: Optional[int] = Field(default=None)
    sender_business_bot: Optional[User] = Field(default=None)
    business_connection_id: Optional[str] = Field(default=None)
    forward_origin: Optional[MessageOrigin] = Field(default=None)
    is_topic_message: Optional[bool] = Field(default=None)
    is_automatic_forward: Optional[bool] = Field(default=None)
    reply_to_message: Optional[Message] = Field(default=None)
    external_reply: Optional[ExternalReplyInfo] = Field(default=None)
    quote: Optional[TextQuote] = Field(default=None)
    reply_to_story: Optional[Story] = Field(default=None)
    reply_to_checklist_task_id: Optional[int] = Field(default=None)
    via_bot: Optional[User] = Field(default=None)
    edit_date: Optional[int] = Field(default=None)
    has_protected_content: Optional[bool] = Field(default=None)
    is_from_offline: Optional[bool] = Field(default=None)
    is_paid_post: Optional[bool] = Field(default=None)
    media_group_id: Optional[str] = Field(default=None)
    author_signature: Optional[str] = Field(default=None)
    paid_star_count: Optional[int] = Field(default=None)
    text: Optional[str] = Field(default=None)
    entities: Optional[List[MessageEntity]] = Field(default=None)
    link_preview_options: Optional[LinkPreviewOptions] = Field(default=None)
    suggested_post_info: Optional[SuggestedPostInfo] = Field(default=None)
    effect_id: Optional[str] = Field(default=None)
    animation: Optional[Animation] = Field(default=None)
    audio: Optional[Audio] = Field(default=None)
    document: Optional[Document] = Field(default=None)
    paid_media: Optional[PaidMediaInfo] = Field(default=None)
    photo: Optional[List[PhotoSize]] = Field(default=None)
    sticker: Optional[Sticker] = Field(default=None)
    story: Optional[Story] = Field(default=None)
    video: Optional[Video] = Field(default=None)
    video_note: Optional[VideoNote] = Field(default=None)
    voice: Optional[Voice] = Field(default=None)
    caption: Optional[str] = Field(default=None)
    caption_entities: Optional[List[MessageEntity]] = Field(default=None)
    show_caption_above_media: Optional[bool] = Field(default=None)
    has_media_spoiler: Optional[bool] = Field(default=None)
    checklist: Optional[Checklist] = Field(default=None)
    contact: Optional[Contact] = Field(default=None)
    dice: Optional[Dice] = Field(default=None)
    game: Optional[Game] = Field(default=None)
    poll: Optional[Poll] = Field(default=None)
    venue: Optional[Venue] = Field(default=None)
    location: Optional[Location] = Field(default=None)
    new_chat_members: Optional[List[User]] = Field(default=None)
    left_chat_member: Optional[User] = Field(default=None)
    new_chat_title: Optional[str] = Field(default=None)
    new_chat_photo: Optional[List[PhotoSize]] = Field(default=None)
    delete_chat_photo: Optional[bool] = Field(default=None)
    group_chat_created: Optional[bool] = Field(default=None)
    supergroup_chat_created: Optional[bool] = Field(default=None)
    channel_chat_created: Optional[bool] = Field(default=None)
    message_auto_delete_timer_changed: Optional[MessageAutoDeleteTimerChanged] = Field(default=None)
    migrate_to_chat_id: Optional[int] = Field(default=None)
    migrate_from_chat_id: Optional[int] = Field(default=None)
    pinned_message: Optional[Message] = Field(default=None)
    invoice: Optional[Invoice] = Field(default=None)
    successful_payment: Optional[SuccessfulPayment] = Field(default=None)
    refunded_payment: Optional[RefundedPayment] = Field(default=None)
    users_shared: Optional[UsersShared] = Field(default=None)
    chat_shared: Optional[ChatShared] = Field(default=None)
    gift: Optional[GiftInfo] = Field(default=None)
    unique_gift: Optional[UniqueGiftInfo] = Field(default=None)
    connected_website: Optional[str] = Field(default=None)
    write_access_allowed: Optional[WriteAccessAllowed] = Field(default=None)
    passport_data: Optional[PassportData] = Field(default=None)
    proximity_alert_triggered: Optional[ProximityAlertTriggered] = Field(default=None)
    boost_added: Optional[ChatBoostAdded] = Field(default=None)
    chat_background_set: Optional[ChatBackground] = Field(default=None)
    checklist_tasks_done: Optional[ChecklistTasksDone] = Field(default=None)
    checklist_tasks_added: Optional[ChecklistTasksAdded] = Field(default=None)
    direct_message_price_changed: Optional[DirectMessagePriceChanged] = Field(default=None)
    forum_topic_created: Optional[ForumTopicCreated] = Field(default=None)
    forum_topic_edited: Optional[ForumTopicEdited] = Field(default=None)
    forum_topic_closed: Optional[ForumTopicClosed] = Field(default=None)
    forum_topic_reopened: Optional[ForumTopicReopened] = Field(default=None)
    general_forum_topic_hidden: Optional[GeneralForumTopicHidden] = Field(default=None)
    general_forum_topic_unhidden: Optional[GeneralForumTopicUnhidden] = Field(default=None)
    giveaway_created: Optional[GiveawayCreated] = Field(default=None)
    giveaway: Optional[Giveaway] = Field(default=None)
    giveaway_winners: Optional[GiveawayWinners] = Field(default=None)
    giveaway_completed: Optional[GiveawayCompleted] = Field(default=None)
    paid_message_price_changed: Optional[PaidMessagePriceChanged] = Field(default=None)
    suggested_post_approved: Optional[SuggestedPostApproved] = Field(default=None)
    suggested_post_approval_failed: Optional[SuggestedPostApprovalFailed] = Field(default=None)
    suggested_post_declined: Optional[SuggestedPostDeclined] = Field(default=None)
    suggested_post_paid: Optional[SuggestedPostPaid] = Field(default=None)
    suggested_post_refunded: Optional[SuggestedPostRefunded] = Field(default=None)
    video_chat_scheduled: Optional[VideoChatScheduled] = Field(default=None)
    video_chat_started: Optional[VideoChatStarted] = Field(default=None)
    video_chat_ended: Optional[VideoChatEnded] = Field(default=None)
    video_chat_participants_invited: Optional[VideoChatParticipantsInvited] = Field(default=None)
    web_app_data: Optional[WebAppData] = Field(default=None)
    reply_markup: Optional[InlineKeyboardMarkup] = Field(default=None) 

class MessageId(BaseModel):
    """
    This object represents a unique message identifier.

    Reference: https://core.telegram.org/bots/api#messageid
    """

    message_id: int 

class MessageEntity(BaseModel):
    """
    This object represents one special entity in a
    text message. For example, hashtags, usernames, URLs, etc.

    Reference: https://core.telegram.org/bots/api#messageentity
    """

    type: str
    offset: int
    length: int
    url: Optional[str] = Field(default=None)
    user: Optional[User] = Field(default=None)
    language: Optional[str] = Field(default=None)
    custom_emoji_id: Optional[str] = Field(default=None) 

class TextQuote(BaseModel):
    """
    This object contains information about the quoted part
    of a message that is replied to by
    the given message.

    Reference: https://core.telegram.org/bots/api#textquote
    """

    text: str
    position: int
    entities: Optional[List[MessageEntity]] = Field(default=None)
    is_manual: Optional[bool] = Field(default=None) 

class ExternalReplyInfo(BaseModel):
    """
    This object contains information about a message that
    is being replied to, which may come from
    another chat or forum topic.

    Reference: https://core.telegram.org/bots/api#externalreplyinfo
    """

    origin: MessageOrigin
    chat: Optional[Chat] = Field(default=None)
    message_id: Optional[int] = Field(default=None)
    link_preview_options: Optional[LinkPreviewOptions] = Field(default=None)
    animation: Optional[Animation] = Field(default=None)
    audio: Optional[Audio] = Field(default=None)
    document: Optional[Document] = Field(default=None)
    paid_media: Optional[PaidMediaInfo] = Field(default=None)
    photo: Optional[List[PhotoSize]] = Field(default=None)
    sticker: Optional[Sticker] = Field(default=None)
    story: Optional[Story] = Field(default=None)
    video: Optional[Video] = Field(default=None)
    video_note: Optional[VideoNote] = Field(default=None)
    voice: Optional[Voice] = Field(default=None)
    has_media_spoiler: Optional[bool] = Field(default=None)
    checklist: Optional[Checklist] = Field(default=None)
    contact: Optional[Contact] = Field(default=None)
    dice: Optional[Dice] = Field(default=None)
    game: Optional[Game] = Field(default=None)
    giveaway: Optional[Giveaway] = Field(default=None)
    giveaway_winners: Optional[GiveawayWinners] = Field(default=None)
    invoice: Optional[Invoice] = Field(default=None)
    location: Optional[Location] = Field(default=None)
    poll: Optional[Poll] = Field(default=None)
    venue: Optional[Venue] = Field(default=None) 

class ReplyParameters(BaseModel):
    """
    Describes reply parameters for the message that is
    being sent.

    Reference: https://core.telegram.org/bots/api#replyparameters
    """

    message_id: int
    chat_id: Optional[Union[int, str]] = Field(default=None)
    allow_sending_without_reply: Optional[bool] = Field(default=None)
    quote: Optional[str] = Field(default=None)
    quote_parse_mode: Optional[str] = Field(default=None)
    quote_entities: Optional[List[MessageEntity]] = Field(default=None)
    quote_position: Optional[int] = Field(default=None)
    checklist_task_id: Optional[int] = Field(default=None) 

class MessageOriginUser(BaseModel):
    """
    The message was originally sent by a known
    user.

    Reference: https://core.telegram.org/bots/api#messageoriginuser
    """

    type: Literal["user"] = "user"
    date: int
    sender_user: User 

class MessageOriginHiddenUser(BaseModel):
    """
    The message was originally sent by an unknown
    user.

    Reference: https://core.telegram.org/bots/api#messageoriginhiddenuser
    """

    type: Literal["hidden_user"] = "hidden_user"
    date: int
    sender_user_name: str 

class MessageOriginChat(BaseModel):
    """
    The message was originally sent on behalf of
    a chat to a group chat.

    Reference: https://core.telegram.org/bots/api#messageoriginchat
    """

    type: Literal["chat"] = "chat"
    date: int
    sender_chat: Chat
    author_signature: Optional[str] = Field(default=None) 

class MessageOriginChannel(BaseModel):
    """
    The message was originally sent to a channel
    chat.

    Reference: https://core.telegram.org/bots/api#messageoriginchannel
    """

    type: Literal["channel"] = "channel"
    date: int
    chat: Chat
    message_id: int
    author_signature: Optional[str] = Field(default=None) 

class PhotoSize(BaseModel):
    """
    This object represents one size of a photo
    or a file / sticker thumbnail.

    Reference: https://core.telegram.org/bots/api#photosize
    """

    file_id: str
    file_unique_id: str
    width: int
    height: int
    file_size: Optional[int] = Field(default=None) 

class Animation(BaseModel):
    """
    This object represents an animation file (GIF or
    H.264/MPEG-4 AVC video without sound).

    Reference: https://core.telegram.org/bots/api#animation
    """

    file_id: str
    file_unique_id: str
    width: int
    height: int
    duration: int
    thumbnail: Optional[PhotoSize] = Field(default=None)
    file_name: Optional[str] = Field(default=None)
    mime_type: Optional[str] = Field(default=None)
    file_size: Optional[int] = Field(default=None) 

class Audio(BaseModel):
    """
    This object represents an audio file to be
    treated as music by the Telegram clients.

    Reference: https://core.telegram.org/bots/api#audio
    """

    file_id: str
    file_unique_id: str
    duration: int
    performer: Optional[str] = Field(default=None)
    title: Optional[str] = Field(default=None)
    file_name: Optional[str] = Field(default=None)
    mime_type: Optional[str] = Field(default=None)
    file_size: Optional[int] = Field(default=None)
    thumbnail: Optional[PhotoSize] = Field(default=None) 

class Document(BaseModel):
    """
    This object represents a general file (as opposed
    to photos, voice messages and audio files).

    Reference: https://core.telegram.org/bots/api#document
    """

    file_id: str
    file_unique_id: str
    thumbnail: Optional[PhotoSize] = Field(default=None)
    file_name: Optional[str] = Field(default=None)
    mime_type: Optional[str] = Field(default=None)
    file_size: Optional[int] = Field(default=None) 

class Story(BaseModel):
    """
    This object represents a story.

    Reference: https://core.telegram.org/bots/api#story
    """

    chat: Chat
    id: int 

class Video(BaseModel):
    """
    This object represents a video file.

    Reference: https://core.telegram.org/bots/api#video
    """

    file_id: str
    file_unique_id: str
    width: int
    height: int
    duration: int
    thumbnail: Optional[PhotoSize] = Field(default=None)
    cover: Optional[List[PhotoSize]] = Field(default=None)
    start_timestamp: Optional[int] = Field(default=None)
    file_name: Optional[str] = Field(default=None)
    mime_type: Optional[str] = Field(default=None)
    file_size: Optional[int] = Field(default=None) 

class VideoNote(BaseModel):
    """
    This object represents a video message (available in
    Telegram apps as of v.4.0).

    Reference: https://core.telegram.org/bots/api#videonote
    """

    file_id: str
    file_unique_id: str
    length: int
    duration: int
    thumbnail: Optional[PhotoSize] = Field(default=None)
    file_size: Optional[int] = Field(default=None) 

class Voice(BaseModel):
    """
    This object represents a voice note.

    Reference: https://core.telegram.org/bots/api#voice
    """

    file_id: str
    file_unique_id: str
    duration: int
    mime_type: Optional[str] = Field(default=None)
    file_size: Optional[int] = Field(default=None) 

class PaidMediaInfo(BaseModel):
    """
    Describes the paid media added to a message.

    Reference: https://core.telegram.org/bots/api#paidmediainfo
    """

    star_count: int
    paid_media: List[PaidMedia] 

class PaidMediaPreview(BaseModel):
    """
    The paid media isn't available before the payment.

    Reference: https://core.telegram.org/bots/api#paidmediapreview
    """

    type: Literal["preview"] = "preview"
    width: Optional[int] = Field(default=None)
    height: Optional[int] = Field(default=None)
    duration: Optional[int] = Field(default=None) 

class PaidMediaPhoto(BaseModel):
    """
    The paid media is a photo.

    Reference: https://core.telegram.org/bots/api#paidmediaphoto
    """

    type: Literal["photo"] = "photo"
    photo: List[PhotoSize] 

class PaidMediaVideo(BaseModel):
    """
    The paid media is a video.

    Reference: https://core.telegram.org/bots/api#paidmediavideo
    """

    type: Literal["video"] = "video"
    video: Video 

class Contact(BaseModel):
    """
    This object represents a phone contact.

    Reference: https://core.telegram.org/bots/api#contact
    """

    phone_number: str
    first_name: str
    last_name: Optional[str] = Field(default=None)
    user_id: Optional[int] = Field(default=None)
    vcard: Optional[str] = Field(default=None) 

class Dice(BaseModel):
    """
    This object represents an animated emoji that displays
    a random value.

    Reference: https://core.telegram.org/bots/api#dice
    """

    emoji: str
    value: int 

class PollOption(BaseModel):
    """
    This object contains information about one answer option
    in a poll.

    Reference: https://core.telegram.org/bots/api#polloption
    """

    text: str
    voter_count: int
    text_entities: Optional[List[MessageEntity]] = Field(default=None) 

class InputPollOption(BaseModel):
    """
    This object contains information about one answer option
    in a poll to be sent.

    Reference: https://core.telegram.org/bots/api#inputpolloption
    """

    text: str
    text_parse_mode: Optional[str] = Field(default=None)
    text_entities: Optional[List[MessageEntity]] = Field(default=None) 

class PollAnswer(BaseModel):
    """
    This object represents an answer of a user
    in a non-anonymous poll.

    Reference: https://core.telegram.org/bots/api#pollanswer
    """

    poll_id: str
    option_ids: List[int]
    voter_chat: Optional[Chat] = Field(default=None)
    user: Optional[User] = Field(default=None) 

class Poll(BaseModel):
    """
    This object contains information about a poll.

    Reference: https://core.telegram.org/bots/api#poll
    """

    id: str
    question: str
    options: List[PollOption]
    total_voter_count: int
    is_closed: bool
    is_anonymous: bool
    type: str
    allows_multiple_answers: bool
    question_entities: Optional[List[MessageEntity]] = Field(default=None)
    correct_option_id: Optional[int] = Field(default=None)
    explanation: Optional[str] = Field(default=None)
    explanation_entities: Optional[List[MessageEntity]] = Field(default=None)
    open_period: Optional[int] = Field(default=None)
    close_date: Optional[int] = Field(default=None) 

class ChecklistTask(BaseModel):
    """
    Describes a task in a checklist.

    Reference: https://core.telegram.org/bots/api#checklisttask
    """

    id: int
    text: str
    text_entities: Optional[List[MessageEntity]] = Field(default=None)
    completed_by_user: Optional[User] = Field(default=None)
    completion_date: Optional[int] = Field(default=None) 

class Checklist(BaseModel):
    """
    Describes a checklist.

    Reference: https://core.telegram.org/bots/api#checklist
    """

    title: str
    tasks: List[ChecklistTask]
    title_entities: Optional[List[MessageEntity]] = Field(default=None)
    others_can_add_tasks: Optional[bool] = Field(default=None)
    others_can_mark_tasks_as_done: Optional[bool] = Field(default=None) 

class InputChecklistTask(BaseModel):
    """
    Describes a task to add to a checklist.

    Reference: https://core.telegram.org/bots/api#inputchecklisttask
    """

    id: int
    text: str
    parse_mode: Optional[str] = Field(default="HTML")
    text_entities: Optional[List[MessageEntity]] = Field(default=None) 

class InputChecklist(BaseModel):
    """
    Describes a checklist to create.

    Reference: https://core.telegram.org/bots/api#inputchecklist
    """

    title: str
    tasks: List[InputChecklistTask]
    parse_mode: Optional[str] = Field(default="HTML")
    title_entities: Optional[List[MessageEntity]] = Field(default=None)
    others_can_add_tasks: Optional[bool] = Field(default=None)
    others_can_mark_tasks_as_done: Optional[bool] = Field(default=None) 

class ChecklistTasksDone(BaseModel):
    """
    Describes a service message about checklist tasks marked
    as done or not done.

    Reference: https://core.telegram.org/bots/api#checklisttasksdone
    """

    checklist_message: Optional[Message] = Field(default=None)
    marked_as_done_task_ids: Optional[List[int]] = Field(default=None)
    marked_as_not_done_task_ids: Optional[List[int]] = Field(default=None) 

class ChecklistTasksAdded(BaseModel):
    """
    Describes a service message about tasks added to
    a checklist.

    Reference: https://core.telegram.org/bots/api#checklisttasksadded
    """

    tasks: List[ChecklistTask]
    checklist_message: Optional[Message] = Field(default=None) 

class Location(BaseModel):
    """
    This object represents a point on the map.

    Reference: https://core.telegram.org/bots/api#location
    """

    latitude: float
    longitude: float
    horizontal_accuracy: Optional[float] = Field(default=None)
    live_period: Optional[int] = Field(default=None)
    heading: Optional[int] = Field(default=None)
    proximity_alert_radius: Optional[int] = Field(default=None) 

class Venue(BaseModel):
    """
    This object represents a venue.

    Reference: https://core.telegram.org/bots/api#venue
    """

    location: Location
    title: str
    address: str
    foursquare_id: Optional[str] = Field(default=None)
    foursquare_type: Optional[str] = Field(default=None)
    google_place_id: Optional[str] = Field(default=None)
    google_place_type: Optional[str] = Field(default=None) 

class WebAppData(BaseModel):
    """
    Describes data sent from a Web App to
    the bot.

    Reference: https://core.telegram.org/bots/api#webappdata
    """

    data: str
    button_text: str 

class ProximityAlertTriggered(BaseModel):
    """
    This object represents the content of a service
    message, sent whenever a user in the chat
    triggers a proximity alert set by another user.

    Reference: https://core.telegram.org/bots/api#proximityalerttriggered
    """

    traveler: User
    watcher: User
    distance: int 

class MessageAutoDeleteTimerChanged(BaseModel):
    """
    This object represents a service message about a
    change in auto-delete timer settings.

    Reference: https://core.telegram.org/bots/api#messageautodeletetimerchanged
    """

    message_auto_delete_time: int 

class ChatBoostAdded(BaseModel):
    """
    This object represents a service message about a
    user boosting a chat.

    Reference: https://core.telegram.org/bots/api#chatboostadded
    """

    boost_count: int 

class BackgroundFillSolid(BaseModel):
    """
    The background is filled using the selected color.

    Reference: https://core.telegram.org/bots/api#backgroundfillsolid
    """

    type: Literal["solid"] = "solid"
    color: int 

class BackgroundFillGradient(BaseModel):
    """
    The background is a gradient fill.

    Reference: https://core.telegram.org/bots/api#backgroundfillgradient
    """

    type: Literal["gradient"] = "gradient"
    top_color: int
    bottom_color: int
    rotation_angle: int 

class BackgroundFillFreeformGradient(BaseModel):
    """
    The background is a freeform gradient that rotates
    after every message in the chat.

    Reference: https://core.telegram.org/bots/api#backgroundfillfreeformgradient
    """

    type: Literal["freeform_gradient"] = "freeform_gradient"
    colors: List[int] 

class BackgroundTypeFill(BaseModel):
    """
    The background is automatically filled based on the
    selected colors.

    Reference: https://core.telegram.org/bots/api#backgroundtypefill
    """

    type: Literal["fill"] = "fill"
    fill: BackgroundFill
    dark_theme_dimming: int 

class BackgroundTypeWallpaper(BaseModel):
    """
    The background is a wallpaper in the JPEG
    format.

    Reference: https://core.telegram.org/bots/api#backgroundtypewallpaper
    """

    type: Literal["wallpaper"] = "wallpaper"
    document: Document
    dark_theme_dimming: int
    is_blurred: Optional[bool] = Field(default=None)
    is_moving: Optional[bool] = Field(default=None) 

class BackgroundTypePattern(BaseModel):
    """
    The background is a .PNG or .TGV (gzipped
    subset of SVG with MIME type “application/x-tgwallpattern”) pattern
    to be combined with the background fill chosen
    by the user.

    Reference: https://core.telegram.org/bots/api#backgroundtypepattern
    """

    type: Literal["pattern"] = "pattern"
    document: Document
    fill: BackgroundFill
    intensity: int
    is_inverted: Optional[bool] = Field(default=None)
    is_moving: Optional[bool] = Field(default=None) 

class BackgroundTypeChatTheme(BaseModel):
    """
    The background is taken directly from a built-in
    chat theme.

    Reference: https://core.telegram.org/bots/api#backgroundtypechattheme
    """

    type: Literal["chat_theme"] = "chat_theme"
    theme_name: str 

class ChatBackground(BaseModel):
    """
    This object represents a chat background.

    Reference: https://core.telegram.org/bots/api#chatbackground
    """

    type: BackgroundType 

class ForumTopicCreated(BaseModel):
    """
    This object represents a service message about a
    new forum topic created in the chat.

    Reference: https://core.telegram.org/bots/api#forumtopiccreated
    """

    name: str
    icon_color: int
    icon_custom_emoji_id: Optional[str] = Field(default=None) 

class ForumTopicClosed(BaseModel):
    """
    This object represents a service message about a
    forum topic closed in the chat. Currently holds
    no information.

    Reference: https://core.telegram.org/bots/api#forumtopicclosed
    """

    pass
 

class ForumTopicEdited(BaseModel):
    """
    This object represents a service message about an
    edited forum topic.

    Reference: https://core.telegram.org/bots/api#forumtopicedited
    """

    name: Optional[str] = Field(default=None)
    icon_custom_emoji_id: Optional[str] = Field(default=None) 

class ForumTopicReopened(BaseModel):
    """
    This object represents a service message about a
    forum topic reopened in the chat. Currently holds
    no information.

    Reference: https://core.telegram.org/bots/api#forumtopicreopened
    """

    pass
 

class GeneralForumTopicHidden(BaseModel):
    """
    This object represents a service message about General
    forum topic hidden in the chat. Currently holds
    no information.

    Reference: https://core.telegram.org/bots/api#generalforumtopichidden
    """

    pass
 

class GeneralForumTopicUnhidden(BaseModel):
    """
    This object represents a service message about General
    forum topic unhidden in the chat. Currently holds
    no information.

    Reference: https://core.telegram.org/bots/api#generalforumtopicunhidden
    """

    pass
 

class SharedUser(BaseModel):
    """
    This object contains information about a user that
    was shared with the bot using a KeyboardButtonRequestUsers
    button.

    Reference: https://core.telegram.org/bots/api#shareduser
    """

    user_id: int
    first_name: Optional[str] = Field(default=None)
    last_name: Optional[str] = Field(default=None)
    username: Optional[str] = Field(default=None)
    photo: Optional[List[PhotoSize]] = Field(default=None) 

class UsersShared(BaseModel):
    """
    This object contains information about the users whose
    identifiers were shared with the bot using a
    KeyboardButtonRequestUsers button.

    Reference: https://core.telegram.org/bots/api#usersshared
    """

    request_id: int
    users: List[SharedUser] 

class ChatShared(BaseModel):
    """
    This object contains information about a chat that
    was shared with the bot using a KeyboardButtonRequestChat
    button.

    Reference: https://core.telegram.org/bots/api#chatshared
    """

    request_id: int
    chat_id: int
    title: Optional[str] = Field(default=None)
    username: Optional[str] = Field(default=None)
    photo: Optional[List[PhotoSize]] = Field(default=None) 

class WriteAccessAllowed(BaseModel):
    """
    This object represents a service message about a
    user allowing a bot to write messages after
    adding it to the attachment menu, launching a
    Web App from a link, or accepting an
    explicit request from a Web App sent by
    the method requestWriteAccess.

    Reference: https://core.telegram.org/bots/api#writeaccessallowed
    """

    from_request: Optional[bool] = Field(default=None)
    web_app_name: Optional[str] = Field(default=None)
    from_attachment_menu: Optional[bool] = Field(default=None) 

class VideoChatScheduled(BaseModel):
    """
    This object represents a service message about a
    video chat scheduled in the chat.

    Reference: https://core.telegram.org/bots/api#videochatscheduled
    """

    start_date: int 

class VideoChatStarted(BaseModel):
    """
    This object represents a service message about a
    video chat started in the chat. Currently holds
    no information.

    Reference: https://core.telegram.org/bots/api#videochatstarted
    """

    pass
 

class VideoChatEnded(BaseModel):
    """
    This object represents a service message about a
    video chat ended in the chat.

    Reference: https://core.telegram.org/bots/api#videochatended
    """

    duration: int 

class VideoChatParticipantsInvited(BaseModel):
    """
    This object represents a service message about new
    members invited to a video chat.

    Reference: https://core.telegram.org/bots/api#videochatparticipantsinvited
    """

    users: List[User] 

class PaidMessagePriceChanged(BaseModel):
    """
    Describes a service message about a change in
    the price of paid messages within a chat.

    Reference: https://core.telegram.org/bots/api#paidmessagepricechanged
    """

    paid_message_star_count: int 

class DirectMessagePriceChanged(BaseModel):
    """
    Describes a service message about a change in
    the price of direct messages sent to a
    channel chat.

    Reference: https://core.telegram.org/bots/api#directmessagepricechanged
    """

    are_direct_messages_enabled: bool
    direct_message_star_count: Optional[int] = Field(default=None) 

class SuggestedPostApproved(BaseModel):
    """
    Describes a service message about the approval of
    a suggested post.

    Reference: https://core.telegram.org/bots/api#suggestedpostapproved
    """

    send_date: int
    suggested_post_message: Optional[Message] = Field(default=None)
    price: Optional[SuggestedPostPrice] = Field(default=None) 

class SuggestedPostApprovalFailed(BaseModel):
    """
    Describes a service message about the failed approval
    of a suggested post. Currently, only caused by
    insufficient user funds at the time of approval.

    Reference: https://core.telegram.org/bots/api#suggestedpostapprovalfailed
    """

    price: SuggestedPostPrice
    suggested_post_message: Optional[Message] = Field(default=None) 

class SuggestedPostDeclined(BaseModel):
    """
    Describes a service message about the rejection of
    a suggested post.

    Reference: https://core.telegram.org/bots/api#suggestedpostdeclined
    """

    suggested_post_message: Optional[Message] = Field(default=None)
    comment: Optional[str] = Field(default=None) 

class SuggestedPostPaid(BaseModel):
    """
    Describes a service message about a successful payment
    for a suggested post.

    Reference: https://core.telegram.org/bots/api#suggestedpostpaid
    """

    currency: str
    suggested_post_message: Optional[Message] = Field(default=None)
    amount: Optional[int] = Field(default=None)
    star_amount: Optional[StarAmount] = Field(default=None) 

class SuggestedPostRefunded(BaseModel):
    """
    Describes a service message about a payment refund
    for a suggested post.

    Reference: https://core.telegram.org/bots/api#suggestedpostrefunded
    """

    reason: str
    suggested_post_message: Optional[Message] = Field(default=None) 

class GiveawayCreated(BaseModel):
    """
    This object represents a service message about the
    creation of a scheduled giveaway.

    Reference: https://core.telegram.org/bots/api#giveawaycreated
    """

    prize_star_count: Optional[int] = Field(default=None) 

class Giveaway(BaseModel):
    """
    This object represents a message about a scheduled
    giveaway.

    Reference: https://core.telegram.org/bots/api#giveaway
    """

    chats: List[Chat]
    winners_selection_date: int
    winner_count: int
    only_new_members: Optional[bool] = Field(default=None)
    has_public_winners: Optional[bool] = Field(default=None)
    prize_description: Optional[str] = Field(default=None)
    country_codes: Optional[List[str]] = Field(default=None)
    prize_star_count: Optional[int] = Field(default=None)
    premium_subscription_month_count: Optional[int] = Field(default=None) 

class GiveawayWinners(BaseModel):
    """
    This object represents a message about the completion
    of a giveaway with public winners.

    Reference: https://core.telegram.org/bots/api#giveawaywinners
    """

    chat: Chat
    giveaway_message_id: int
    winners_selection_date: int
    winner_count: int
    winners: List[User]
    additional_chat_count: Optional[int] = Field(default=None)
    prize_star_count: Optional[int] = Field(default=None)
    premium_subscription_month_count: Optional[int] = Field(default=None)
    unclaimed_prize_count: Optional[int] = Field(default=None)
    only_new_members: Optional[bool] = Field(default=None)
    was_refunded: Optional[bool] = Field(default=None)
    prize_description: Optional[str] = Field(default=None) 

class GiveawayCompleted(BaseModel):
    """
    This object represents a service message about the
    completion of a giveaway without public winners.

    Reference: https://core.telegram.org/bots/api#giveawaycompleted
    """

    winner_count: int
    unclaimed_prize_count: Optional[int] = Field(default=None)
    giveaway_message: Optional[Message] = Field(default=None)
    is_star_giveaway: Optional[bool] = Field(default=None) 

class LinkPreviewOptions(BaseModel):
    """
    Describes the options used for link preview generation.

    Reference: https://core.telegram.org/bots/api#linkpreviewoptions
    """

    is_disabled: Optional[bool] = Field(default=None)
    url: Optional[str] = Field(default=None)
    prefer_small_media: Optional[bool] = Field(default=None)
    prefer_large_media: Optional[bool] = Field(default=None)
    show_above_text: Optional[bool] = Field(default=None) 

class SuggestedPostPrice(BaseModel):
    """
    Desribes price of a suggested post.

    Reference: https://core.telegram.org/bots/api#suggestedpostprice
    """

    currency: str
    amount: int 

class SuggestedPostInfo(BaseModel):
    """
    Contains information about a suggested post.

    Reference: https://core.telegram.org/bots/api#suggestedpostinfo
    """

    state: str
    price: Optional[SuggestedPostPrice] = Field(default=None)
    send_date: Optional[int] = Field(default=None) 

class SuggestedPostParameters(BaseModel):
    """
    Contains parameters of a post that is being
    suggested by the bot.

    Reference: https://core.telegram.org/bots/api#suggestedpostparameters
    """

    price: Optional[SuggestedPostPrice] = Field(default=None)
    send_date: Optional[int] = Field(default=None) 

class DirectMessagesTopic(BaseModel):
    """
    Describes a topic of a direct messages chat.

    Reference: https://core.telegram.org/bots/api#directmessagestopic
    """

    topic_id: int
    user: Optional[User] = Field(default=None) 

class UserProfilePhotos(BaseModel):
    """
    This object represent a user's profile pictures.

    Reference: https://core.telegram.org/bots/api#userprofilephotos
    """

    total_count: int
    photos: List[List[PhotoSize]] 

class File(BaseModel):
    """
    This object represents a file ready to be
    downloaded. The file can be downloaded via the
    link https://api.telegram.org/file/bot<token>/<file_path>. It is guaranteed that the link
    will be valid for at least 1 hour.
    When the link expires, a new one can
    be requested by calling getFile.

    Reference: https://core.telegram.org/bots/api#file
    """

    file_id: str
    file_unique_id: str
    file_size: Optional[int] = Field(default=None)
    file_path: Optional[str] = Field(default=None) 

class WebAppInfo(BaseModel):
    """
    Describes a Web App.

    Reference: https://core.telegram.org/bots/api#webappinfo
    """

    url: str 

class ReplyKeyboardMarkup(BaseModel):
    """
    This object represents a custom keyboard with reply
    options (see Introduction to bots for details and
    examples). Not supported in channels and for messages
    sent on behalf of a Telegram Business account.

    Reference: https://core.telegram.org/bots/api#replykeyboardmarkup
    """

    keyboard: List[List[KeyboardButton]]
    is_persistent: Optional[bool] = Field(default=None)
    resize_keyboard: Optional[bool] = Field(default=None)
    one_time_keyboard: Optional[bool] = Field(default=None)
    input_field_placeholder: Optional[str] = Field(default=None)
    selective: Optional[bool] = Field(default=None) 

class KeyboardButton(BaseModel):
    """
    This object represents one button of the reply
    keyboard. At most one of the optional fields
    must be used to specify type of the
    button. For simple text buttons, String can be
    used instead of this object to specify the
    button text.

    Reference: https://core.telegram.org/bots/api#keyboardbutton
    """

    text: str
    request_users: Optional[KeyboardButtonRequestUsers] = Field(default=None)
    request_chat: Optional[KeyboardButtonRequestChat] = Field(default=None)
    request_contact: Optional[bool] = Field(default=None)
    request_location: Optional[bool] = Field(default=None)
    request_poll: Optional[KeyboardButtonPollType] = Field(default=None)
    web_app: Optional[WebAppInfo] = Field(default=None) 

class KeyboardButtonRequestUsers(BaseModel):
    """
    This object defines the criteria used to request
    suitable users. Information about the selected users will
    be shared with the bot when the corresponding
    button is pressed. More about requesting users »

    Reference: https://core.telegram.org/bots/api#keyboardbuttonrequestusers
    """

    request_id: int
    user_is_bot: Optional[bool] = Field(default=None)
    user_is_premium: Optional[bool] = Field(default=None)
    max_quantity: Optional[int] = Field(default=None)
    request_name: Optional[bool] = Field(default=None)
    request_username: Optional[bool] = Field(default=None)
    request_photo: Optional[bool] = Field(default=None) 

class KeyboardButtonRequestChat(BaseModel):
    """
    This object defines the criteria used to request
    a suitable chat. Information about the selected chat
    will be shared with the bot when the
    corresponding button is pressed. The bot will be
    granted requested rights in the chat if appropriate.
    More about requesting chats ».

    Reference: https://core.telegram.org/bots/api#keyboardbuttonrequestchat
    """

    request_id: int
    chat_is_channel: bool
    chat_is_forum: Optional[bool] = Field(default=None)
    chat_has_username: Optional[bool] = Field(default=None)
    chat_is_created: Optional[bool] = Field(default=None)
    user_administrator_rights: Optional[ChatAdministratorRights] = Field(default=None)
    bot_administrator_rights: Optional[ChatAdministratorRights] = Field(default=None)
    bot_is_member: Optional[bool] = Field(default=None)
    request_title: Optional[bool] = Field(default=None)
    request_username: Optional[bool] = Field(default=None)
    request_photo: Optional[bool] = Field(default=None) 

class KeyboardButtonPollType(BaseModel):
    """
    This object represents type of a poll, which
    is allowed to be created and sent when
    the corresponding button is pressed.

    Reference: https://core.telegram.org/bots/api#keyboardbuttonpolltype
    """

    type: Optional[str] = Field(default=None) 

class ReplyKeyboardRemove(BaseModel):
    """
    Upon receiving a message with this object, Telegram
    clients will remove the current custom keyboard and
    display the default letter-keyboard. By default, custom keyboards
    are displayed until a new keyboard is sent
    by a bot. An exception is made for
    one-time keyboards that are hidden immediately after the
    user presses a button (see ReplyKeyboardMarkup). Not supported
    in channels and for messages sent on behalf
    of a Telegram Business account.

    Reference: https://core.telegram.org/bots/api#replykeyboardremove
    """

    remove_keyboard: bool
    selective: Optional[bool] = Field(default=None) 

class InlineKeyboardMarkup(BaseModel):
    """
    This object represents an inline keyboard that appears
    right next to the message it belongs to.

    Reference: https://core.telegram.org/bots/api#inlinekeyboardmarkup
    """

    inline_keyboard: List[List[InlineKeyboardButton]] 

class InlineKeyboardButton(BaseModel):
    """
    This object represents one button of an inline
    keyboard. Exactly one of the optional fields must
    be used to specify type of the button.

    Reference: https://core.telegram.org/bots/api#inlinekeyboardbutton
    """

    text: str
    url: Optional[str] = Field(default=None)
    callback_data: Optional[str] = Field(default=None)
    web_app: Optional[WebAppInfo] = Field(default=None)
    login_url: Optional[LoginUrl] = Field(default=None)
    switch_inline_query: Optional[str] = Field(default=None)
    switch_inline_query_current_chat: Optional[str] = Field(default=None)
    switch_inline_query_chosen_chat: Optional[SwitchInlineQueryChosenChat] = Field(default=None)
    copy_text: Optional[CopyTextButton] = Field(default=None)
    callback_game: Optional[CallbackGame] = Field(default=None)
    pay: Optional[bool] = Field(default=None) 

class LoginUrl(BaseModel):
    """
    This object represents a parameter of the inline
    keyboard button used to automatically authorize a user.
    Serves as a great replacement for the Telegram
    Login Widget when the user is coming from
    Telegram. All the user needs to do is
    tap/click a button and confirm that they want
    to log in:

    Reference: https://core.telegram.org/bots/api#loginurl
    """

    url: str
    forward_text: Optional[str] = Field(default=None)
    bot_username: Optional[str] = Field(default=None)
    request_write_access: Optional[bool] = Field(default=None) 

class SwitchInlineQueryChosenChat(BaseModel):
    """
    This object represents an inline button that switches
    the current user to inline mode in a
    chosen chat, with an optional default inline query.

    Reference: https://core.telegram.org/bots/api#switchinlinequerychosenchat
    """

    query: Optional[str] = Field(default=None)
    allow_user_chats: Optional[bool] = Field(default=None)
    allow_bot_chats: Optional[bool] = Field(default=None)
    allow_group_chats: Optional[bool] = Field(default=None)
    allow_channel_chats: Optional[bool] = Field(default=None) 

class CopyTextButton(BaseModel):
    """
    This object represents an inline keyboard button that
    copies specified text to the clipboard.

    Reference: https://core.telegram.org/bots/api#copytextbutton
    """

    text: str 

class CallbackQuery(BaseModel):
    """
    This object represents an incoming callback query from
    a callback button in an inline keyboard. If
    the button that originated the query was attached
    to a message sent by the bot, the
    field message will be present. If the button
    was attached to a message sent via the
    bot (in inline mode), the field inline_message_id will
    be present. Exactly one of the fields data
    or game_short_name will be present.

    Reference: https://core.telegram.org/bots/api#callbackquery
    """

    id: str
    from_user: User = Field(alias="from")
    chat_instance: str
    message: Optional[Message] = Field(default=None)
    inline_message_id: Optional[str] = Field(default=None)
    data: Optional[str] = Field(default=None)
    game_short_name: Optional[str] = Field(default=None) 

class ForceReply(BaseModel):
    """
    Upon receiving a message with this object, Telegram
    clients will display a reply interface to the
    user (act as if the user has selected
    the bot's message and tapped 'Reply'). This can
    be extremely useful if you want to create
    user-friendly step-by-step interfaces without having to sacrifice privacy
    mode. Not supported in channels and for messages
    sent on behalf of a Telegram Business account.

    Reference: https://core.telegram.org/bots/api#forcereply
    """

    force_reply: bool
    input_field_placeholder: Optional[str] = Field(default=None)
    selective: Optional[bool] = Field(default=None) 

class ChatPhoto(BaseModel):
    """
    This object represents a chat photo.

    Reference: https://core.telegram.org/bots/api#chatphoto
    """

    small_file_id: str
    small_file_unique_id: str
    big_file_id: str
    big_file_unique_id: str 

class ChatInviteLink(BaseModel):
    """
    Represents an invite link for a chat.

    Reference: https://core.telegram.org/bots/api#chatinvitelink
    """

    invite_link: str
    creator: User
    creates_join_request: bool
    is_primary: bool
    is_revoked: bool
    name: Optional[str] = Field(default=None)
    expire_date: Optional[int] = Field(default=None)
    member_limit: Optional[int] = Field(default=None)
    pending_join_request_count: Optional[int] = Field(default=None)
    subscription_period: Optional[int] = Field(default=None)
    subscription_price: Optional[int] = Field(default=None) 

class ChatAdministratorRights(BaseModel):
    """
    Represents the rights of an administrator in a
    chat.

    Reference: https://core.telegram.org/bots/api#chatadministratorrights
    """

    is_anonymous: bool
    can_manage_chat: bool
    can_delete_messages: bool
    can_manage_video_chats: bool
    can_restrict_members: bool
    can_promote_members: bool
    can_change_info: bool
    can_invite_users: bool
    can_post_stories: bool
    can_edit_stories: bool
    can_delete_stories: bool
    can_post_messages: Optional[bool] = Field(default=None)
    can_edit_messages: Optional[bool] = Field(default=None)
    can_pin_messages: Optional[bool] = Field(default=None)
    can_manage_topics: Optional[bool] = Field(default=None)
    can_manage_direct_messages: Optional[bool] = Field(default=None) 

class ChatMemberUpdated(BaseModel):
    """
    This object represents changes in the status of
    a chat member.

    Reference: https://core.telegram.org/bots/api#chatmemberupdated
    """

    chat: Chat
    from_user: User = Field(alias="from")
    date: int
    old_chat_member: ChatMember
    new_chat_member: ChatMember
    invite_link: Optional[ChatInviteLink] = Field(default=None)
    via_join_request: Optional[bool] = Field(default=None)
    via_chat_folder_invite_link: Optional[bool] = Field(default=None) 

class ChatMemberOwner(BaseModel):
    """
    Represents a chat member that owns the chat
    and has all administrator privileges.

    Reference: https://core.telegram.org/bots/api#chatmemberowner
    """

    status: Literal["creator"] = "creator"
    user: User
    is_anonymous: bool
    custom_title: Optional[str] = Field(default=None) 

class ChatMemberAdministrator(BaseModel):
    """
    Represents a chat member that has some additional
    privileges.

    Reference: https://core.telegram.org/bots/api#chatmemberadministrator
    """

    status: Literal["administrator"] = "administrator"
    user: User
    can_be_edited: bool
    is_anonymous: bool
    can_manage_chat: bool
    can_delete_messages: bool
    can_manage_video_chats: bool
    can_restrict_members: bool
    can_promote_members: bool
    can_change_info: bool
    can_invite_users: bool
    can_post_stories: bool
    can_edit_stories: bool
    can_delete_stories: bool
    can_post_messages: Optional[bool] = Field(default=None)
    can_edit_messages: Optional[bool] = Field(default=None)
    can_pin_messages: Optional[bool] = Field(default=None)
    can_manage_topics: Optional[bool] = Field(default=None)
    can_manage_direct_messages: Optional[bool] = Field(default=None)
    custom_title: Optional[str] = Field(default=None) 

class ChatMemberMember(BaseModel):
    """
    Represents a chat member that has no additional
    privileges or restrictions.

    Reference: https://core.telegram.org/bots/api#chatmembermember
    """

    status: Literal["member"] = "member"
    user: User
    until_date: Optional[int] = Field(default=None) 

class ChatMemberRestricted(BaseModel):
    """
    Represents a chat member that is under certain
    restrictions in the chat. Supergroups only.

    Reference: https://core.telegram.org/bots/api#chatmemberrestricted
    """

    status: Literal["restricted"] = "restricted"
    user: User
    is_member: bool
    can_send_messages: bool
    can_send_audios: bool
    can_send_documents: bool
    can_send_photos: bool
    can_send_videos: bool
    can_send_video_notes: bool
    can_send_voice_notes: bool
    can_send_polls: bool
    can_send_other_messages: bool
    can_add_web_page_previews: bool
    can_change_info: bool
    can_invite_users: bool
    can_pin_messages: bool
    can_manage_topics: bool
    until_date: int 

class ChatMemberLeft(BaseModel):
    """
    Represents a chat member that isn't currently a
    member of the chat, but may join it
    themselves.

    Reference: https://core.telegram.org/bots/api#chatmemberleft
    """

    status: Literal["left"] = "left"
    user: User 

class ChatMemberBanned(BaseModel):
    """
    Represents a chat member that was banned in
    the chat and can't return to the chat
    or view chat messages.

    Reference: https://core.telegram.org/bots/api#chatmemberbanned
    """

    status: Literal["kicked"] = "kicked"
    user: User
    until_date: int 

class ChatJoinRequest(BaseModel):
    """
    Represents a join request sent to a chat.

    Reference: https://core.telegram.org/bots/api#chatjoinrequest
    """

    chat: Chat
    from_user: User = Field(alias="from")
    user_chat_id: int
    date: int
    bio: Optional[str] = Field(default=None)
    invite_link: Optional[ChatInviteLink] = Field(default=None) 

class ChatPermissions(BaseModel):
    """
    Describes actions that a non-administrator user is allowed
    to take in a chat.

    Reference: https://core.telegram.org/bots/api#chatpermissions
    """

    can_send_messages: Optional[bool] = Field(default=None)
    can_send_audios: Optional[bool] = Field(default=None)
    can_send_documents: Optional[bool] = Field(default=None)
    can_send_photos: Optional[bool] = Field(default=None)
    can_send_videos: Optional[bool] = Field(default=None)
    can_send_video_notes: Optional[bool] = Field(default=None)
    can_send_voice_notes: Optional[bool] = Field(default=None)
    can_send_polls: Optional[bool] = Field(default=None)
    can_send_other_messages: Optional[bool] = Field(default=None)
    can_add_web_page_previews: Optional[bool] = Field(default=None)
    can_change_info: Optional[bool] = Field(default=None)
    can_invite_users: Optional[bool] = Field(default=None)
    can_pin_messages: Optional[bool] = Field(default=None)
    can_manage_topics: Optional[bool] = Field(default=None) 

class Birthdate(BaseModel):
    """
    Describes the birthdate of a user.

    Reference: https://core.telegram.org/bots/api#birthdate
    """

    day: int
    month: int
    year: Optional[int] = Field(default=None) 

class BusinessIntro(BaseModel):
    """
    Contains information about the start page settings of
    a Telegram Business account.

    Reference: https://core.telegram.org/bots/api#businessintro
    """

    title: Optional[str] = Field(default=None)
    message: Optional[str] = Field(default=None)
    sticker: Optional[Sticker] = Field(default=None) 

class BusinessLocation(BaseModel):
    """
    Contains information about the location of a Telegram
    Business account.

    Reference: https://core.telegram.org/bots/api#businesslocation
    """

    address: str
    location: Optional[Location] = Field(default=None) 

class BusinessOpeningHoursInterval(BaseModel):
    """
    Describes an interval of time during which a
    business is open.

    Reference: https://core.telegram.org/bots/api#businessopeninghoursinterval
    """

    opening_minute: int
    closing_minute: int 

class BusinessOpeningHours(BaseModel):
    """
    Describes the opening hours of a business.

    Reference: https://core.telegram.org/bots/api#businessopeninghours
    """

    time_zone_name: str
    opening_hours: List[BusinessOpeningHoursInterval] 

class StoryAreaPosition(BaseModel):
    """
    Describes the position of a clickable area within
    a story.

    Reference: https://core.telegram.org/bots/api#storyareaposition
    """

    x_percentage: float
    y_percentage: float
    width_percentage: float
    height_percentage: float
    rotation_angle: float
    corner_radius_percentage: float 

class LocationAddress(BaseModel):
    """
    Describes the physical address of a location.

    Reference: https://core.telegram.org/bots/api#locationaddress
    """

    country_code: str
    state: Optional[str] = Field(default=None)
    city: Optional[str] = Field(default=None)
    street: Optional[str] = Field(default=None) 

class StoryAreaTypeLocation(BaseModel):
    """
    Describes a story area pointing to a location.
    Currently, a story can have up to 10
    location areas.

    Reference: https://core.telegram.org/bots/api#storyareatypelocation
    """

    type: Literal["location"] = "location"
    latitude: float
    longitude: float
    address: Optional[LocationAddress] = Field(default=None) 

class StoryAreaTypeSuggestedReaction(BaseModel):
    """
    Describes a story area pointing to a suggested
    reaction. Currently, a story can have up to
    5 suggested reaction areas.

    Reference: https://core.telegram.org/bots/api#storyareatypesuggestedreaction
    """

    type: Literal["suggested_reaction"] = "suggested_reaction"
    reaction_type: ReactionType
    is_dark: Optional[bool] = Field(default=None)
    is_flipped: Optional[bool] = Field(default=None) 

class StoryAreaTypeLink(BaseModel):
    """
    Describes a story area pointing to an HTTP
    or tg:// link. Currently, a story can have
    up to 3 link areas.

    Reference: https://core.telegram.org/bots/api#storyareatypelink
    """

    type: Literal["link"] = "link"
    url: str 

class StoryAreaTypeWeather(BaseModel):
    """
    Describes a story area containing weather information. Currently,
    a story can have up to 3 weather
    areas.

    Reference: https://core.telegram.org/bots/api#storyareatypeweather
    """

    type: Literal["weather"] = "weather"
    temperature: float
    emoji: str
    background_color: int 

class StoryAreaTypeUniqueGift(BaseModel):
    """
    Describes a story area pointing to a unique
    gift. Currently, a story can have at most
    1 unique gift area.

    Reference: https://core.telegram.org/bots/api#storyareatypeuniquegift
    """

    type: Literal["unique_gift"] = "unique_gift"
    name: str 

class StoryArea(BaseModel):
    """
    Describes a clickable area on a story media.

    Reference: https://core.telegram.org/bots/api#storyarea
    """

    position: StoryAreaPosition
    type: StoryAreaType 

class ChatLocation(BaseModel):
    """
    Represents a location to which a chat is
    connected.

    Reference: https://core.telegram.org/bots/api#chatlocation
    """

    location: Location
    address: str 

class ReactionTypeEmoji(BaseModel):
    """
    The reaction is based on an emoji.

    Reference: https://core.telegram.org/bots/api#reactiontypeemoji
    """

    type: Literal["emoji"] = "emoji"
    emoji: str 

class ReactionTypeCustomEmoji(BaseModel):
    """
    The reaction is based on a custom emoji.

    Reference: https://core.telegram.org/bots/api#reactiontypecustomemoji
    """

    type: Literal["custom_emoji"] = "custom_emoji"
    custom_emoji_id: str 

class ReactionTypePaid(BaseModel):
    """
    The reaction is paid.

    Reference: https://core.telegram.org/bots/api#reactiontypepaid
    """

    type: Literal["paid"] = "paid" 

class ReactionCount(BaseModel):
    """
    Represents a reaction added to a message along
    with the number of times it was added.

    Reference: https://core.telegram.org/bots/api#reactioncount
    """

    type: ReactionType
    total_count: int 

class MessageReactionUpdated(BaseModel):
    """
    This object represents a change of a reaction
    on a message performed by a user.

    Reference: https://core.telegram.org/bots/api#messagereactionupdated
    """

    chat: Chat
    message_id: int
    date: int
    old_reaction: List[ReactionType]
    new_reaction: List[ReactionType]
    user: Optional[User] = Field(default=None)
    actor_chat: Optional[Chat] = Field(default=None) 

class MessageReactionCountUpdated(BaseModel):
    """
    This object represents reaction changes on a message
    with anonymous reactions.

    Reference: https://core.telegram.org/bots/api#messagereactioncountupdated
    """

    chat: Chat
    message_id: int
    date: int
    reactions: List[ReactionCount] 

class ForumTopic(BaseModel):
    """
    This object represents a forum topic.

    Reference: https://core.telegram.org/bots/api#forumtopic
    """

    message_thread_id: int
    name: str
    icon_color: int
    icon_custom_emoji_id: Optional[str] = Field(default=None) 

class Gift(BaseModel):
    """
    This object represents a gift that can be
    sent by the bot.

    Reference: https://core.telegram.org/bots/api#gift
    """

    id: str
    sticker: Sticker
    star_count: int
    upgrade_star_count: Optional[int] = Field(default=None)
    total_count: Optional[int] = Field(default=None)
    remaining_count: Optional[int] = Field(default=None)
    publisher_chat: Optional[Chat] = Field(default=None) 

class Gifts(BaseModel):
    """
    This object represent a list of gifts.

    Reference: https://core.telegram.org/bots/api#gifts
    """

    gifts: List[Gift] 

class UniqueGiftModel(BaseModel):
    """
    This object describes the model of a unique
    gift.

    Reference: https://core.telegram.org/bots/api#uniquegiftmodel
    """

    name: str
    sticker: Sticker
    rarity_per_mille: int 

class UniqueGiftSymbol(BaseModel):
    """
    This object describes the symbol shown on the
    pattern of a unique gift.

    Reference: https://core.telegram.org/bots/api#uniquegiftsymbol
    """

    name: str
    sticker: Sticker
    rarity_per_mille: int 

class UniqueGiftBackdropColors(BaseModel):
    """
    This object describes the colors of the backdrop
    of a unique gift.

    Reference: https://core.telegram.org/bots/api#uniquegiftbackdropcolors
    """

    center_color: int
    edge_color: int
    symbol_color: int
    text_color: int 

class UniqueGiftBackdrop(BaseModel):
    """
    This object describes the backdrop of a unique
    gift.

    Reference: https://core.telegram.org/bots/api#uniquegiftbackdrop
    """

    name: str
    colors: UniqueGiftBackdropColors
    rarity_per_mille: int 

class UniqueGift(BaseModel):
    """
    This object describes a unique gift that was
    upgraded from a regular gift.

    Reference: https://core.telegram.org/bots/api#uniquegift
    """

    base_name: str
    name: str
    number: int
    model: UniqueGiftModel
    symbol: UniqueGiftSymbol
    backdrop: UniqueGiftBackdrop
    publisher_chat: Optional[Chat] = Field(default=None) 

class GiftInfo(BaseModel):
    """
    Describes a service message about a regular gift
    that was sent or received.

    Reference: https://core.telegram.org/bots/api#giftinfo
    """

    gift: Gift
    owned_gift_id: Optional[str] = Field(default=None)
    convert_star_count: Optional[int] = Field(default=None)
    prepaid_upgrade_star_count: Optional[int] = Field(default=None)
    can_be_upgraded: Optional[bool] = Field(default=None)
    text: Optional[str] = Field(default=None)
    entities: Optional[List[MessageEntity]] = Field(default=None)
    is_private: Optional[bool] = Field(default=None) 

class UniqueGiftInfo(BaseModel):
    """
    Describes a service message about a unique gift
    that was sent or received.

    Reference: https://core.telegram.org/bots/api#uniquegiftinfo
    """

    gift: UniqueGift
    origin: str
    last_resale_star_count: Optional[int] = Field(default=None)
    owned_gift_id: Optional[str] = Field(default=None)
    transfer_star_count: Optional[int] = Field(default=None)
    next_transfer_date: Optional[int] = Field(default=None) 

class OwnedGiftRegular(BaseModel):
    """
    Describes a regular gift owned by a user
    or a chat.

    Reference: https://core.telegram.org/bots/api#ownedgiftregular
    """

    type: Literal["regular"] = "regular"
    gift: Gift
    send_date: int
    owned_gift_id: Optional[str] = Field(default=None)
    sender_user: Optional[User] = Field(default=None)
    text: Optional[str] = Field(default=None)
    entities: Optional[List[MessageEntity]] = Field(default=None)
    is_private: Optional[bool] = Field(default=None)
    is_saved: Optional[bool] = Field(default=None)
    can_be_upgraded: Optional[bool] = Field(default=None)
    was_refunded: Optional[bool] = Field(default=None)
    convert_star_count: Optional[int] = Field(default=None)
    prepaid_upgrade_star_count: Optional[int] = Field(default=None) 

class OwnedGiftUnique(BaseModel):
    """
    Describes a unique gift received and owned by
    a user or a chat.

    Reference: https://core.telegram.org/bots/api#ownedgiftunique
    """

    type: Literal["unique"] = "unique"
    gift: UniqueGift
    send_date: int
    owned_gift_id: Optional[str] = Field(default=None)
    sender_user: Optional[User] = Field(default=None)
    is_saved: Optional[bool] = Field(default=None)
    can_be_transferred: Optional[bool] = Field(default=None)
    transfer_star_count: Optional[int] = Field(default=None)
    next_transfer_date: Optional[int] = Field(default=None) 

class OwnedGifts(BaseModel):
    """
    Contains the list of gifts received and owned
    by a user or a chat.

    Reference: https://core.telegram.org/bots/api#ownedgifts
    """

    total_count: int
    gifts: List[OwnedGift]
    next_offset: Optional[str] = Field(default=None) 

class AcceptedGiftTypes(BaseModel):
    """
    This object describes the types of gifts that
    can be gifted to a user or a
    chat.

    Reference: https://core.telegram.org/bots/api#acceptedgifttypes
    """

    unlimited_gifts: bool
    limited_gifts: bool
    unique_gifts: bool
    premium_subscription: bool 

class StarAmount(BaseModel):
    """
    Describes an amount of Telegram Stars.

    Reference: https://core.telegram.org/bots/api#staramount
    """

    amount: int
    nanostar_amount: Optional[int] = Field(default=None) 

class BotCommand(BaseModel):
    """
    This object represents a bot command.

    Reference: https://core.telegram.org/bots/api#botcommand
    """

    command: str
    description: str 

class BotCommandScopeDefault(BaseModel):
    """
    Represents the default scope of bot commands. Default
    commands are used if no commands with a
    narrower scope are specified for the user.

    Reference: https://core.telegram.org/bots/api#botcommandscopedefault
    """

    type: Literal["default"] = "default" 

class BotCommandScopeAllPrivateChats(BaseModel):
    """
    Represents the scope of bot commands, covering all
    private chats.

    Reference: https://core.telegram.org/bots/api#botcommandscopeallprivatechats
    """

    type: Literal["all_private_chats"] = "all_private_chats" 

class BotCommandScopeAllGroupChats(BaseModel):
    """
    Represents the scope of bot commands, covering all
    group and supergroup chats.

    Reference: https://core.telegram.org/bots/api#botcommandscopeallgroupchats
    """

    type: Literal["all_group_chats"] = "all_group_chats" 

class BotCommandScopeAllChatAdministrators(BaseModel):
    """
    Represents the scope of bot commands, covering all
    group and supergroup chat administrators.

    Reference: https://core.telegram.org/bots/api#botcommandscopeallchatadministrators
    """

    type: Literal["all_chat_administrators"] = "all_chat_administrators" 

class BotCommandScopeChat(BaseModel):
    """
    Represents the scope of bot commands, covering a
    specific chat.

    Reference: https://core.telegram.org/bots/api#botcommandscopechat
    """

    type: Literal["chat"] = "chat"
    chat_id: Union[int, str] 

class BotCommandScopeChatAdministrators(BaseModel):
    """
    Represents the scope of bot commands, covering all
    administrators of a specific group or supergroup chat.

    Reference: https://core.telegram.org/bots/api#botcommandscopechatadministrators
    """

    type: Literal["chat_administrators"] = "chat_administrators"
    chat_id: Union[int, str] 

class BotCommandScopeChatMember(BaseModel):
    """
    Represents the scope of bot commands, covering a
    specific member of a group or supergroup chat.

    Reference: https://core.telegram.org/bots/api#botcommandscopechatmember
    """

    type: Literal["chat_member"] = "chat_member"
    chat_id: Union[int, str]
    user_id: int 

class BotName(BaseModel):
    """
    This object represents the bot's name.

    Reference: https://core.telegram.org/bots/api#botname
    """

    name: str 

class BotDescription(BaseModel):
    """
    This object represents the bot's description.

    Reference: https://core.telegram.org/bots/api#botdescription
    """

    description: str 

class BotShortDescription(BaseModel):
    """
    This object represents the bot's short description.

    Reference: https://core.telegram.org/bots/api#botshortdescription
    """

    short_description: str 

class MenuButtonCommands(BaseModel):
    """
    Represents a menu button, which opens the bot's
    list of commands.

    Reference: https://core.telegram.org/bots/api#menubuttoncommands
    """

    type: Literal["commands"] = "commands" 

class MenuButtonWebApp(BaseModel):
    """
    Represents a menu button, which launches a Web
    App.

    Reference: https://core.telegram.org/bots/api#menubuttonwebapp
    """

    type: Literal["web_app"] = "web_app"
    text: str
    web_app: WebAppInfo 

class MenuButtonDefault(BaseModel):
    """
    Describes that no specific value for the menu
    button was set.

    Reference: https://core.telegram.org/bots/api#menubuttondefault
    """

    type: Literal["default"] = "default" 

class ChatBoostSourcePremium(BaseModel):
    """
    The boost was obtained by subscribing to Telegram
    Premium or by gifting a Telegram Premium subscription
    to another user.

    Reference: https://core.telegram.org/bots/api#chatboostsourcepremium
    """

    source: Literal["premium"] = "premium"
    user: User 

class ChatBoostSourceGiftCode(BaseModel):
    """
    The boost was obtained by the creation of
    Telegram Premium gift codes to boost a chat.
    Each such code boosts the chat 4 times
    for the duration of the corresponding Telegram Premium
    subscription.

    Reference: https://core.telegram.org/bots/api#chatboostsourcegiftcode
    """

    source: Literal["gift_code"] = "gift_code"
    user: User 

class ChatBoostSourceGiveaway(BaseModel):
    """
    The boost was obtained by the creation of
    a Telegram Premium or a Telegram Star giveaway.
    This boosts the chat 4 times for the
    duration of the corresponding Telegram Premium subscription for
    Telegram Premium giveaways and prize_star_count / 500 times
    for one year for Telegram Star giveaways.

    Reference: https://core.telegram.org/bots/api#chatboostsourcegiveaway
    """

    source: Literal["giveaway"] = "giveaway"
    giveaway_message_id: int
    user: Optional[User] = Field(default=None)
    prize_star_count: Optional[int] = Field(default=None)
    is_unclaimed: Optional[bool] = Field(default=None) 

class ChatBoost(BaseModel):
    """
    This object contains information about a chat boost.

    Reference: https://core.telegram.org/bots/api#chatboost
    """

    boost_id: str
    add_date: int
    expiration_date: int
    source: ChatBoostSource 

class ChatBoostUpdated(BaseModel):
    """
    This object represents a boost added to a
    chat or changed.

    Reference: https://core.telegram.org/bots/api#chatboostupdated
    """

    chat: Chat
    boost: ChatBoost 

class ChatBoostRemoved(BaseModel):
    """
    This object represents a boost removed from a
    chat.

    Reference: https://core.telegram.org/bots/api#chatboostremoved
    """

    chat: Chat
    boost_id: str
    remove_date: int
    source: ChatBoostSource 

class UserChatBoosts(BaseModel):
    """
    This object represents a list of boosts added
    to a chat by a user.

    Reference: https://core.telegram.org/bots/api#userchatboosts
    """

    boosts: List[ChatBoost] 

class BusinessBotRights(BaseModel):
    """
    Represents the rights of a business bot.

    Reference: https://core.telegram.org/bots/api#businessbotrights
    """

    can_reply: Optional[bool] = Field(default=None)
    can_read_messages: Optional[bool] = Field(default=None)
    can_delete_sent_messages: Optional[bool] = Field(default=None)
    can_delete_all_messages: Optional[bool] = Field(default=None)
    can_edit_name: Optional[bool] = Field(default=None)
    can_edit_bio: Optional[bool] = Field(default=None)
    can_edit_profile_photo: Optional[bool] = Field(default=None)
    can_edit_username: Optional[bool] = Field(default=None)
    can_change_gift_settings: Optional[bool] = Field(default=None)
    can_view_gifts_and_stars: Optional[bool] = Field(default=None)
    can_convert_gifts_to_stars: Optional[bool] = Field(default=None)
    can_transfer_and_upgrade_gifts: Optional[bool] = Field(default=None)
    can_transfer_stars: Optional[bool] = Field(default=None)
    can_manage_stories: Optional[bool] = Field(default=None) 

class BusinessConnection(BaseModel):
    """
    Describes the connection of the bot with a
    business account.

    Reference: https://core.telegram.org/bots/api#businessconnection
    """

    id: str
    user: User
    user_chat_id: int
    date: int
    is_enabled: bool
    rights: Optional[BusinessBotRights] = Field(default=None) 

class BusinessMessagesDeleted(BaseModel):
    """
    This object is received when messages are deleted
    from a connected business account.

    Reference: https://core.telegram.org/bots/api#businessmessagesdeleted
    """

    business_connection_id: str
    chat: Chat
    message_ids: List[int] 

class ResponseParameters(BaseModel):
    """
    Describes why a request was unsuccessful.

    Reference: https://core.telegram.org/bots/api#responseparameters
    """

    migrate_to_chat_id: Optional[int] = Field(default=None)
    retry_after: Optional[int] = Field(default=None) 

class InputMediaPhoto(BaseModel):
    """
    Represents a photo to be sent.

    Reference: https://core.telegram.org/bots/api#inputmediaphoto
    """

    type: Literal["photo"] = "photo"
    media: str
    caption: Optional[str] = Field(default=None)
    parse_mode: Optional[str] = Field(default="HTML")
    caption_entities: Optional[List[MessageEntity]] = Field(default=None)
    show_caption_above_media: Optional[bool] = Field(default=None)
    has_spoiler: Optional[bool] = Field(default=None) 

class InputMediaVideo(BaseModel):
    """
    Represents a video to be sent.

    Reference: https://core.telegram.org/bots/api#inputmediavideo
    """

    type: Literal["video"] = "video"
    media: str
    thumbnail: Optional[str] = Field(default=None)
    cover: Optional[str] = Field(default=None)
    start_timestamp: Optional[int] = Field(default=None)
    caption: Optional[str] = Field(default=None)
    parse_mode: Optional[str] = Field(default="HTML")
    caption_entities: Optional[List[MessageEntity]] = Field(default=None)
    show_caption_above_media: Optional[bool] = Field(default=None)
    width: Optional[int] = Field(default=None)
    height: Optional[int] = Field(default=None)
    duration: Optional[int] = Field(default=None)
    supports_streaming: Optional[bool] = Field(default=None)
    has_spoiler: Optional[bool] = Field(default=None) 

class InputMediaAnimation(BaseModel):
    """
    Represents an animation file (GIF or H.264/MPEG-4 AVC
    video without sound) to be sent.

    Reference: https://core.telegram.org/bots/api#inputmediaanimation
    """

    type: Literal["animation"] = "animation"
    media: str
    thumbnail: Optional[str] = Field(default=None)
    caption: Optional[str] = Field(default=None)
    parse_mode: Optional[str] = Field(default="HTML")
    caption_entities: Optional[List[MessageEntity]] = Field(default=None)
    show_caption_above_media: Optional[bool] = Field(default=None)
    width: Optional[int] = Field(default=None)
    height: Optional[int] = Field(default=None)
    duration: Optional[int] = Field(default=None)
    has_spoiler: Optional[bool] = Field(default=None) 

class InputMediaAudio(BaseModel):
    """
    Represents an audio file to be treated as
    music to be sent.

    Reference: https://core.telegram.org/bots/api#inputmediaaudio
    """

    type: Literal["audio"] = "audio"
    media: str
    thumbnail: Optional[str] = Field(default=None)
    caption: Optional[str] = Field(default=None)
    parse_mode: Optional[str] = Field(default="HTML")
    caption_entities: Optional[List[MessageEntity]] = Field(default=None)
    duration: Optional[int] = Field(default=None)
    performer: Optional[str] = Field(default=None)
    title: Optional[str] = Field(default=None) 

class InputMediaDocument(BaseModel):
    """
    Represents a general file to be sent.

    Reference: https://core.telegram.org/bots/api#inputmediadocument
    """

    type: Literal["document"] = "document"
    media: str
    thumbnail: Optional[str] = Field(default=None)
    caption: Optional[str] = Field(default=None)
    parse_mode: Optional[str] = Field(default="HTML")
    caption_entities: Optional[List[MessageEntity]] = Field(default=None)
    disable_content_type_detection: Optional[bool] = Field(default=None) 

class InputFile(BaseModel):
    """
    This object represents the contents of a file
    to be uploaded. Must be posted using multipart/form-data
    in the usual way that files are uploaded
    via the browser.

    Reference: https://core.telegram.org/bots/api#inputfile
    """

    pass
 

class InputPaidMediaPhoto(BaseModel):
    """
    The paid media to send is a photo.

    Reference: https://core.telegram.org/bots/api#inputpaidmediaphoto
    """

    type: Literal["photo"] = "photo"
    media: str 

class InputPaidMediaVideo(BaseModel):
    """
    The paid media to send is a video.

    Reference: https://core.telegram.org/bots/api#inputpaidmediavideo
    """

    type: Literal["video"] = "video"
    media: str
    thumbnail: Optional[str] = Field(default=None)
    cover: Optional[str] = Field(default=None)
    start_timestamp: Optional[int] = Field(default=None)
    width: Optional[int] = Field(default=None)
    height: Optional[int] = Field(default=None)
    duration: Optional[int] = Field(default=None)
    supports_streaming: Optional[bool] = Field(default=None) 

class InputProfilePhotoStatic(BaseModel):
    """
    A static profile photo in the .JPG format.

    Reference: https://core.telegram.org/bots/api#inputprofilephotostatic
    """

    type: Literal["static"] = "static"
    photo: str 

class InputProfilePhotoAnimated(BaseModel):
    """
    An animated profile photo in the MPEG4 format.

    Reference: https://core.telegram.org/bots/api#inputprofilephotoanimated
    """

    type: Literal["animated"] = "animated"
    animation: str
    main_frame_timestamp: Optional[float] = Field(default=None) 

class InputStoryContentPhoto(BaseModel):
    """
    Describes a photo to post as a story.

    Reference: https://core.telegram.org/bots/api#inputstorycontentphoto
    """

    type: Literal["photo"] = "photo"
    photo: str 

class InputStoryContentVideo(BaseModel):
    """
    Describes a video to post as a story.

    Reference: https://core.telegram.org/bots/api#inputstorycontentvideo
    """

    type: Literal["video"] = "video"
    video: str
    duration: Optional[float] = Field(default=None)
    cover_frame_timestamp: Optional[float] = Field(default=None)
    is_animation: Optional[bool] = Field(default=None) 

class Sticker(BaseModel):
    """
    This object represents a sticker.

    Reference: https://core.telegram.org/bots/api#sticker
    """

    file_id: str
    file_unique_id: str
    type: str
    width: int
    height: int
    is_animated: bool
    is_video: bool
    thumbnail: Optional[PhotoSize] = Field(default=None)
    emoji: Optional[str] = Field(default=None)
    set_name: Optional[str] = Field(default=None)
    premium_animation: Optional[File] = Field(default=None)
    mask_position: Optional[MaskPosition] = Field(default=None)
    custom_emoji_id: Optional[str] = Field(default=None)
    needs_repainting: Optional[bool] = Field(default=None)
    file_size: Optional[int] = Field(default=None) 

class StickerSet(BaseModel):
    """
    This object represents a sticker set.

    Reference: https://core.telegram.org/bots/api#stickerset
    """

    name: str
    title: str
    sticker_type: str
    stickers: List[Sticker]
    thumbnail: Optional[PhotoSize] = Field(default=None) 

class MaskPosition(BaseModel):
    """
    This object describes the position on faces where
    a mask should be placed by default.

    Reference: https://core.telegram.org/bots/api#maskposition
    """

    point: str
    x_shift: float
    y_shift: float
    scale: float 

class InputSticker(BaseModel):
    """
    This object describes a sticker to be added
    to a sticker set.

    Reference: https://core.telegram.org/bots/api#inputsticker
    """

    sticker: str
    format: str
    emoji_list: List[str]
    mask_position: Optional[MaskPosition] = Field(default=None)
    keywords: Optional[List[str]] = Field(default=None) 

class InlineQuery(BaseModel):
    """
    This object represents an incoming inline query. When
    the user sends an empty query, your bot
    could return some default or trending results.

    Reference: https://core.telegram.org/bots/api#inlinequery
    """

    id: str
    from_user: User = Field(alias="from")
    query: str
    offset: str
    chat_type: Optional[str] = Field(default=None)
    location: Optional[Location] = Field(default=None) 

class InlineQueryResultsButton(BaseModel):
    """
    This object represents a button to be shown
    above inline query results. You must use exactly
    one of the optional fields.

    Reference: https://core.telegram.org/bots/api#inlinequeryresultsbutton
    """

    text: str
    web_app: Optional[WebAppInfo] = Field(default=None)
    start_parameter: Optional[str] = Field(default=None) 

class InlineQueryResultArticle(BaseModel):
    """
    Represents a link to an article or web
    page.

    Reference: https://core.telegram.org/bots/api#inlinequeryresultarticle
    """

    type: Literal["article"] = "article"
    id: str
    title: str
    input_message_content: InputMessageContent
    reply_markup: Optional[InlineKeyboardMarkup] = Field(default=None)
    url: Optional[str] = Field(default=None)
    description: Optional[str] = Field(default=None)
    thumbnail_url: Optional[str] = Field(default=None)
    thumbnail_width: Optional[int] = Field(default=None)
    thumbnail_height: Optional[int] = Field(default=None) 

class InlineQueryResultPhoto(BaseModel):
    """
    Represents a link to a photo. By default,
    this photo will be sent by the user
    with optional caption. Alternatively, you can use input_message_content
    to send a message with the specified content
    instead of the photo.

    Reference: https://core.telegram.org/bots/api#inlinequeryresultphoto
    """

    type: Literal["photo"] = "photo"
    id: str
    photo_url: str
    thumbnail_url: str
    photo_width: Optional[int] = Field(default=None)
    photo_height: Optional[int] = Field(default=None)
    title: Optional[str] = Field(default=None)
    description: Optional[str] = Field(default=None)
    caption: Optional[str] = Field(default=None)
    parse_mode: Optional[str] = Field(default="HTML")
    caption_entities: Optional[List[MessageEntity]] = Field(default=None)
    show_caption_above_media: Optional[bool] = Field(default=None)
    reply_markup: Optional[InlineKeyboardMarkup] = Field(default=None)
    input_message_content: Optional[InputMessageContent] = Field(default=None) 

class InlineQueryResultGif(BaseModel):
    """
    Represents a link to an animated GIF file.
    By default, this animated GIF file will be
    sent by the user with optional caption. Alternatively,
    you can use input_message_content to send a message
    with the specified content instead of the animation.

    Reference: https://core.telegram.org/bots/api#inlinequeryresultgif
    """

    type: Literal["gif"] = "gif"
    id: str
    gif_url: str
    thumbnail_url: str
    gif_width: Optional[int] = Field(default=None)
    gif_height: Optional[int] = Field(default=None)
    gif_duration: Optional[int] = Field(default=None)
    thumbnail_mime_type: Optional[str] = Field(default=None)
    title: Optional[str] = Field(default=None)
    caption: Optional[str] = Field(default=None)
    parse_mode: Optional[str] = Field(default="HTML")
    caption_entities: Optional[List[MessageEntity]] = Field(default=None)
    show_caption_above_media: Optional[bool] = Field(default=None)
    reply_markup: Optional[InlineKeyboardMarkup] = Field(default=None)
    input_message_content: Optional[InputMessageContent] = Field(default=None) 

class InlineQueryResultMpeg4Gif(BaseModel):
    """
    Represents a link to a video animation (H.264/MPEG-4
    AVC video without sound). By default, this animated
    MPEG-4 file will be sent by the user
    with optional caption. Alternatively, you can use input_message_content
    to send a message with the specified content
    instead of the animation.

    Reference: https://core.telegram.org/bots/api#inlinequeryresultmpeg4gif
    """

    type: Literal["mpeg4_gif"] = "mpeg4_gif"
    id: str
    mpeg4_url: str
    thumbnail_url: str
    mpeg4_width: Optional[int] = Field(default=None)
    mpeg4_height: Optional[int] = Field(default=None)
    mpeg4_duration: Optional[int] = Field(default=None)
    thumbnail_mime_type: Optional[str] = Field(default=None)
    title: Optional[str] = Field(default=None)
    caption: Optional[str] = Field(default=None)
    parse_mode: Optional[str] = Field(default="HTML")
    caption_entities: Optional[List[MessageEntity]] = Field(default=None)
    show_caption_above_media: Optional[bool] = Field(default=None)
    reply_markup: Optional[InlineKeyboardMarkup] = Field(default=None)
    input_message_content: Optional[InputMessageContent] = Field(default=None) 

class InlineQueryResultVideo(BaseModel):
    """
    Represents a link to a page containing an
    embedded video player or a video file. By
    default, this video file will be sent by
    the user with an optional caption. Alternatively, you
    can use input_message_content to send a message with
    the specified content instead of the video.

    Reference: https://core.telegram.org/bots/api#inlinequeryresultvideo
    """

    type: Literal["video"] = "video"
    id: str
    video_url: str
    mime_type: str
    thumbnail_url: str
    title: str
    caption: Optional[str] = Field(default=None)
    parse_mode: Optional[str] = Field(default="HTML")
    caption_entities: Optional[List[MessageEntity]] = Field(default=None)
    show_caption_above_media: Optional[bool] = Field(default=None)
    video_width: Optional[int] = Field(default=None)
    video_height: Optional[int] = Field(default=None)
    video_duration: Optional[int] = Field(default=None)
    description: Optional[str] = Field(default=None)
    reply_markup: Optional[InlineKeyboardMarkup] = Field(default=None)
    input_message_content: Optional[InputMessageContent] = Field(default=None) 

class InlineQueryResultAudio(BaseModel):
    """
    Represents a link to an MP3 audio file.
    By default, this audio file will be sent
    by the user. Alternatively, you can use input_message_content
    to send a message with the specified content
    instead of the audio.

    Reference: https://core.telegram.org/bots/api#inlinequeryresultaudio
    """

    type: Literal["audio"] = "audio"
    id: str
    audio_url: str
    title: str
    caption: Optional[str] = Field(default=None)
    parse_mode: Optional[str] = Field(default="HTML")
    caption_entities: Optional[List[MessageEntity]] = Field(default=None)
    performer: Optional[str] = Field(default=None)
    audio_duration: Optional[int] = Field(default=None)
    reply_markup: Optional[InlineKeyboardMarkup] = Field(default=None)
    input_message_content: Optional[InputMessageContent] = Field(default=None) 

class InlineQueryResultVoice(BaseModel):
    """
    Represents a link to a voice recording in
    an .OGG container encoded with OPUS. By default,
    this voice recording will be sent by the
    user. Alternatively, you can use input_message_content to send
    a message with the specified content instead of
    the the voice message.

    Reference: https://core.telegram.org/bots/api#inlinequeryresultvoice
    """

    type: Literal["voice"] = "voice"
    id: str
    voice_url: str
    title: str
    caption: Optional[str] = Field(default=None)
    parse_mode: Optional[str] = Field(default="HTML")
    caption_entities: Optional[List[MessageEntity]] = Field(default=None)
    voice_duration: Optional[int] = Field(default=None)
    reply_markup: Optional[InlineKeyboardMarkup] = Field(default=None)
    input_message_content: Optional[InputMessageContent] = Field(default=None) 

class InlineQueryResultDocument(BaseModel):
    """
    Represents a link to a file. By default,
    this file will be sent by the user
    with an optional caption. Alternatively, you can use
    input_message_content to send a message with the specified
    content instead of the file. Currently, only .PDF
    and .ZIP files can be sent using this
    method.

    Reference: https://core.telegram.org/bots/api#inlinequeryresultdocument
    """

    type: Literal["document"] = "document"
    id: str
    title: str
    document_url: str
    mime_type: str
    caption: Optional[str] = Field(default=None)
    parse_mode: Optional[str] = Field(default="HTML")
    caption_entities: Optional[List[MessageEntity]] = Field(default=None)
    description: Optional[str] = Field(default=None)
    reply_markup: Optional[InlineKeyboardMarkup] = Field(default=None)
    input_message_content: Optional[InputMessageContent] = Field(default=None)
    thumbnail_url: Optional[str] = Field(default=None)
    thumbnail_width: Optional[int] = Field(default=None)
    thumbnail_height: Optional[int] = Field(default=None) 

class InlineQueryResultLocation(BaseModel):
    """
    Represents a location on a map. By default,
    the location will be sent by the user.
    Alternatively, you can use input_message_content to send a
    message with the specified content instead of the
    location.

    Reference: https://core.telegram.org/bots/api#inlinequeryresultlocation
    """

    type: Literal["location"] = "location"
    id: str
    latitude: float
    longitude: float
    title: str
    horizontal_accuracy: Optional[float] = Field(default=None)
    live_period: Optional[int] = Field(default=None)
    heading: Optional[int] = Field(default=None)
    proximity_alert_radius: Optional[int] = Field(default=None)
    reply_markup: Optional[InlineKeyboardMarkup] = Field(default=None)
    input_message_content: Optional[InputMessageContent] = Field(default=None)
    thumbnail_url: Optional[str] = Field(default=None)
    thumbnail_width: Optional[int] = Field(default=None)
    thumbnail_height: Optional[int] = Field(default=None) 

class InlineQueryResultVenue(BaseModel):
    """
    Represents a venue. By default, the venue will
    be sent by the user. Alternatively, you can
    use input_message_content to send a message with the
    specified content instead of the venue.

    Reference: https://core.telegram.org/bots/api#inlinequeryresultvenue
    """

    type: Literal["venue"] = "venue"
    id: str
    latitude: float
    longitude: float
    title: str
    address: str
    foursquare_id: Optional[str] = Field(default=None)
    foursquare_type: Optional[str] = Field(default=None)
    google_place_id: Optional[str] = Field(default=None)
    google_place_type: Optional[str] = Field(default=None)
    reply_markup: Optional[InlineKeyboardMarkup] = Field(default=None)
    input_message_content: Optional[InputMessageContent] = Field(default=None)
    thumbnail_url: Optional[str] = Field(default=None)
    thumbnail_width: Optional[int] = Field(default=None)
    thumbnail_height: Optional[int] = Field(default=None) 

class InlineQueryResultContact(BaseModel):
    """
    Represents a contact with a phone number. By
    default, this contact will be sent by the
    user. Alternatively, you can use input_message_content to send
    a message with the specified content instead of
    the contact.

    Reference: https://core.telegram.org/bots/api#inlinequeryresultcontact
    """

    type: Literal["contact"] = "contact"
    id: str
    phone_number: str
    first_name: str
    last_name: Optional[str] = Field(default=None)
    vcard: Optional[str] = Field(default=None)
    reply_markup: Optional[InlineKeyboardMarkup] = Field(default=None)
    input_message_content: Optional[InputMessageContent] = Field(default=None)
    thumbnail_url: Optional[str] = Field(default=None)
    thumbnail_width: Optional[int] = Field(default=None)
    thumbnail_height: Optional[int] = Field(default=None) 

class InlineQueryResultGame(BaseModel):
    """
    Represents a Game.

    Reference: https://core.telegram.org/bots/api#inlinequeryresultgame
    """

    type: Literal["game"] = "game"
    id: str
    game_short_name: str
    reply_markup: Optional[InlineKeyboardMarkup] = Field(default=None) 

class InlineQueryResultCachedPhoto(BaseModel):
    """
    Represents a link to a photo stored on
    the Telegram servers. By default, this photo will
    be sent by the user with an optional
    caption. Alternatively, you can use input_message_content to send
    a message with the specified content instead of
    the photo.

    Reference: https://core.telegram.org/bots/api#inlinequeryresultcachedphoto
    """

    type: Literal["photo"] = "photo"
    id: str
    photo_file_id: str
    title: Optional[str] = Field(default=None)
    description: Optional[str] = Field(default=None)
    caption: Optional[str] = Field(default=None)
    parse_mode: Optional[str] = Field(default="HTML")
    caption_entities: Optional[List[MessageEntity]] = Field(default=None)
    show_caption_above_media: Optional[bool] = Field(default=None)
    reply_markup: Optional[InlineKeyboardMarkup] = Field(default=None)
    input_message_content: Optional[InputMessageContent] = Field(default=None) 

class InlineQueryResultCachedGif(BaseModel):
    """
    Represents a link to an animated GIF file
    stored on the Telegram servers. By default, this
    animated GIF file will be sent by the
    user with an optional caption. Alternatively, you can
    use input_message_content to send a message with specified
    content instead of the animation.

    Reference: https://core.telegram.org/bots/api#inlinequeryresultcachedgif
    """

    type: Literal["gif"] = "gif"
    id: str
    gif_file_id: str
    title: Optional[str] = Field(default=None)
    caption: Optional[str] = Field(default=None)
    parse_mode: Optional[str] = Field(default="HTML")
    caption_entities: Optional[List[MessageEntity]] = Field(default=None)
    show_caption_above_media: Optional[bool] = Field(default=None)
    reply_markup: Optional[InlineKeyboardMarkup] = Field(default=None)
    input_message_content: Optional[InputMessageContent] = Field(default=None) 

class InlineQueryResultCachedMpeg4Gif(BaseModel):
    """
    Represents a link to a video animation (H.264/MPEG-4
    AVC video without sound) stored on the Telegram
    servers. By default, this animated MPEG-4 file will
    be sent by the user with an optional
    caption. Alternatively, you can use input_message_content to send
    a message with the specified content instead of
    the animation.

    Reference: https://core.telegram.org/bots/api#inlinequeryresultcachedmpeg4gif
    """

    type: Literal["mpeg4_gif"] = "mpeg4_gif"
    id: str
    mpeg4_file_id: str
    title: Optional[str] = Field(default=None)
    caption: Optional[str] = Field(default=None)
    parse_mode: Optional[str] = Field(default="HTML")
    caption_entities: Optional[List[MessageEntity]] = Field(default=None)
    show_caption_above_media: Optional[bool] = Field(default=None)
    reply_markup: Optional[InlineKeyboardMarkup] = Field(default=None)
    input_message_content: Optional[InputMessageContent] = Field(default=None) 

class InlineQueryResultCachedSticker(BaseModel):
    """
    Represents a link to a sticker stored on
    the Telegram servers. By default, this sticker will
    be sent by the user. Alternatively, you can
    use input_message_content to send a message with the
    specified content instead of the sticker.

    Reference: https://core.telegram.org/bots/api#inlinequeryresultcachedsticker
    """

    type: Literal["sticker"] = "sticker"
    id: str
    sticker_file_id: str
    reply_markup: Optional[InlineKeyboardMarkup] = Field(default=None)
    input_message_content: Optional[InputMessageContent] = Field(default=None) 

class InlineQueryResultCachedDocument(BaseModel):
    """
    Represents a link to a file stored on
    the Telegram servers. By default, this file will
    be sent by the user with an optional
    caption. Alternatively, you can use input_message_content to send
    a message with the specified content instead of
    the file.

    Reference: https://core.telegram.org/bots/api#inlinequeryresultcacheddocument
    """

    type: Literal["document"] = "document"
    id: str
    title: str
    document_file_id: str
    description: Optional[str] = Field(default=None)
    caption: Optional[str] = Field(default=None)
    parse_mode: Optional[str] = Field(default="HTML")
    caption_entities: Optional[List[MessageEntity]] = Field(default=None)
    reply_markup: Optional[InlineKeyboardMarkup] = Field(default=None)
    input_message_content: Optional[InputMessageContent] = Field(default=None) 

class InlineQueryResultCachedVideo(BaseModel):
    """
    Represents a link to a video file stored
    on the Telegram servers. By default, this video
    file will be sent by the user with
    an optional caption. Alternatively, you can use input_message_content
    to send a message with the specified content
    instead of the video.

    Reference: https://core.telegram.org/bots/api#inlinequeryresultcachedvideo
    """

    type: Literal["video"] = "video"
    id: str
    video_file_id: str
    title: str
    description: Optional[str] = Field(default=None)
    caption: Optional[str] = Field(default=None)
    parse_mode: Optional[str] = Field(default="HTML")
    caption_entities: Optional[List[MessageEntity]] = Field(default=None)
    show_caption_above_media: Optional[bool] = Field(default=None)
    reply_markup: Optional[InlineKeyboardMarkup] = Field(default=None)
    input_message_content: Optional[InputMessageContent] = Field(default=None) 

class InlineQueryResultCachedVoice(BaseModel):
    """
    Represents a link to a voice message stored
    on the Telegram servers. By default, this voice
    message will be sent by the user. Alternatively,
    you can use input_message_content to send a message
    with the specified content instead of the voice
    message.

    Reference: https://core.telegram.org/bots/api#inlinequeryresultcachedvoice
    """

    type: Literal["voice"] = "voice"
    id: str
    voice_file_id: str
    title: str
    caption: Optional[str] = Field(default=None)
    parse_mode: Optional[str] = Field(default="HTML")
    caption_entities: Optional[List[MessageEntity]] = Field(default=None)
    reply_markup: Optional[InlineKeyboardMarkup] = Field(default=None)
    input_message_content: Optional[InputMessageContent] = Field(default=None) 

class InlineQueryResultCachedAudio(BaseModel):
    """
    Represents a link to an MP3 audio file
    stored on the Telegram servers. By default, this
    audio file will be sent by the user.
    Alternatively, you can use input_message_content to send a
    message with the specified content instead of the
    audio.

    Reference: https://core.telegram.org/bots/api#inlinequeryresultcachedaudio
    """

    type: Literal["audio"] = "audio"
    id: str
    audio_file_id: str
    caption: Optional[str] = Field(default=None)
    parse_mode: Optional[str] = Field(default="HTML")
    caption_entities: Optional[List[MessageEntity]] = Field(default=None)
    reply_markup: Optional[InlineKeyboardMarkup] = Field(default=None)
    input_message_content: Optional[InputMessageContent] = Field(default=None) 

class InputTextMessageContent(BaseModel):
    """
    Represents the content of a text message to
    be sent as the result of an inline
    query.

    Reference: https://core.telegram.org/bots/api#inputtextmessagecontent
    """

    message_text: str
    parse_mode: Optional[str] = Field(default="HTML")
    entities: Optional[List[MessageEntity]] = Field(default=None)
    link_preview_options: Optional[LinkPreviewOptions] = Field(default=None) 

class InputLocationMessageContent(BaseModel):
    """
    Represents the content of a location message to
    be sent as the result of an inline
    query.

    Reference: https://core.telegram.org/bots/api#inputlocationmessagecontent
    """

    latitude: float
    longitude: float
    horizontal_accuracy: Optional[float] = Field(default=None)
    live_period: Optional[int] = Field(default=None)
    heading: Optional[int] = Field(default=None)
    proximity_alert_radius: Optional[int] = Field(default=None) 

class InputVenueMessageContent(BaseModel):
    """
    Represents the content of a venue message to
    be sent as the result of an inline
    query.

    Reference: https://core.telegram.org/bots/api#inputvenuemessagecontent
    """

    latitude: float
    longitude: float
    title: str
    address: str
    foursquare_id: Optional[str] = Field(default=None)
    foursquare_type: Optional[str] = Field(default=None)
    google_place_id: Optional[str] = Field(default=None)
    google_place_type: Optional[str] = Field(default=None) 

class InputContactMessageContent(BaseModel):
    """
    Represents the content of a contact message to
    be sent as the result of an inline
    query.

    Reference: https://core.telegram.org/bots/api#inputcontactmessagecontent
    """

    phone_number: str
    first_name: str
    last_name: Optional[str] = Field(default=None)
    vcard: Optional[str] = Field(default=None) 

class InputInvoiceMessageContent(BaseModel):
    """
    Represents the content of an invoice message to
    be sent as the result of an inline
    query.

    Reference: https://core.telegram.org/bots/api#inputinvoicemessagecontent
    """

    title: str
    description: str
    payload: str
    currency: str
    prices: List[LabeledPrice]
    provider_token: Optional[str] = Field(default=None)
    max_tip_amount: Optional[int] = Field(default=None)
    suggested_tip_amounts: Optional[List[int]] = Field(default=None)
    provider_data: Optional[str] = Field(default=None)
    photo_url: Optional[str] = Field(default=None)
    photo_size: Optional[int] = Field(default=None)
    photo_width: Optional[int] = Field(default=None)
    photo_height: Optional[int] = Field(default=None)
    need_name: Optional[bool] = Field(default=None)
    need_phone_number: Optional[bool] = Field(default=None)
    need_email: Optional[bool] = Field(default=None)
    need_shipping_address: Optional[bool] = Field(default=None)
    send_phone_number_to_provider: Optional[bool] = Field(default=None)
    send_email_to_provider: Optional[bool] = Field(default=None)
    is_flexible: Optional[bool] = Field(default=None) 

class ChosenInlineResult(BaseModel):
    """
    Represents a result of an inline query that
    was chosen by the user and sent to
    their chat partner.

    Reference: https://core.telegram.org/bots/api#choseninlineresult
    """

    result_id: str
    from_user: User = Field(alias="from")
    query: str
    location: Optional[Location] = Field(default=None)
    inline_message_id: Optional[str] = Field(default=None) 

class SentWebAppMessage(BaseModel):
    """
    Describes an inline message sent by a Web
    App on behalf of a user.

    Reference: https://core.telegram.org/bots/api#sentwebappmessage
    """

    inline_message_id: Optional[str] = Field(default=None) 

class PreparedInlineMessage(BaseModel):
    """
    Describes an inline message to be sent by
    a user of a Mini App.

    Reference: https://core.telegram.org/bots/api#preparedinlinemessage
    """

    id: str
    expiration_date: int 

class LabeledPrice(BaseModel):
    """
    This object represents a portion of the price
    for goods or services.

    Reference: https://core.telegram.org/bots/api#labeledprice
    """

    label: str
    amount: int 

class Invoice(BaseModel):
    """
    This object contains basic information about an invoice.

    Reference: https://core.telegram.org/bots/api#invoice
    """

    title: str
    description: str
    start_parameter: str
    currency: str
    total_amount: int 

class ShippingAddress(BaseModel):
    """
    This object represents a shipping address.

    Reference: https://core.telegram.org/bots/api#shippingaddress
    """

    country_code: str
    state: str
    city: str
    street_line1: str
    street_line2: str
    post_code: str 

class OrderInfo(BaseModel):
    """
    This object represents information about an order.

    Reference: https://core.telegram.org/bots/api#orderinfo
    """

    name: Optional[str] = Field(default=None)
    phone_number: Optional[str] = Field(default=None)
    email: Optional[str] = Field(default=None)
    shipping_address: Optional[ShippingAddress] = Field(default=None) 

class ShippingOption(BaseModel):
    """
    This object represents one shipping option.

    Reference: https://core.telegram.org/bots/api#shippingoption
    """

    id: str
    title: str
    prices: List[LabeledPrice] 

class SuccessfulPayment(BaseModel):
    """
    This object contains basic information about a successful
    payment. Note that if the buyer initiates a
    chargeback with the relevant payment provider following this
    transaction, the funds may be debited from your
    balance. This is outside of Telegram's control.

    Reference: https://core.telegram.org/bots/api#successfulpayment
    """

    currency: str
    total_amount: int
    invoice_payload: str
    telegram_payment_charge_id: str
    provider_payment_charge_id: str
    subscription_expiration_date: Optional[int] = Field(default=None)
    is_recurring: Optional[bool] = Field(default=None)
    is_first_recurring: Optional[bool] = Field(default=None)
    shipping_option_id: Optional[str] = Field(default=None)
    order_info: Optional[OrderInfo] = Field(default=None) 

class RefundedPayment(BaseModel):
    """
    This object contains basic information about a refunded
    payment.

    Reference: https://core.telegram.org/bots/api#refundedpayment
    """

    currency: Literal["XTR"] = "XTR"
    total_amount: int
    invoice_payload: str
    telegram_payment_charge_id: str
    provider_payment_charge_id: Optional[str] = Field(default=None) 

class ShippingQuery(BaseModel):
    """
    This object contains information about an incoming shipping
    query.

    Reference: https://core.telegram.org/bots/api#shippingquery
    """

    id: str
    from_user: User = Field(alias="from")
    invoice_payload: str
    shipping_address: ShippingAddress 

class PreCheckoutQuery(BaseModel):
    """
    This object contains information about an incoming pre-checkout
    query.

    Reference: https://core.telegram.org/bots/api#precheckoutquery
    """

    id: str
    from_user: User = Field(alias="from")
    currency: str
    total_amount: int
    invoice_payload: str
    shipping_option_id: Optional[str] = Field(default=None)
    order_info: Optional[OrderInfo] = Field(default=None) 

class PaidMediaPurchased(BaseModel):
    """
    This object contains information about a paid media
    purchase.

    Reference: https://core.telegram.org/bots/api#paidmediapurchased
    """

    from_user: User = Field(alias="from")
    paid_media_payload: str 

class RevenueWithdrawalStatePending(BaseModel):
    """
    The withdrawal is in progress.

    Reference: https://core.telegram.org/bots/api#revenuewithdrawalstatepending
    """

    type: Literal["pending"] = "pending" 

class RevenueWithdrawalStateSucceeded(BaseModel):
    """
    The withdrawal succeeded.

    Reference: https://core.telegram.org/bots/api#revenuewithdrawalstatesucceeded
    """

    type: Literal["succeeded"] = "succeeded"
    date: int
    url: str 

class RevenueWithdrawalStateFailed(BaseModel):
    """
    The withdrawal failed and the transaction was refunded.

    Reference: https://core.telegram.org/bots/api#revenuewithdrawalstatefailed
    """

    type: Literal["failed"] = "failed" 

class AffiliateInfo(BaseModel):
    """
    Contains information about the affiliate that received a
    commission via this transaction.

    Reference: https://core.telegram.org/bots/api#affiliateinfo
    """

    commission_per_mille: int
    amount: int
    affiliate_user: Optional[User] = Field(default=None)
    affiliate_chat: Optional[Chat] = Field(default=None)
    nanostar_amount: Optional[int] = Field(default=None) 

class TransactionPartnerUser(BaseModel):
    """
    Describes a transaction with a user.

    Reference: https://core.telegram.org/bots/api#transactionpartneruser
    """

    type: Literal["user"] = "user"
    transaction_type: str
    user: User
    affiliate: Optional[AffiliateInfo] = Field(default=None)
    invoice_payload: Optional[str] = Field(default=None)
    subscription_period: Optional[int] = Field(default=None)
    paid_media: Optional[List[PaidMedia]] = Field(default=None)
    paid_media_payload: Optional[str] = Field(default=None)
    gift: Optional[Gift] = Field(default=None)
    premium_subscription_duration: Optional[int] = Field(default=None) 

class TransactionPartnerChat(BaseModel):
    """
    Describes a transaction with a chat.

    Reference: https://core.telegram.org/bots/api#transactionpartnerchat
    """

    type: Literal["chat"] = "chat"
    chat: Chat
    gift: Optional[Gift] = Field(default=None) 

class TransactionPartnerAffiliateProgram(BaseModel):
    """
    Describes the affiliate program that issued the affiliate
    commission received via this transaction.

    Reference: https://core.telegram.org/bots/api#transactionpartneraffiliateprogram
    """

    type: Literal["affiliate_program"] = "affiliate_program"
    commission_per_mille: int
    sponsor_user: Optional[User] = Field(default=None) 

class TransactionPartnerFragment(BaseModel):
    """
    Describes a withdrawal transaction with Fragment.

    Reference: https://core.telegram.org/bots/api#transactionpartnerfragment
    """

    type: Literal["fragment"] = "fragment"
    withdrawal_state: Optional[RevenueWithdrawalState] = Field(default=None) 

class TransactionPartnerTelegramAds(BaseModel):
    """
    Describes a withdrawal transaction to the Telegram Ads
    platform.

    Reference: https://core.telegram.org/bots/api#transactionpartnertelegramads
    """

    type: Literal["telegram_ads"] = "telegram_ads" 

class TransactionPartnerTelegramApi(BaseModel):
    """
    Describes a transaction with payment for paid broadcasting.

    Reference: https://core.telegram.org/bots/api#transactionpartnertelegramapi
    """

    type: Literal["telegram_api"] = "telegram_api"
    request_count: int 

class TransactionPartnerOther(BaseModel):
    """
    Describes a transaction with an unknown source or
    recipient.

    Reference: https://core.telegram.org/bots/api#transactionpartnerother
    """

    type: Literal["other"] = "other" 

class StarTransaction(BaseModel):
    """
    Describes a Telegram Star transaction. Note that if
    the buyer initiates a chargeback with the payment
    provider from whom they acquired Stars (e.g., Apple,
    Google) following this transaction, the refunded Stars will
    be deducted from the bot's balance. This is
    outside of Telegram's control.

    Reference: https://core.telegram.org/bots/api#startransaction
    """

    id: str
    amount: int
    date: int
    nanostar_amount: Optional[int] = Field(default=None)
    source: Optional[TransactionPartner] = Field(default=None)
    receiver: Optional[TransactionPartner] = Field(default=None) 

class StarTransactions(BaseModel):
    """
    Contains a list of Telegram Star transactions.

    Reference: https://core.telegram.org/bots/api#startransactions
    """

    transactions: List[StarTransaction] 

class PassportData(BaseModel):
    """
    Describes Telegram Passport data shared with the bot
    by the user.

    Reference: https://core.telegram.org/bots/api#passportdata
    """

    data: List[EncryptedPassportElement]
    credentials: EncryptedCredentials 

class PassportFile(BaseModel):
    """
    This object represents a file uploaded to Telegram
    Passport. Currently all Telegram Passport files are in
    JPEG format when decrypted and don't exceed 10MB.

    Reference: https://core.telegram.org/bots/api#passportfile
    """

    file_id: str
    file_unique_id: str
    file_size: int
    file_date: int 

class EncryptedPassportElement(BaseModel):
    """
    Describes documents or other Telegram Passport elements shared
    with the bot by the user.

    Reference: https://core.telegram.org/bots/api#encryptedpassportelement
    """

    type: str
    hash: str
    data: Optional[str] = Field(default=None)
    phone_number: Optional[str] = Field(default=None)
    email: Optional[str] = Field(default=None)
    files: Optional[List[PassportFile]] = Field(default=None)
    front_side: Optional[PassportFile] = Field(default=None)
    reverse_side: Optional[PassportFile] = Field(default=None)
    selfie: Optional[PassportFile] = Field(default=None)
    translation: Optional[List[PassportFile]] = Field(default=None) 

class EncryptedCredentials(BaseModel):
    """
    Describes data required for decrypting and authenticating EncryptedPassportElement.
    See the Telegram Passport Documentation for a complete
    description of the data decryption and authentication processes.

    Reference: https://core.telegram.org/bots/api#encryptedcredentials
    """

    data: str
    hash: str
    secret: str 

class PassportElementErrorDataField(BaseModel):
    """
    Represents an issue in one of the data
    fields that was provided by the user. The
    error is considered resolved when the field's value
    changes.

    Reference: https://core.telegram.org/bots/api#passportelementerrordatafield
    """

    source: Literal["data"] = "data"
    type: str
    field_name: str
    data_hash: str
    message: str 

class PassportElementErrorFrontSide(BaseModel):
    """
    Represents an issue with the front side of
    a document. The error is considered resolved when
    the file with the front side of the
    document changes.

    Reference: https://core.telegram.org/bots/api#passportelementerrorfrontside
    """

    source: Literal["front_side"] = "front_side"
    type: str
    file_hash: str
    message: str 

class PassportElementErrorReverseSide(BaseModel):
    """
    Represents an issue with the reverse side of
    a document. The error is considered resolved when
    the file with reverse side of the document
    changes.

    Reference: https://core.telegram.org/bots/api#passportelementerrorreverseside
    """

    source: Literal["reverse_side"] = "reverse_side"
    type: str
    file_hash: str
    message: str 

class PassportElementErrorSelfie(BaseModel):
    """
    Represents an issue with the selfie with a
    document. The error is considered resolved when the
    file with the selfie changes.

    Reference: https://core.telegram.org/bots/api#passportelementerrorselfie
    """

    source: Literal["selfie"] = "selfie"
    type: str
    file_hash: str
    message: str 

class PassportElementErrorFile(BaseModel):
    """
    Represents an issue with a document scan. The
    error is considered resolved when the file with
    the document scan changes.

    Reference: https://core.telegram.org/bots/api#passportelementerrorfile
    """

    source: Literal["file"] = "file"
    type: str
    file_hash: str
    message: str 

class PassportElementErrorFiles(BaseModel):
    """
    Represents an issue with a list of scans.
    The error is considered resolved when the list
    of files containing the scans changes.

    Reference: https://core.telegram.org/bots/api#passportelementerrorfiles
    """

    source: Literal["files"] = "files"
    type: str
    file_hashes: List[str]
    message: str 

class PassportElementErrorTranslationFile(BaseModel):
    """
    Represents an issue with one of the files
    that constitute the translation of a document. The
    error is considered resolved when the file changes.

    Reference: https://core.telegram.org/bots/api#passportelementerrortranslationfile
    """

    source: Literal["translation_file"] = "translation_file"
    type: str
    file_hash: str
    message: str 

class PassportElementErrorTranslationFiles(BaseModel):
    """
    Represents an issue with the translated version of
    a document. The error is considered resolved when
    a file with the document translation change.

    Reference: https://core.telegram.org/bots/api#passportelementerrortranslationfiles
    """

    source: Literal["translation_files"] = "translation_files"
    type: str
    file_hashes: List[str]
    message: str 

class PassportElementErrorUnspecified(BaseModel):
    """
    Represents an issue in an unspecified place. The
    error is considered resolved when new data is
    added.

    Reference: https://core.telegram.org/bots/api#passportelementerrorunspecified
    """

    source: Literal["unspecified"] = "unspecified"
    type: str
    element_hash: str
    message: str 

class Game(BaseModel):
    """
    This object represents a game. Use BotFather to
    create and edit games, their short names will
    act as unique identifiers.

    Reference: https://core.telegram.org/bots/api#game
    """

    title: str
    description: str
    photo: List[PhotoSize]
    text: Optional[str] = Field(default=None)
    text_entities: Optional[List[MessageEntity]] = Field(default=None)
    animation: Optional[Animation] = Field(default=None) 

class CallbackGame(BaseModel):
    """
    A placeholder, currently holds no information. Use BotFather
    to set up your game.

    Reference: https://core.telegram.org/bots/api#callbackgame
    """

    pass
 

class GameHighScore(BaseModel):
    """
    This object represents one row of the high
    scores table for a game.

    Reference: https://core.telegram.org/bots/api#gamehighscore
    """

    position: int
    user: User
    score: int 

MessageOrigin = Union[
    MessageOriginUser,
    MessageOriginHiddenUser,
    MessageOriginChat,
    MessageOriginChannel,
]
_MessageOriginAdapter = TypeAdapter(MessageOrigin) 

PaidMedia = Union[
    PaidMediaPreview,
    PaidMediaPhoto,
    PaidMediaVideo,
]
_PaidMediaAdapter = TypeAdapter(PaidMedia) 

BackgroundFill = Union[
    BackgroundFillSolid,
    BackgroundFillGradient,
    BackgroundFillFreeformGradient,
]
_BackgroundFillAdapter = TypeAdapter(BackgroundFill) 

BackgroundType = Union[
    BackgroundTypeFill,
    BackgroundTypeWallpaper,
    BackgroundTypePattern,
    BackgroundTypeChatTheme,
]
_BackgroundTypeAdapter = TypeAdapter(BackgroundType) 

ChatMember = Union[
    ChatMemberOwner,
    ChatMemberAdministrator,
    ChatMemberMember,
    ChatMemberRestricted,
    ChatMemberLeft,
    ChatMemberBanned,
]
_ChatMemberAdapter = TypeAdapter(ChatMember) 

StoryAreaType = Union[
    StoryAreaTypeLocation,
    StoryAreaTypeSuggestedReaction,
    StoryAreaTypeLink,
    StoryAreaTypeWeather,
    StoryAreaTypeUniqueGift,
]
_StoryAreaTypeAdapter = TypeAdapter(StoryAreaType) 

ReactionType = Union[
    ReactionTypeEmoji,
    ReactionTypeCustomEmoji,
    ReactionTypePaid,
]
_ReactionTypeAdapter = TypeAdapter(ReactionType) 

OwnedGift = Union[
    OwnedGiftRegular,
    OwnedGiftUnique,
]
_OwnedGiftAdapter = TypeAdapter(OwnedGift) 

BotCommandScope = Union[
    BotCommandScopeDefault,
    BotCommandScopeAllPrivateChats,
    BotCommandScopeAllGroupChats,
    BotCommandScopeAllChatAdministrators,
    BotCommandScopeChat,
    BotCommandScopeChatAdministrators,
    BotCommandScopeChatMember,
]
_BotCommandScopeAdapter = TypeAdapter(BotCommandScope) 

MenuButton = Union[
    MenuButtonCommands,
    MenuButtonWebApp,
    MenuButtonDefault,
]
_MenuButtonAdapter = TypeAdapter(MenuButton) 

ChatBoostSource = Union[
    ChatBoostSourcePremium,
    ChatBoostSourceGiftCode,
    ChatBoostSourceGiveaway,
]
_ChatBoostSourceAdapter = TypeAdapter(ChatBoostSource) 

InputMedia = Union[
    InputMediaAnimation,
    InputMediaDocument,
    InputMediaAudio,
    InputMediaPhoto,
    InputMediaVideo,
]
_InputMediaAdapter = TypeAdapter(InputMedia) 

InputPaidMedia = Union[
    InputPaidMediaPhoto,
    InputPaidMediaVideo,
]
_InputPaidMediaAdapter = TypeAdapter(InputPaidMedia) 

InputProfilePhoto = Union[
    InputProfilePhotoStatic,
    InputProfilePhotoAnimated,
]
_InputProfilePhotoAdapter = TypeAdapter(InputProfilePhoto) 

InputStoryContent = Union[
    InputStoryContentPhoto,
    InputStoryContentVideo,
]
_InputStoryContentAdapter = TypeAdapter(InputStoryContent) 

InlineQueryResult = Union[
    InlineQueryResultCachedAudio,
    InlineQueryResultCachedDocument,
    InlineQueryResultCachedGif,
    InlineQueryResultCachedMpeg4Gif,
    InlineQueryResultCachedPhoto,
    InlineQueryResultCachedSticker,
    InlineQueryResultCachedVideo,
    InlineQueryResultCachedVoice,
    InlineQueryResultArticle,
    InlineQueryResultAudio,
    InlineQueryResultContact,
    InlineQueryResultGame,
    InlineQueryResultDocument,
    InlineQueryResultGif,
    InlineQueryResultLocation,
    InlineQueryResultMpeg4Gif,
    InlineQueryResultPhoto,
    InlineQueryResultVenue,
    InlineQueryResultVideo,
    InlineQueryResultVoice,
]
_InlineQueryResultAdapter = TypeAdapter(InlineQueryResult) 

InputMessageContent = Union[
    InputTextMessageContent,
    InputLocationMessageContent,
    InputVenueMessageContent,
    InputContactMessageContent,
    InputInvoiceMessageContent,
]
_InputMessageContentAdapter = TypeAdapter(InputMessageContent) 

RevenueWithdrawalState = Union[
    RevenueWithdrawalStatePending,
    RevenueWithdrawalStateSucceeded,
    RevenueWithdrawalStateFailed,
]
_RevenueWithdrawalStateAdapter = TypeAdapter(RevenueWithdrawalState) 

TransactionPartner = Union[
    TransactionPartnerUser,
    TransactionPartnerChat,
    TransactionPartnerAffiliateProgram,
    TransactionPartnerFragment,
    TransactionPartnerTelegramAds,
    TransactionPartnerTelegramApi,
    TransactionPartnerOther,
]
_TransactionPartnerAdapter = TypeAdapter(TransactionPartner) 

PassportElementError = Union[
    PassportElementErrorDataField,
    PassportElementErrorFrontSide,
    PassportElementErrorReverseSide,
    PassportElementErrorSelfie,
    PassportElementErrorFile,
    PassportElementErrorFiles,
    PassportElementErrorTranslationFile,
    PassportElementErrorTranslationFiles,
    PassportElementErrorUnspecified,
]
_PassportElementErrorAdapter = TypeAdapter(PassportElementError) 

Update.model_rebuild()
WebhookInfo.model_rebuild()
User.model_rebuild()
Chat.model_rebuild()
ChatFullInfo.model_rebuild()
Message.model_rebuild()
MessageId.model_rebuild()
MessageEntity.model_rebuild()
TextQuote.model_rebuild()
ExternalReplyInfo.model_rebuild()
ReplyParameters.model_rebuild()
MessageOriginUser.model_rebuild()
MessageOriginHiddenUser.model_rebuild()
MessageOriginChat.model_rebuild()
MessageOriginChannel.model_rebuild()
PhotoSize.model_rebuild()
Animation.model_rebuild()
Audio.model_rebuild()
Document.model_rebuild()
Story.model_rebuild()
Video.model_rebuild()
VideoNote.model_rebuild()
Voice.model_rebuild()
PaidMediaInfo.model_rebuild()
PaidMediaPreview.model_rebuild()
PaidMediaPhoto.model_rebuild()
PaidMediaVideo.model_rebuild()
Contact.model_rebuild()
Dice.model_rebuild()
PollOption.model_rebuild()
InputPollOption.model_rebuild()
PollAnswer.model_rebuild()
Poll.model_rebuild()
ChecklistTask.model_rebuild()
Checklist.model_rebuild()
InputChecklistTask.model_rebuild()
InputChecklist.model_rebuild()
ChecklistTasksDone.model_rebuild()
ChecklistTasksAdded.model_rebuild()
Location.model_rebuild()
Venue.model_rebuild()
WebAppData.model_rebuild()
ProximityAlertTriggered.model_rebuild()
MessageAutoDeleteTimerChanged.model_rebuild()
ChatBoostAdded.model_rebuild()
BackgroundFillSolid.model_rebuild()
BackgroundFillGradient.model_rebuild()
BackgroundFillFreeformGradient.model_rebuild()
BackgroundTypeFill.model_rebuild()
BackgroundTypeWallpaper.model_rebuild()
BackgroundTypePattern.model_rebuild()
BackgroundTypeChatTheme.model_rebuild()
ChatBackground.model_rebuild()
ForumTopicCreated.model_rebuild()
ForumTopicClosed.model_rebuild()
ForumTopicEdited.model_rebuild()
ForumTopicReopened.model_rebuild()
GeneralForumTopicHidden.model_rebuild()
GeneralForumTopicUnhidden.model_rebuild()
SharedUser.model_rebuild()
UsersShared.model_rebuild()
ChatShared.model_rebuild()
WriteAccessAllowed.model_rebuild()
VideoChatScheduled.model_rebuild()
VideoChatStarted.model_rebuild()
VideoChatEnded.model_rebuild()
VideoChatParticipantsInvited.model_rebuild()
PaidMessagePriceChanged.model_rebuild()
DirectMessagePriceChanged.model_rebuild()
SuggestedPostApproved.model_rebuild()
SuggestedPostApprovalFailed.model_rebuild()
SuggestedPostDeclined.model_rebuild()
SuggestedPostPaid.model_rebuild()
SuggestedPostRefunded.model_rebuild()
GiveawayCreated.model_rebuild()
Giveaway.model_rebuild()
GiveawayWinners.model_rebuild()
GiveawayCompleted.model_rebuild()
LinkPreviewOptions.model_rebuild()
SuggestedPostPrice.model_rebuild()
SuggestedPostInfo.model_rebuild()
SuggestedPostParameters.model_rebuild()
DirectMessagesTopic.model_rebuild()
UserProfilePhotos.model_rebuild()
File.model_rebuild()
WebAppInfo.model_rebuild()
ReplyKeyboardMarkup.model_rebuild()
KeyboardButton.model_rebuild()
KeyboardButtonRequestUsers.model_rebuild()
KeyboardButtonRequestChat.model_rebuild()
KeyboardButtonPollType.model_rebuild()
ReplyKeyboardRemove.model_rebuild()
InlineKeyboardMarkup.model_rebuild()
InlineKeyboardButton.model_rebuild()
LoginUrl.model_rebuild()
SwitchInlineQueryChosenChat.model_rebuild()
CopyTextButton.model_rebuild()
CallbackQuery.model_rebuild()
ForceReply.model_rebuild()
ChatPhoto.model_rebuild()
ChatInviteLink.model_rebuild()
ChatAdministratorRights.model_rebuild()
ChatMemberUpdated.model_rebuild()
ChatMemberOwner.model_rebuild()
ChatMemberAdministrator.model_rebuild()
ChatMemberMember.model_rebuild()
ChatMemberRestricted.model_rebuild()
ChatMemberLeft.model_rebuild()
ChatMemberBanned.model_rebuild()
ChatJoinRequest.model_rebuild()
ChatPermissions.model_rebuild()
Birthdate.model_rebuild()
BusinessIntro.model_rebuild()
BusinessLocation.model_rebuild()
BusinessOpeningHoursInterval.model_rebuild()
BusinessOpeningHours.model_rebuild()
StoryAreaPosition.model_rebuild()
LocationAddress.model_rebuild()
StoryAreaTypeLocation.model_rebuild()
StoryAreaTypeSuggestedReaction.model_rebuild()
StoryAreaTypeLink.model_rebuild()
StoryAreaTypeWeather.model_rebuild()
StoryAreaTypeUniqueGift.model_rebuild()
StoryArea.model_rebuild()
ChatLocation.model_rebuild()
ReactionTypeEmoji.model_rebuild()
ReactionTypeCustomEmoji.model_rebuild()
ReactionTypePaid.model_rebuild()
ReactionCount.model_rebuild()
MessageReactionUpdated.model_rebuild()
MessageReactionCountUpdated.model_rebuild()
ForumTopic.model_rebuild()
Gift.model_rebuild()
Gifts.model_rebuild()
UniqueGiftModel.model_rebuild()
UniqueGiftSymbol.model_rebuild()
UniqueGiftBackdropColors.model_rebuild()
UniqueGiftBackdrop.model_rebuild()
UniqueGift.model_rebuild()
GiftInfo.model_rebuild()
UniqueGiftInfo.model_rebuild()
OwnedGiftRegular.model_rebuild()
OwnedGiftUnique.model_rebuild()
OwnedGifts.model_rebuild()
AcceptedGiftTypes.model_rebuild()
StarAmount.model_rebuild()
BotCommand.model_rebuild()
BotCommandScopeDefault.model_rebuild()
BotCommandScopeAllPrivateChats.model_rebuild()
BotCommandScopeAllGroupChats.model_rebuild()
BotCommandScopeAllChatAdministrators.model_rebuild()
BotCommandScopeChat.model_rebuild()
BotCommandScopeChatAdministrators.model_rebuild()
BotCommandScopeChatMember.model_rebuild()
BotName.model_rebuild()
BotDescription.model_rebuild()
BotShortDescription.model_rebuild()
MenuButtonCommands.model_rebuild()
MenuButtonWebApp.model_rebuild()
MenuButtonDefault.model_rebuild()
ChatBoostSourcePremium.model_rebuild()
ChatBoostSourceGiftCode.model_rebuild()
ChatBoostSourceGiveaway.model_rebuild()
ChatBoost.model_rebuild()
ChatBoostUpdated.model_rebuild()
ChatBoostRemoved.model_rebuild()
UserChatBoosts.model_rebuild()
BusinessBotRights.model_rebuild()
BusinessConnection.model_rebuild()
BusinessMessagesDeleted.model_rebuild()
ResponseParameters.model_rebuild()
InputMediaPhoto.model_rebuild()
InputMediaVideo.model_rebuild()
InputMediaAnimation.model_rebuild()
InputMediaAudio.model_rebuild()
InputMediaDocument.model_rebuild()
InputFile.model_rebuild()
InputPaidMediaPhoto.model_rebuild()
InputPaidMediaVideo.model_rebuild()
InputProfilePhotoStatic.model_rebuild()
InputProfilePhotoAnimated.model_rebuild()
InputStoryContentPhoto.model_rebuild()
InputStoryContentVideo.model_rebuild()
Sticker.model_rebuild()
StickerSet.model_rebuild()
MaskPosition.model_rebuild()
InputSticker.model_rebuild()
InlineQuery.model_rebuild()
InlineQueryResultsButton.model_rebuild()
InlineQueryResultArticle.model_rebuild()
InlineQueryResultPhoto.model_rebuild()
InlineQueryResultGif.model_rebuild()
InlineQueryResultMpeg4Gif.model_rebuild()
InlineQueryResultVideo.model_rebuild()
InlineQueryResultAudio.model_rebuild()
InlineQueryResultVoice.model_rebuild()
InlineQueryResultDocument.model_rebuild()
InlineQueryResultLocation.model_rebuild()
InlineQueryResultVenue.model_rebuild()
InlineQueryResultContact.model_rebuild()
InlineQueryResultGame.model_rebuild()
InlineQueryResultCachedPhoto.model_rebuild()
InlineQueryResultCachedGif.model_rebuild()
InlineQueryResultCachedMpeg4Gif.model_rebuild()
InlineQueryResultCachedSticker.model_rebuild()
InlineQueryResultCachedDocument.model_rebuild()
InlineQueryResultCachedVideo.model_rebuild()
InlineQueryResultCachedVoice.model_rebuild()
InlineQueryResultCachedAudio.model_rebuild()
InputTextMessageContent.model_rebuild()
InputLocationMessageContent.model_rebuild()
InputVenueMessageContent.model_rebuild()
InputContactMessageContent.model_rebuild()
InputInvoiceMessageContent.model_rebuild()
ChosenInlineResult.model_rebuild()
SentWebAppMessage.model_rebuild()
PreparedInlineMessage.model_rebuild()
LabeledPrice.model_rebuild()
Invoice.model_rebuild()
ShippingAddress.model_rebuild()
OrderInfo.model_rebuild()
ShippingOption.model_rebuild()
SuccessfulPayment.model_rebuild()
RefundedPayment.model_rebuild()
ShippingQuery.model_rebuild()
PreCheckoutQuery.model_rebuild()
PaidMediaPurchased.model_rebuild()
RevenueWithdrawalStatePending.model_rebuild()
RevenueWithdrawalStateSucceeded.model_rebuild()
RevenueWithdrawalStateFailed.model_rebuild()
AffiliateInfo.model_rebuild()
TransactionPartnerUser.model_rebuild()
TransactionPartnerChat.model_rebuild()
TransactionPartnerAffiliateProgram.model_rebuild()
TransactionPartnerFragment.model_rebuild()
TransactionPartnerTelegramAds.model_rebuild()
TransactionPartnerTelegramApi.model_rebuild()
TransactionPartnerOther.model_rebuild()
StarTransaction.model_rebuild()
StarTransactions.model_rebuild()
PassportData.model_rebuild()
PassportFile.model_rebuild()
EncryptedPassportElement.model_rebuild()
EncryptedCredentials.model_rebuild()
PassportElementErrorDataField.model_rebuild()
PassportElementErrorFrontSide.model_rebuild()
PassportElementErrorReverseSide.model_rebuild()
PassportElementErrorSelfie.model_rebuild()
PassportElementErrorFile.model_rebuild()
PassportElementErrorFiles.model_rebuild()
PassportElementErrorTranslationFile.model_rebuild()
PassportElementErrorTranslationFiles.model_rebuild()
PassportElementErrorUnspecified.model_rebuild()
Game.model_rebuild()
CallbackGame.model_rebuild()
GameHighScore.model_rebuild()
